%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1607.m00.i125.n006.P.c25.426934942 Weight loss. Man before and after diet vector illustration.eps
%%Creator: Adobe Illustrator(R) 18.1
%%For:  
%%CreationDate: 7/15/2016
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 18.1.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 18.1.1 x446 R agm 4.7721 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c014 79.156821, 2014/08/29-03:07:50        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">1510.m00.i125.n026.S.c12.297897560 Human resources personnel recruitment vector infographics</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2016-07-14T13:03:30+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-07-14T13:03:30+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-07-14T13:03:30+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FUpu/N/lOzJF3rdhblTQ+rdQpQnenxMMVVLPzL5cvWVbLVbO6ZwCghuIpCQdgRxY+OKplirsV&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:3a8bdee6-e4d3-1b4c-bd2d-d7ab15b0073e</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:3a8bdee6-e4d3-1b4c-bd2d-d7ab15b0073e</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:b173f89a-ceb5-934d-8864-4bac586a5a67</stRef:instanceID>
            <stRef:documentID>xmp.did:b173f89a-ceb5-934d-8864-4bac586a5a67</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4239c0b2-9560-5644-9c1b-2d4eaefa5ca4</stEvt:instanceID>
                  <stEvt:when>2015-03-29T08:26:58+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:3a8bdee6-e4d3-1b4c-bd2d-d7ab15b0073e</stEvt:instanceID>
                  <stEvt:when>2016-07-14T13:03:30+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Áåëûé</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>×åðíûé</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
450 450 mo
0 450 li
0 0 li
450 0 li
450 450 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
191.354 407.36 mo
191.354 411.525 159.9 414.901 121.099 414.901 cv
82.2986 414.901 50.8444 411.525 50.8444 407.36 cv
50.8444 403.194 82.2986 399.818 121.099 399.818 cv
159.9 399.818 191.354 403.195 191.354 407.36 cv
cp
.2551 .187503 .19794 .0162966 cmyk
f
174.799 406.162 mo
174.799 408.967 148.485 411.241 116.027 411.241 cv
83.5678 411.241 57.2547 408.967 57.2547 406.162 cv
57.2547 403.357 83.5678 401.084 116.027 401.084 cv
148.485 401.084 174.799 403.357 174.799 406.162 cv
cp
.449928 .352575 .352575 .148501 cmyk
f
137.993 405.579 mo
137.993 407.227 124.725 408.563 108.359 408.563 cv
91.9927 408.563 78.7251 407.227 78.7251 405.579 cv
78.7251 403.931 91.9927 402.595 108.359 402.595 cv
124.725 402.595 137.993 403.931 137.993 405.579 cv
cp
.581018 .478523 .468666 .378912 cmyk
f
395.129 407.36 mo
395.129 411.525 363.675 414.901 324.874 414.901 cv
286.073 414.901 254.619 411.525 254.619 407.36 cv
254.619 403.194 286.073 399.818 324.874 399.818 cv
363.675 399.818 395.129 403.195 395.129 407.36 cv
cp
.2551 .187503 .19794 .0162966 cmyk
f
378.573 406.162 mo
378.573 408.967 352.26 411.241 319.801 411.241 cv
287.342 411.241 261.029 408.967 261.029 406.162 cv
261.029 403.357 287.342 401.084 319.801 401.084 cv
352.26 401.084 378.573 403.357 378.573 406.162 cv
cp
.449928 .352575 .352575 .148501 cmyk
f
341.768 405.579 mo
341.768 407.227 328.5 408.563 312.134 408.563 cv
295.767 408.563 282.5 407.227 282.5 405.579 cv
282.5 403.931 295.767 402.595 312.134 402.595 cv
328.5 402.595 341.768 403.931 341.768 405.579 cv
cp
.581018 .478523 .468666 .378912 cmyk
f
328.089 328.416 mo
294.017 328.416 li
291.076 332.581 283.483 345.359 288.742 360.208 cv
286.851 367.774 288.742 370.043 289.499 370.422 cv
287.986 376.096 293.281 390.848 294.038 399.549 cv
298.199 399.927 300.09 399.17 300.09 399.17 cv
300.09 399.17 301.603 384.418 304.629 380.635 cv
307.656 376.852 305.764 369.665 303.495 367.396 cv
305.208 364.35 307.368 358.233 309.045 350.632 cv
309.045 350.632 310.187 351.077 311.136 351.077 cv
312.176 351.077 313.061 350.632 313.061 350.632 cv
314.738 358.233 316.899 364.35 318.612 367.396 cv
316.342 369.665 314.451 376.852 317.477 380.635 cv
320.503 384.418 322.016 399.17 322.016 399.17 cv
322.016 399.17 323.908 399.927 328.069 399.549 cv
328.825 390.848 334.121 376.096 332.608 370.422 cv
333.365 370.043 335.256 367.774 333.365 360.208 cv
338.624 345.359 331.031 332.581 328.089 328.416 cv
cp
0 .856229 1 .000488289 cmyk
f
326.161 379.548 mo
325.999 380.426 325.561 392.748 323.303 390.205 cv
321.774 388.482 320.122 382.337 318.826 380.446 cv
317.495 378.505 317.163 374.963 317.417 372.523 cv
317.698 369.82 320.777 366.783 323.83 369.356 cv
326.403 372.868 326.826 375.925 326.161 379.548 cv
cp
334.665 344.041 mo
334.613 350.261 333.364 356.285 329.297 360.559 cv
328.422 361.478 327.436 362.208 326.43 362.662 cv
328.266 362.798 330.479 363.141 331.517 364.46 cv
332.906 366.226 331.543 368.439 329.478 368.79 cv
327.268 369.164 323.564 368.848 321.864 367.144 cv
320.281 365.556 321.36 363.765 322.98 362.95 cv
321.9 362.572 320.927 361.682 320.201 360.109 cv
317.678 354.637 315.381 347.494 318.826 342.672 cv
314.922 345.427 313.314 348.642 310.444 348.297 cv
306.058 347.771 308.369 344.854 308.007 344.833 cv
305.832 344.706 303.838 344.176 302.196 342.676 cv
301.156 341.726 299.549 339.164 298.038 338.167 cv
299.518 342.134 300.625 346.374 300.37 350.63 cv
300.071 355.63 297.446 360.07 299.57 364.936 cv
299.841 365.555 300.097 366.173 300.345 366.789 cv
300.619 366.913 300.751 367.271 300.657 367.581 cv
302.816 373.234 301.536 379.205 297.585 384.579 cv
296.838 387.075 296.083 394.733 295.174 394.109 cv
293.389 392.883 290.716 378.914 290.885 375.921 cv
290.98 374.245 291.336 372.261 292.917 371.312 cv
294.711 370.235 296.997 369.896 298.507 368.525 cv
295.645 369.464 291.309 370.705 288.731 369.62 cv
289.005 370.07 289.293 370.319 289.499 370.422 cv
287.986 376.096 293.281 390.848 294.038 399.549 cv
298.199 399.927 300.09 399.17 300.09 399.17 cv
300.09 399.17 300.644 384.228 303.67 380.446 cv
306.696 376.663 305.021 369.626 302.751 367.357 cv
304.464 364.311 306.585 357.85 308.263 350.249 cv
308.263 350.249 310.187 351.077 311.136 351.077 cv
312.176 351.077 313.061 350.632 313.061 350.632 cv
314.738 358.232 316.899 364.35 318.612 367.396 cv
316.342 369.665 314.451 376.852 317.477 380.635 cv
320.503 384.418 322.016 399.17 322.016 399.17 cv
322.016 399.17 323.414 399.965 327.575 399.587 cv
328.332 390.887 333.313 376.131 331.8 370.457 cv
332.556 370.078 334.495 367.804 332.603 360.238 cv
334.673 354.394 335.509 348.845 334.665 344.041 cv
cp
.163912 .917113 1 .0738537 cmyk
f
303.908 335.074 mo
310.179 336.64 316.309 335.753 322.568 334.625 cv
325.394 334.116 329.161 335.224 331.8 336.816 cv
330.384 333.544 329.115 329.869 328.089 328.416 cv
295.403 328.416 li
297.518 331.387 299.703 334.024 303.908 335.074 cv
cp
f
294.885 347.876 mo
295.225 345.568 297.829 336.185 293.718 335.952 cv
291.378 335.822 290.16 339.726 289.611 341.28 cv
287.341 347.695 290.065 354.305 289.973 360.886 cv
289.935 363.605 287.513 365.912 291.441 367.012 cv
293.236 367.514 295.822 366.702 295.444 364.421 cv
294.988 361.666 291.312 361.755 290.852 359.463 cv
290.446 357.445 292.744 356.671 293.397 355.302 cv
294.538 352.908 294.493 350.534 294.885 347.876 cv
cp
0 .747524 .82153 0 cmyk
f
298.384 377.401 mo
299.687 374.789 300.221 371.609 297.203 371.591 cv
293.691 371.571 293.442 378.64 295.172 380.63 cv
295.744 381.288 297.321 379.534 298.384 377.401 cv
cp
f
316.284 337.621 mo
312.969 337.577 310.285 338.134 306.996 337.759 cv
304.746 337.503 302.377 337.522 304.978 339.992 cv
306.059 341.017 308.084 340.961 309.044 342.118 cv
309.651 342.849 309.394 344.404 309.904 344.907 cv
312.72 347.68 322.775 337.706 316.284 337.621 cv
cp
f
328.262 351.211 mo
328.204 348.517 326.613 342.1 324.133 340.635 cv
319.288 337.773 319.446 349.107 319.744 351.168 cv
320.165 354.079 321.808 359.376 324.954 360.689 cv
328.568 362.195 328.301 353.029 328.262 351.211 cv
cp
f
322.486 364.667 mo
322.54 367.464 327.199 368.353 328.577 366.055 cv
330.336 363.118 322.427 361.585 322.486 364.667 cv
cp
f
319.87 379.733 mo
325.185 387.641 321.534 363.512 318.157 372.622 cv
317.417 374.621 318.751 378.068 319.87 379.733 cv
cp
f
231.38 218.894 mo
231.955 219.773 231.189 220.858 229.67 221.318 cv
228.151 221.777 226.453 221.437 225.878 220.557 cv
225.303 219.678 226.068 218.593 227.588 218.133 cv
229.107 217.674 230.805 218.014 231.38 218.894 cv
cp
.225498 .612055 .82446 .125887 cmyk
f
214.814 271.17 mo
208.937 273.154 203.792 272.089 204.557 265.812 cv
202.261 257.852 202.72 244.993 206.241 238.869 cv
209.762 232.746 214.414 220.86 215.638 215.961 cv
216.863 211.063 223.846 199.067 230.429 202.128 cv
237.011 205.19 237.777 218.049 232.878 218.968 cv
227.979 219.886 226.908 220.499 224.458 221.264 cv
223.234 227.081 221.244 233.511 223.081 236.726 cv
224.918 239.941 238.849 263.057 214.814 271.17 cv
cp
.0213016 .496376 .68127 0 cmyk
f
234.407 209.479 mo
233.818 207.508 220.401 213.819 222.726 215.61 cv
222.726 216.988 221.654 217.983 218.975 218.059 cv
217.096 217.511 219.798 232.061 216.372 237.501 cv
202.626 259.334 223.261 256.178 228.433 250.485 cv
227.329 244.013 223.95 238.362 223.108 236.889 cv
221.271 233.674 223.797 227.072 225.022 221.255 cv
227.471 220.49 226.184 220.861 230.936 219.358 cv
234.218 218.32 235.7 213.69 234.407 209.479 cv
cp
.0840772 .560021 .779934 .00842298 cmyk
f
230.356 247.196 mo
226.623 249.617 206.715 267.843 210.498 271.152 cv
214.28 274.462 245.91 283.978 257.677 262.75 cv
261.721 248.457 253.683 232.065 230.356 247.196 cv
cp
.0213016 .496376 .68127 0 cmyk
f
243.105 241.525 mo
239.514 242.227 235.28 244.002 230.356 247.196 cv
227.818 248.842 217.809 257.791 212.846 264.393 cv
217.755 259.227 223.474 254.239 225.305 253.051 cv
229.766 250.157 233.664 248.424 237.029 247.601 cv
243.105 241.525 li
cp
.0840772 .560021 .779934 .00842298 cmyk
f
227.618 252.997 mo
228.466 257.709 235.699 258.082 239.335 259.393 cv
243.466 260.882 236.886 267.965 230.15 271.639 cv
226.045 273.879 248.674 279.906 257.677 262.75 cv
261.721 248.457 250.945 237.866 227.618 252.997 cv
cp
f
246.275 237.897 mo
244.208 237.791 238.237 236.005 234.139 237.582 cv
230.041 239.158 227.362 242.467 227.362 251.451 cv
227.362 260.435 249.585 256.022 253.998 252.239 cv
258.411 248.457 252.422 238.212 246.275 237.897 cv
cp
.0213016 .496376 .68127 0 cmyk
f
244.099 252.065 mo
250.817 248.064 246.904 239.848 244.25 237.61 cv
241.51 237.138 237.278 236.374 234.139 237.582 cv
231.445 238.618 229.37 240.417 228.26 244.072 cv
225.711 257.249 239.549 254.774 244.099 252.065 cv
cp
0 .419654 .583246 0 cmyk
f
244.902 240.585 mo
244.902 242.182 241.989 243.477 238.395 243.477 cv
234.8 243.477 231.887 242.182 231.887 240.585 cv
231.887 238.988 234.8 237.693 238.395 237.693 cv
241.989 237.693 244.902 238.988 244.902 240.585 cv
cp
0 .306889 .497108 0 cmyk
f
239.196 244.165 mo
239.196 245.118 237.457 245.891 235.312 245.891 cv
233.167 245.891 231.428 245.118 231.428 244.165 cv
231.428 243.211 233.167 242.438 235.312 242.438 cv
237.457 242.438 239.196 243.211 239.196 244.165 cv
cp
f
229.345 219.89 mo
227.348 220.19 226.83 218.028 228.294 216.98 cv
229.647 216.013 230.705 216.088 230.705 216.088 cv
229.868 215.416 230.074 214.309 230.074 214.309 cv
230.074 214.309 228.294 216.98 224.792 217.523 cv
226.023 219.77 225.022 221.255 225.022 221.255 cv
229.345 219.89 li
cp
.225498 .612055 .82446 .125887 cmyk
f
212.699 269.343 mo
210.706 268.11 209.02 271.132 207.187 269.649 cv
205.438 268.235 204.314 259.07 203.223 257.293 cv
203.394 260.374 203.841 263.331 204.557 265.812 cv
203.931 270.947 207.261 272.591 211.71 271.934 cv
216.941 274.735 234.154 279.293 247.009 272.952 cv
251.123 264.444 235.202 283.274 212.699 269.343 cv
cp
.0840772 .560021 .779934 .00842298 cmyk
f
207.451 241.198 mo
206.079 244.386 201.568 260.875 207.953 259.699 cv
213.77 258.627 209.331 249.901 210.269 243.519 cv
211.401 235.825 210.096 235.052 207.451 241.198 cv
cp
0 .419654 .583246 0 cmyk
f
214.459 264.291 mo
216.567 261.812 222.598 254.099 226.214 255.873 cv
236.044 260.694 235.432 265.21 227.777 266.894 cv
220.123 268.578 212.371 266.746 214.459 264.291 cv
cp
f
216.569 214.937 mo
217.797 211.406 224.311 200.385 229.043 202.278 cv
233.697 204.139 236.303 208.328 230.439 208.794 cv
227.19 209.051 215.08 219.219 216.569 214.937 cv
cp
f
215.568 225.918 mo
217.158 221.192 218.388 214.211 217.779 214.006 cv
217.17 213.802 214.952 220.45 213.362 225.177 cv
211.773 229.903 212.044 230.716 212.653 230.921 cv
213.263 231.126 213.978 230.645 215.568 225.918 cv
cp
f
229.264 202.94 mo
229.875 203.807 228.802 205.616 226.867 206.98 cv
224.932 208.345 222.868 208.748 222.257 207.882 cv
221.646 207.015 222.719 205.206 224.654 203.842 cv
226.588 202.477 228.652 202.073 229.264 202.94 cv
cp
0 .306889 .497108 0 cmyk
f
222.748 207.351 mo
223.195 207.718 222.893 208.825 222.074 209.824 cv
221.255 210.822 220.228 211.334 219.781 210.967 cv
219.333 210.6 219.635 209.493 220.454 208.494 cv
221.273 207.496 222.3 206.984 222.748 207.351 cv
cp
f
391.093 218.894 mo
390.518 219.773 391.284 220.858 392.803 221.318 cv
394.322 221.777 396.02 221.437 396.595 220.557 cv
397.17 219.678 396.405 218.593 394.886 218.133 cv
393.366 217.674 391.669 218.014 391.093 218.894 cv
cp
.225498 .612055 .82446 .125887 cmyk
f
407.659 271.17 mo
413.537 273.155 418.681 272.089 417.916 265.812 cv
420.212 257.852 419.753 244.993 416.232 238.869 cv
412.711 232.746 408.06 220.86 406.835 215.961 cv
405.61 211.063 398.627 199.067 392.044 202.128 cv
385.462 205.19 384.696 218.049 389.595 218.968 cv
394.494 219.886 395.565 220.499 398.015 221.264 cv
399.24 227.081 401.23 233.511 399.393 236.726 cv
397.556 239.941 383.625 263.057 407.659 271.17 cv
cp
.0213016 .496376 .68127 0 cmyk
f
387.774 209.007 mo
388.363 207.036 401.78 213.348 399.456 215.138 cv
399.456 216.516 400.527 217.511 403.206 217.587 cv
405.085 217.04 399.557 231.516 402.983 236.956 cv
416.729 258.789 398.92 255.706 393.748 250.013 cv
394.852 243.542 398.231 237.89 399.073 236.417 cv
400.91 233.202 398.384 226.601 397.159 220.783 cv
394.71 220.018 395.997 220.389 391.245 218.886 cv
387.963 217.848 386.482 213.219 387.774 209.007 cv
cp
.0840772 .560021 .779934 .00842298 cmyk
f
392.117 247.196 mo
395.85 249.617 415.758 267.843 411.976 271.152 cv
408.193 274.462 376.563 283.978 364.796 262.75 cv
360.753 248.457 368.791 232.065 392.117 247.196 cv
cp
.0213016 .496376 .68127 0 cmyk
f
379.368 241.525 mo
382.959 242.227 387.194 244.002 392.117 247.196 cv
394.655 248.842 404.664 257.791 409.627 264.393 cv
404.718 259.227 398.999 254.239 397.169 253.051 cv
392.707 250.157 388.81 248.424 385.444 247.602 cv
379.368 241.525 li
cp
.0840772 .560021 .779934 .00842298 cmyk
f
394.855 252.997 mo
394.007 257.709 386.774 258.082 383.138 259.393 cv
379.007 260.882 385.587 267.965 392.323 271.639 cv
396.428 273.879 378.988 283.198 364.796 262.75 cv
360.753 248.457 371.529 237.866 394.855 252.997 cv
cp
.127077 .600885 .835172 .0233768 cmyk
f
376.198 237.897 mo
378.265 237.791 384.236 236.005 388.334 237.582 cv
392.432 239.158 395.111 242.467 395.111 251.451 cv
395.111 260.435 372.888 256.022 368.475 252.239 cv
364.062 248.457 370.051 238.212 376.198 237.897 cv
cp
.0213016 .496376 .68127 0 cmyk
f
378.375 252.065 mo
371.656 248.064 375.57 239.848 378.223 237.61 cv
380.964 237.138 385.196 236.374 388.334 237.582 cv
391.029 238.618 393.103 240.417 394.213 244.072 cv
396.762 257.249 382.924 254.774 378.375 252.065 cv
cp
0 .419654 .583246 0 cmyk
f
377.571 240.585 mo
377.571 242.182 380.485 243.477 384.079 243.477 cv
387.673 243.477 390.586 242.182 390.586 240.585 cv
390.586 238.988 387.673 237.693 384.079 237.693 cv
380.485 237.693 377.571 238.988 377.571 240.585 cv
cp
0 .306889 .497108 0 cmyk
f
383.277 244.165 mo
383.277 245.118 385.016 245.891 387.161 245.891 cv
389.307 245.891 391.046 245.118 391.046 244.165 cv
391.046 243.211 389.307 242.439 387.161 242.439 cv
385.016 242.439 383.277 243.211 383.277 244.165 cv
cp
f
393.128 219.89 mo
395.125 220.19 395.643 218.028 394.179 216.98 cv
392.826 216.013 391.768 216.088 391.768 216.088 cv
392.605 215.416 392.399 214.309 392.399 214.309 cv
392.399 214.309 394.179 216.98 397.681 217.523 cv
396.451 219.77 397.451 221.255 397.451 221.255 cv
393.128 219.89 li
cp
.225498 .612055 .82446 .125887 cmyk
f
408.151 267.468 mo
410.143 266.235 412.333 268.903 414.166 267.421 cv
415.915 266.006 422.123 251.564 413.638 233.797 cv
423.03 247.635 418.632 263.331 417.916 265.812 cv
418.542 270.947 415.212 272.591 410.763 271.934 cv
405.532 274.735 388.319 279.293 375.465 272.952 cv
381.859 251.623 385.648 281.399 408.151 267.468 cv
cp
.127077 .600885 .835172 .0233768 cmyk
f
408.624 239.878 mo
410.131 242.224 417.389 247.333 412.126 254.382 cv
409.461 257.953 411.747 250.153 406.609 241.288 cv
403.476 235.882 405.718 235.354 408.624 239.878 cv
cp
0 .419654 .583246 0 cmyk
f
408.014 264.291 mo
405.906 261.812 399.876 254.099 396.259 255.873 cv
386.429 260.694 387.042 265.21 394.696 266.894 cv
402.35 268.578 410.102 266.746 408.014 264.291 cv
cp
f
405.904 214.937 mo
404.676 211.406 398.162 200.385 393.43 202.278 cv
388.776 204.139 386.17 208.328 392.034 208.794 cv
395.283 209.051 407.393 219.219 405.904 214.937 cv
cp
f
406.905 225.918 mo
405.316 221.192 404.085 214.211 404.694 214.006 cv
405.303 213.802 407.521 220.45 409.111 225.177 cv
410.701 229.903 410.429 230.716 409.82 230.921 cv
409.211 231.126 408.495 230.645 406.905 225.918 cv
cp
f
389.952 207.287 mo
390.438 207.988 392.101 207.677 393.666 206.591 cv
395.231 205.506 396.106 204.057 395.619 203.356 cv
395.133 202.655 393.47 202.967 391.905 204.052 cv
390.34 205.138 389.465 206.586 389.952 207.287 cv
cp
0 .306889 .497108 0 cmyk
f
392.845 207.054 mo
392.999 207.493 393.919 207.571 394.9 207.227 cv
395.88 206.884 396.551 206.249 396.397 205.81 cv
396.243 205.37 395.323 205.293 394.342 205.636 cv
393.362 205.98 392.691 206.614 392.845 207.054 cv
cp
f
310.037 247.452 mo
310.037 311.296 li
287.21 311.296 li
281.938 296.057 274.72 297.197 267.012 286.183 cv
256.221 270.762 253.642 258.618 253.642 247.452 cv
310.037 247.452 li
cp
.0213016 .496376 .68127 0 cmyk
f
284.415 256.646 mo
286.307 253.405 288.34 250.257 290.423 247.14 cv
250.443 248.824 li
250.443 248.824 252.531 256.825 255.21 261.332 cv
258.386 268.749 261.804 259.554 271.501 281.09 cv
275.634 272.845 279.783 264.586 284.415 256.646 cv
cp
.225498 .612055 .82446 .125887 cmyk
f
312.103 247.452 mo
312.103 311.296 li
334.93 311.296 li
340.201 296.057 347.42 297.197 355.127 286.183 cv
365.919 270.762 368.498 258.618 368.498 247.452 cv
312.103 247.452 li
cp
.0213016 .496376 .68127 0 cmyk
f
352.331 286.077 mo
348.237 291.117 339.692 295.908 338 302.682 cv
340.387 299.021 343.008 296.844 345.725 294.597 cv
348.516 292.291 351.401 289.905 354.375 285.656 cv
357.387 281.353 359.717 277.333 361.526 273.579 cv
358.699 277.973 355.51 282.164 352.331 286.077 cv
cp
0 .419654 .583246 0 cmyk
f
337.724 256.646 mo
335.833 253.405 333.799 250.257 331.717 247.14 cv
370.208 246.109 li
370.208 246.109 368.634 262.429 365.286 264.418 cv
360.122 267.486 354.391 274.417 350.638 281.09 cv
346.506 272.845 342.357 264.586 337.724 256.646 cv
cp
.225498 .612055 .82446 .125887 cmyk
f
282.965 286.336 mo
282.965 297.664 289.001 328.281 296.474 330.118 cv
302.365 331.566 306.821 331.872 309.995 331.937 cv
309.983 331.956 li
310.339 331.956 310.725 331.955 311.133 331.953 cv
311.541 331.955 311.926 331.956 312.283 331.956 cv
312.271 331.937 li
315.445 331.872 319.901 331.566 325.792 330.118 cv
333.265 328.281 339.301 297.664 339.301 286.336 cv
282.965 286.336 li
cp
.0213016 .496376 .68127 0 cmyk
f
376.198 237.897 mo
368.042 223.272 350.969 228.007 349.577 230.194 cv
345.998 224.627 336.682 223.82 336.682 223.82 cv
329.421 222.588 320.507 225.384 311.133 230.495 cv
301.758 225.384 292.845 222.588 285.584 223.82 cv
285.584 223.82 276.268 224.627 272.689 230.194 cv
271.297 228.007 254.786 220.717 246.275 237.897 cv
251.003 251.451 261.951 261.016 267.519 261.413 cv
267.398 272.493 269.981 281.606 275.391 287.415 cv
346.875 287.415 li
352.284 281.606 354.868 272.493 354.747 261.413 cv
360.315 261.016 370.66 253.553 376.198 237.897 cv
cp
0 .419654 .583246 0 cmyk
f
307 249.595 mo
309.538 256.226 311.828 273.783 305.181 278.146 cv
295.552 284.465 273.384 269.261 265.819 247.353 cv
263.139 249.657 265.749 254.383 268.34 261.223 cv
273.37 274.502 283.235 292.383 288.562 292.383 cv
296.634 292.383 310.85 291.228 311.116 286.183 cv
311.407 280.64 312.54 274.242 311.116 255.642 cv
311.116 255.642 310.367 249.595 307 249.595 cv
cp
.0213016 .496376 .68127 0 cmyk
f
315.955 275.39 mo
320.481 280.325 349.993 272.354 361.505 246.201 cv
368.252 248.449 374.283 241.601 374.283 241.601 cv
373.5 245.515 369.188 253.493 354.747 261.413 cv
353.94 281.876 338.06 292.383 333.422 292.383 cv
325.351 292.383 311.134 291.228 310.869 286.183 cv
310.578 280.64 309.445 274.242 310.869 255.642 cv
310.869 255.642 313.095 272.272 315.955 275.39 cv
cp
f
246.559 238.679 mo
249.9 251.451 267.617 265.745 265.819 247.353 cv
261.415 246.149 251.791 247.826 246.559 238.679 cv
cp
f
247.133 240.494 mo
250.688 255.549 263.254 261.109 267.519 261.413 cv
267.338 278.059 273.25 290.277 285.701 293.498 cv
286.658 293.814 290.466 293.99 295.059 293.99 cv
300.881 293.99 305.77 289.528 311.592 289.551 cv
317.189 289.573 322.681 293.99 328.279 293.99 cv
332.259 293.99 335.608 293.814 336.564 293.498 cv
349.015 290.277 354.928 278.059 354.747 261.413 cv
360.892 261.534 372.136 252.334 374.283 241.601 cv
374.283 241.601 366.309 256.729 362.834 247.325 cv
351.692 271.245 321.696 291.694 311.133 282.049 cv
303.785 289.627 287.438 283.318 279.543 276.046 cv
275.868 272.662 267.188 258.225 265.503 253.343 cv
251.919 251.083 247.133 240.494 247.133 240.494 cv
cp
.0840772 .560021 .779934 .00842298 cmyk
f
331.805 215.474 mo
288.629 216.146 li
286.634 223.673 li
286.634 223.673 307.689 239.109 313.429 239.109 cv
319.17 239.109 336.944 223.848 336.944 223.848 cv
331.805 215.474 li
cp
.0213016 .496376 .68127 0 cmyk
f
292.303 237.731 mo
266.585 235.435 279.674 226.938 285.655 227.413 cv
291.584 227.885 299.295 234.932 302.177 237.272 cv
306.635 240.889 295.134 237.984 292.303 237.731 cv
cp
0 .306889 .497108 0 cmyk
f
284.037 284.125 mo
283.552 285.016 281.925 285.066 280.402 284.237 cv
278.88 283.408 278.04 282.013 278.525 281.122 cv
279.01 280.231 280.638 280.181 282.16 281.01 cv
283.682 281.839 284.522 283.234 284.037 284.125 cv
cp
.225498 .612055 .82446 .125887 cmyk
f
339.3 284.125 mo
339.786 285.016 341.413 285.066 342.935 284.237 cv
344.457 283.408 345.298 282.013 344.812 281.122 cv
344.327 280.231 342.7 280.181 341.178 281.01 cv
339.656 281.839 338.815 283.234 339.3 284.125 cv
cp
f
318.694 244.834 mo
316.56 245.973 316.91 257.715 318.694 263.264 cv
320.453 268.738 335.119 262.806 340.294 254.544 cv
351.589 236.511 325.504 241.201 318.694 244.834 cv
cp
0 .306889 .497108 0 cmyk
f
298.274 240.027 mo
306.54 246.227 307.918 262.76 303.555 267.583 cv
294.279 277.835 279.444 267.353 277.538 256.79 cv
273.159 232.525 287.057 231.615 298.274 240.027 cv
cp
f
310.719 291.587 mo
310.719 291.587 309.124 300.794 300.215 300.794 cv
295.681 300.794 293.821 300.211 293.005 298.114 cv
292.189 302.193 295.456 304.29 299.302 304.29 cv
305.478 304.29 310.719 303.475 310.719 291.587 cv
cp
.0840772 .560021 .779934 .00842298 cmyk
f
326.021 296.42 mo
326.021 296.42 328.423 301.5 319.515 301.5 cv
314.98 301.5 312.765 301.035 310.67 299.36 cv
312.341 302.616 316.887 304.29 320.733 304.29 cv
326.91 304.29 330.46 300.859 326.021 296.42 cv
cp
f
310.719 315.828 mo
310.719 315.828 309.124 325.035 300.215 325.035 cv
295.681 325.035 293.821 324.452 293.005 322.354 cv
292.189 326.434 295.456 328.531 299.302 328.531 cv
305.478 328.531 310.719 327.716 310.719 315.828 cv
cp
f
326.178 320.661 mo
326.178 320.661 328.39 325.741 320.185 325.741 cv
316.009 325.741 313.969 325.276 312.04 323.601 cv
313.579 326.857 317.765 328.531 321.307 328.531 cv
326.996 328.531 330.266 325.1 326.178 320.661 cv
cp
f
310.75 302.306 mo
310.75 302.306 308.978 312.531 299.084 312.531 cv
294.049 312.531 291.983 311.884 291.077 309.554 cv
290.171 314.084 293.798 316.414 298.07 316.414 cv
304.93 316.414 310.75 315.508 310.75 302.306 cv
cp
f
327.744 307.673 mo
327.744 307.673 330.412 313.315 320.518 313.315 cv
315.482 313.315 313.022 312.798 310.695 310.939 cv
312.551 314.555 317.6 316.414 321.871 316.414 cv
328.731 316.414 332.673 312.603 327.744 307.673 cv
cp
f
311.542 323.85 mo
311.542 322.762 311.075 321.88 310.498 321.88 cv
309.922 321.88 309.454 322.762 309.454 323.85 cv
309.454 324.938 309.922 325.819 310.498 325.819 cv
311.075 325.819 311.542 324.938 311.542 323.85 cv
cp
.225498 .612055 .82446 .125887 cmyk
f
305.53 295.191 mo
305.614 295.823 303.792 296.414 301.676 297.162 cv
298.967 298.12 297.313 298.171 297.229 297.539 cv
297.145 296.907 299.37 295.951 300.97 295.439 cv
303.448 294.646 305.446 294.559 305.53 295.191 cv
cp
0 .419654 .583246 0 cmyk
f
305.352 306.79 mo
305.444 307.484 302.826 309.922 300.997 310.165 cv
299.168 310.409 296.327 310.063 296.235 309.369 cv
296.143 308.675 298.586 307.625 300.344 307.062 cv
303.066 306.191 305.26 306.096 305.352 306.79 cv
cp
f
319.186 307.431 mo
318.884 307.74 318.166 308.211 315.792 308.462 cv
314.739 308.574 313.383 308.508 313.685 308.2 cv
313.987 307.891 315.571 306.999 316.712 306.797 cv
318.706 306.443 319.488 307.123 319.186 307.431 cv
cp
f
318.866 296.289 mo
318.564 296.597 317.846 297.069 315.473 297.32 cv
314.419 297.431 313.063 297.366 313.365 297.057 cv
313.667 296.749 315.251 295.857 316.392 295.654 cv
318.386 295.3 319.168 295.98 318.866 296.289 cv
cp
f
305.53 319.203 mo
305.614 319.834 303.792 320.426 301.676 321.174 cv
298.967 322.131 297.313 322.183 297.229 321.551 cv
297.145 320.919 299.37 319.962 300.97 319.45 cv
303.448 318.657 305.446 318.571 305.53 319.203 cv
cp
f
318.866 320.3 mo
318.564 320.608 317.846 321.08 315.473 321.331 cv
314.419 321.443 313.063 321.377 313.365 321.069 cv
313.667 320.76 315.251 319.868 316.392 319.665 cv
318.386 319.312 319.168 319.992 318.866 320.3 cv
cp
f
324.916 293.526 mo
324.916 293.526 331.115 294.768 330.763 301.448 cv
329.238 330.431 325.304 329.353 310.871 329.353 cv
296.438 329.353 291.844 331.802 286.417 302.208 cv
286.031 300.105 286.18 295.215 290.603 293.926 cv
282.965 286.336 li
282.965 297.664 289.001 328.281 296.474 330.118 cv
302.365 331.566 306.821 331.872 309.995 331.937 cv
309.983 331.956 li
310.339 331.956 310.725 331.955 311.133 331.953 cv
311.541 331.955 311.926 331.956 312.283 331.956 cv
312.271 331.937 li
315.445 331.872 319.901 331.566 325.792 330.118 cv
333.265 328.281 339.301 297.664 339.301 286.336 cv
324.916 293.526 li
cp
.0840772 .560021 .779934 .00842298 cmyk
f
313.66 239.33 mo
315.848 241.173 324.514 239.652 329.872 237.05 cv
334.429 234.836 340.94 224.965 336.597 223.917 cv
332.254 222.87 313.66 239.33 313.66 239.33 cv
cp
.0213016 .496376 .68127 0 cmyk
f
334.013 221.207 mo
288.629 216.146 li
287.334 221.032 li
287.334 221.032 302.268 230.413 312.051 233.674 cv
315.726 234.899 313.669 237.73 313.429 239.109 cv
321.949 238.195 340.497 224.228 336.944 223.848 cv
333.44 224.67 334.013 221.207 334.013 221.207 cv
cp
.127077 .600885 .835172 .0233768 cmyk
f
337.586 292.125 mo
336.592 292.442 333.111 292.618 328.973 292.618 cv
323.155 292.618 317.446 288.2 311.627 288.178 cv
305.575 288.155 300.493 292.618 294.44 292.618 cv
289.666 292.618 285.707 292.442 284.713 292.125 cv
280.938 291.186 277.746 289.476 275.116 287.12 cv
277.875 290.194 281.397 292.384 285.701 293.498 cv
286.658 293.814 290.466 293.99 295.059 293.99 cv
300.881 293.99 305.77 289.528 311.592 289.551 cv
317.189 289.573 322.681 293.99 328.279 293.99 cv
332.259 293.99 335.608 293.814 336.564 293.498 cv
340.775 292.409 344.236 290.287 346.968 287.316 cv
344.38 289.573 341.257 291.212 337.586 292.125 cv
cp
f
339.644 289.225 mo
336.564 290.849 333.303 291.779 330.039 292.076 cv
333.816 292.704 337.82 292.15 341.468 290.226 cv
346.554 287.545 349.836 282.789 350.833 277.548 cv
348.548 282.38 344.737 286.54 339.644 289.225 cv
cp
.0213016 .496376 .68127 0 cmyk
f
267.75 231.055 mo
267.75 232.653 264.837 233.948 261.243 233.948 cv
257.649 233.948 254.735 232.653 254.735 231.055 cv
254.735 229.458 257.649 228.163 261.243 228.163 cv
264.837 228.163 267.75 229.458 267.75 231.055 cv
cp
0 .306889 .497108 0 cmyk
f
261.008 234.546 mo
261.008 235.232 259.758 235.787 258.216 235.787 cv
256.674 235.787 255.424 235.232 255.424 234.546 cv
255.424 233.861 256.674 233.305 258.216 233.305 cv
259.758 233.305 261.008 233.861 261.008 234.546 cv
cp
f
405.547 272.516 mo
397.326 275.266 381.076 277.545 371.015 268.338 cv
385.074 277.686 405.547 272.516 405.547 272.516 cv
cp
.0213016 .496376 .68127 0 cmyk
f
296.468 193.452 mo
296.468 193.452 291.806 187.289 289.751 189.975 cv
287.697 192.662 293.307 200.563 293.939 199.852 cv
294.571 199.141 296.468 193.452 296.468 193.452 cv
cp
0 .419654 .583246 0 cmyk
f
293.852 193.873 mo
292.949 191.87 289.906 188.881 289.78 192.345 cv
290.213 195.453 292.85 199.001 293.142 198.372 cv
293.44 197.729 292.226 196.902 292.287 195.733 cv
292.347 194.595 294.307 194.882 293.852 193.873 cv
cp
.0213016 .496376 .68127 0 cmyk
f
291.309 193.285 mo
290.828 194.816 292.956 197.535 292.648 196.983 cv
292.443 196.614 292.263 196.201 292.287 195.733 cv
292.323 195.049 293.044 194.88 293.516 194.635 cv
293.83 194.472 291.817 191.664 291.309 193.285 cv
cp
.0840772 .560021 .779934 .00842298 cmyk
f
325.7 193.452 mo
325.7 193.452 330.362 187.289 332.416 189.975 cv
334.47 192.662 328.861 200.563 328.228 199.852 cv
327.596 199.141 325.7 193.452 325.7 193.452 cv
cp
.0213016 .496376 .68127 0 cmyk
f
328.316 193.873 mo
329.219 191.87 332.261 188.881 332.387 192.345 cv
331.955 195.453 329.318 199.001 329.026 198.372 cv
328.728 197.729 329.942 196.902 329.88 195.733 cv
329.821 194.595 327.861 194.882 328.316 193.873 cv
cp
.0840772 .560021 .779934 .00842298 cmyk
f
330.859 193.285 mo
331.339 194.816 329.212 197.535 329.52 196.983 cv
329.725 196.614 329.905 196.201 329.88 195.733 cv
329.844 195.049 329.123 194.88 328.651 194.635 cv
328.337 194.472 330.351 191.664 330.859 193.285 cv
cp
.225498 .612055 .82446 .125887 cmyk
f
297.416 163.427 mo
291.146 170.951 296.31 184.286 296.31 189.422 cv
296.31 194.558 283.865 215.101 284.458 217.472 cv
285.05 219.842 307.569 232.484 313.1 232.484 cv
318.63 232.484 338.817 219.473 337.791 216.484 cv
336.613 213.049 325.544 193.373 325.544 189.817 cv
325.544 186.262 331.002 171.672 326.255 164.691 cv
319.539 154.815 304.329 155.131 297.416 163.427 cv
cp
0 .419654 .583246 0 cmyk
f
312.51 225.935 mo
311.884 226.998 312.318 228.652 312.318 228.652 cv
306.807 228.614 307.979 225.614 308.644 225.207 cv
312.777 222.682 317.753 225.131 317.714 226.815 cv
317.671 228.714 314.002 229.953 312.51 225.935 cv
cp
337.791 216.484 mo
336.613 213.049 325.544 193.373 325.544 189.817 cv
325.544 186.262 333.398 170.272 328.652 163.292 cv
321.936 153.415 300.657 155.724 293.743 164.02 cv
287.474 171.544 296.309 184.286 296.309 189.422 cv
296.309 190.376 296.081 191.453 295.386 193.255 cv
293.883 196.688 298.732 193.365 300.033 188.314 cv
300.8 185.336 301.943 178.06 301.56 173.314 cv
301.356 170.775 304.515 175.258 317.026 173.694 cv
318.25 173.541 319.618 180.019 319.618 180.019 cv
319.62 180.542 319.799 182.022 319.43 181.642 cv
317.738 179.904 313.303 177.413 313.423 180.584 cv
313.48 182.076 313.915 188.858 314.131 189.648 cv
314.403 191.707 316.637 192.115 319.049 190.202 cv
320.623 190.151 321.32 186.871 321.496 187.411 cv
322.41 190.204 326.091 199.803 326.542 202.983 cv
326.689 204.014 326.134 206.818 323.072 207.296 cv
320.013 207.774 311.361 203.928 313.936 201.711 cv
314.806 197.269 313.221 193.28 312.203 191.682 cv
313.275 196.427 312.892 201.556 311.745 202.079 cv
310.2 202.783 307.683 201.711 307.683 201.711 cv
308.768 203.841 310.808 207.168 308.07 208.521 cv
304.811 210.132 300.503 207.999 300.503 207.999 cv
299.194 207.146 301.226 201.673 300.307 201.974 cv
298.861 200.98 296.359 208.827 290.542 213.764 cv
287.828 216.067 292.264 214.74 292.264 214.74 cv
294.763 215.122 297.66 220.825 296.225 221.514 cv
292.157 223.467 284.916 216.367 285.925 213.107 cv
284.924 215.292 284.316 216.905 284.458 217.472 cv
285.05 219.842 307.569 232.484 313.1 232.484 cv
318.63 232.484 338.817 219.473 337.791 216.484 cv
cp
.0213016 .496376 .68127 0 cmyk
f
299.755 177.612 mo
300.952 175.704 300.634 171.57 299.862 170.207 cv
302.512 171.665 314.991 173.069 319.73 171.479 cv
318.943 174.523 326.146 182.918 327.22 183.497 cv
329.222 177.149 331.915 168.091 328.652 163.292 cv
321.936 153.415 300.657 155.724 293.743 164.02 cv
287.474 171.544 298.09 179.793 299.755 177.612 cv
cp
.0840772 .560021 .779934 .00842298 cmyk
f
308.497 182.304 mo
302.329 184.793 li
301.679 185.749 304.214 186.046 303.042 190.069 cv
304.855 190.227 307.678 191.902 308.008 190.069 cv
308.338 188.237 309 183.49 308.497 182.304 cv
cp
.0213016 .496376 .68127 0 cmyk
f
295.386 193.255 mo
295.386 193.255 294.043 186.49 291.63 182.516 cv
289.216 178.542 282.535 168.978 291.327 164.582 cv
290.058 161.134 285.775 158.706 295.823 151.91 cv
305.872 145.113 314.675 144.274 314.307 141.279 cv
316.466 142.73 316.596 145.73 316.014 146.456 cv
318.385 145.293 331.977 145.053 331.559 142.454 cv
332.538 144.012 331.911 150.903 328.376 152.408 cv
331.27 153.052 334.706 155.816 334.407 159.459 cv
333.606 159.319 332.937 161.074 333.077 161.94 cv
337.566 176.377 325.659 180.03 326.271 192.528 cv
326.271 192.528 321.319 185.057 321.554 179.361 cv
321.79 173.665 324.865 166.717 320.133 169.199 cv
315.401 171.682 301.428 170.247 294.252 166.54 cv
296.42 169.588 299.712 172.318 299.712 172.318 cv
299.712 172.318 300.713 189.099 295.386 193.255 cv
cp
.390417 .621088 .702266 .531334 cmyk
f
295.386 193.255 mo
295.386 193.255 294.043 186.49 291.63 182.516 cv
290.808 181.163 289.492 179.163 288.461 176.94 cv
298.706 190.042 300.034 172.516 290.501 165.037 cv
290.76 164.88 291.035 164.728 291.327 164.582 cv
290.677 162.816 289.236 161.317 289.336 159.362 cv
295.83 165.575 311.06 160.853 315.507 155.388 cv
316.024 156.583 314.964 159.689 314.964 159.689 cv
316.98 158.986 326.04 158.05 330.101 165.345 cv
330.755 162.817 330.094 159.027 327.315 157.635 cv
331.343 157.687 334.141 158.521 334.407 159.459 cv
333.606 159.319 332.937 161.074 333.077 161.94 cv
337.566 176.377 325.659 180.03 326.271 192.528 cv
326.271 192.528 321.319 185.057 321.554 179.361 cv
321.79 173.665 324.865 166.717 320.133 169.199 cv
315.401 171.682 304.582 171.589 297.406 167.882 cv
297.737 170.556 299.712 172.318 299.712 172.318 cv
299.712 172.318 300.713 189.099 295.386 193.255 cv
cp
.425513 .70309 .747433 .654566 cmyk
f
292.558 164.197 mo
295.594 166.308 314.933 173.088 326.802 164.474 cv
318.58 167.031 304.822 168.043 292.558 164.197 cv
cp
.474769 .751064 .766537 .755703 cmyk
f
298.726 165.761 mo
301.132 166.943 315.735 169.698 323.306 162.23 cv
317.69 164.958 307.938 167.182 298.726 165.761 cv
cp
f
321.554 179.361 mo
321.319 185.057 326.271 192.528 326.271 192.528 cv
325.751 181.9 334.272 177.66 334.073 167.752 cv
332.42 175.364 326.253 184 321.554 179.361 cv
cp
f
297.732 153.05 mo
300.29 150.825 312.763 148.82 313.78 145.246 cv
314.816 146.983 314.477 148.828 314.331 149.138 cv
316.844 148.543 326.693 147.392 327.891 146.216 cv
321.027 153.88 309.895 149.319 297.732 153.05 cv
cp
.313329 .600946 .664515 .320806 cmyk
f
307.983 190.202 mo
307.983 191.231 306.883 192.064 305.525 192.064 cv
304.167 192.064 303.067 191.231 303.067 190.202 cv
303.067 189.174 304.167 188.34 305.525 188.34 cv
306.883 188.34 307.983 189.174 307.983 190.202 cv
cp
0 0 0 0 cmyk
f
307.068 190.356 mo
307.068 191.208 306.377 191.899 305.525 191.899 cv
304.673 191.899 303.982 191.208 303.982 190.356 cv
303.982 189.504 304.673 188.814 305.525 188.814 cv
306.377 188.814 307.068 189.504 307.068 190.356 cv
cp
.876249 .77789 .617761 .962036 cmyk
f
305.525 189.087 mo
306.528 189.087 307.413 189.474 308.008 190.069 cv
307.88 189.015 306.824 188.189 305.525 188.189 cv
304.226 188.189 303.169 189.015 303.042 190.069 cv
303.637 189.474 304.522 189.087 305.525 189.087 cv
cp
.474769 .751064 .766537 .755703 cmyk
f
306.752 189.825 mo
306.752 190.162 306.479 190.435 306.142 190.435 cv
305.805 190.435 305.532 190.162 305.532 189.825 cv
305.532 189.488 305.805 189.215 306.142 189.215 cv
306.479 189.215 306.752 189.488 306.752 189.825 cv
cp
0 0 0 0 cmyk
f
306.178 190.557 mo
306.178 190.767 306.008 190.938 305.798 190.938 cv
305.588 190.938 305.417 190.767 305.417 190.557 cv
305.417 190.347 305.588 190.177 305.798 190.177 cv
306.008 190.177 306.178 190.347 306.178 190.557 cv
cp
f
319.049 190.202 mo
319.049 191.231 317.948 192.064 316.59 192.064 cv
315.233 192.064 314.132 191.231 314.132 190.202 cv
314.132 189.174 315.233 188.34 316.59 188.34 cv
317.948 188.34 319.049 189.174 319.049 190.202 cv
cp
f
318.133 190.356 mo
318.133 191.208 317.443 191.899 316.59 191.899 cv
315.738 191.899 315.048 191.208 315.048 190.356 cv
315.048 189.504 315.738 188.814 316.59 188.814 cv
317.443 188.814 318.133 189.504 318.133 190.356 cv
cp
.876249 .77789 .617761 .962036 cmyk
f
316.59 189.087 mo
317.593 189.087 318.478 189.474 319.074 190.069 cv
318.946 189.015 317.89 188.189 316.59 188.189 cv
315.291 188.189 314.235 189.015 314.107 190.069 cv
314.702 189.474 315.588 189.087 316.59 189.087 cv
cp
.474769 .751064 .766537 .755703 cmyk
f
317.818 189.825 mo
317.818 190.162 317.544 190.435 317.208 190.435 cv
316.871 190.435 316.598 190.162 316.598 189.825 cv
316.598 189.488 316.871 189.215 317.208 189.215 cv
317.544 189.215 317.818 189.488 317.818 189.825 cv
cp
0 0 0 0 cmyk
f
317.243 190.557 mo
317.243 190.767 317.073 190.938 316.863 190.938 cv
316.653 190.938 316.483 190.767 316.483 190.557 cv
316.483 190.347 316.653 190.177 316.863 190.177 cv
317.073 190.177 317.243 190.347 317.243 190.557 cv
cp
f
302.295 184.902 mo
304.072 184.204 306.547 184.458 307.435 185.092 cv
308.324 185.727 309.085 181.475 307.943 181.412 cv
306.801 181.348 303.25 182.317 302.739 182.998 cv
301.788 184.267 302.295 184.902 302.295 184.902 cv
cp
.474769 .751064 .766537 .755703 cmyk
f
319.654 181.973 mo
318.063 180.919 316.035 180.452 314.089 181.027 cv
313.042 181.337 313.133 178.766 314.149 178.242 cv
315.932 177.322 319.046 177.928 319.618 180.019 cv
320.038 181.549 319.654 181.973 319.654 181.973 cv
cp
f
307.683 201.711 mo
308.886 202.032 312.974 202.352 313.936 201.711 cv
314.898 201.07 312.413 205.88 307.683 201.711 cv
cp
.225498 .612055 .82446 .125887 cmyk
f
297.409 207.455 mo
303.341 209.779 320.269 213.415 328.045 206.361 cv
329.488 209.167 330.21 210.369 330.21 210.369 cv
330.21 210.369 323.877 222.233 317.223 224.077 cv
313.615 222.634 311.211 222.875 308.645 223.997 cv
304.797 222.474 294.857 216.862 293.654 213.415 cv
295.098 211.732 297.409 207.455 297.409 207.455 cv
cp
.344396 .952209 .933715 .53283 cmyk
f
322.417 220.825 mo
320.748 218.841 317.846 217.523 314.539 217.523 cv
310.336 217.523 306.779 219.646 305.589 222.57 cv
306.779 223.182 307.847 223.681 308.645 223.997 cv
311.211 222.875 313.616 222.634 317.223 224.077 cv
319.017 223.58 320.787 222.351 322.417 220.825 cv
cp
.310063 .908476 .949554 .417609 cmyk
f
297.409 207.455 mo
303.341 209.779 320.269 213.415 328.045 206.361 cv
329.488 209.167 330.21 210.369 330.21 210.369 cv
330.21 210.369 316.167 224.897 294.85 211.774 cv
296.109 209.861 297.409 207.455 297.409 207.455 cv
cp
0 0 0 0 cmyk
f
328.045 206.361 mo
320.269 213.415 303.341 209.779 297.409 207.455 cv
297.409 207.455 296.109 209.861 294.85 211.774 cv
297.777 213.576 300.561 214.841 303.196 215.709 cv
301.08 214.852 298.541 213.311 299.015 211.585 cv
299.356 210.348 301.154 210.408 302.089 210.612 cv
305.625 211.38 309.188 212.441 312.845 212.464 cv
316.961 212.491 320.986 211.499 324.736 209.883 cv
325.754 209.445 326.848 208.906 327.636 209.947 cv
328.261 210.773 327.392 212.127 326.241 213.374 cv
328.814 211.81 330.21 210.369 330.21 210.369 cv
330.21 210.369 329.488 209.166 328.045 206.361 cv
cp
.179782 .126863 .138918 .0021973 cmyk
f
312.672 222.615 mo
314.065 222.615 315.564 222.935 317.246 223.592 cv
323.088 221.837 328.781 211.991 329.682 210.376 cv
329.435 209.947 328.846 208.902 327.904 207.089 cv
324.8 209.648 320.221 210.945 314.278 210.945 cv
308.148 210.945 301.457 209.46 297.619 208.027 cv
297.057 209.047 295.4 211.982 294.183 213.498 cv
295.648 216.706 304.689 221.889 308.64 223.499 cv
310.067 222.896 311.352 222.615 312.672 222.615 cv
cp
317.196 224.561 mo
317.052 224.503 li
315.42 223.851 313.987 223.533 312.672 223.533 cv
311.412 223.533 310.227 223.806 308.83 224.418 cv
308.654 224.495 li
308.477 224.424 li
304.615 222.895 294.488 217.197 293.221 213.566 cv
293.134 213.317 li
293.306 213.116 li
294.7 211.49 296.982 207.279 297.005 207.236 cv
297.198 206.879 li
297.577 207.027 li
301.263 208.472 308.061 210.027 314.278 210.027 cv
320.278 210.027 324.807 208.679 327.736 206.02 cv
328.18 205.619 li
328.453 206.151 li
329.87 208.906 330.597 210.121 330.603 210.133 cv
330.737 210.356 li
330.615 210.585 li
330.352 211.077 324.111 222.645 317.346 224.52 cv
317.196 224.561 li
cp
.225498 .612055 .82446 .125887 cmyk
f
292.455 214.874 mo
292.307 214.874 292.161 214.803 292.073 214.67 cv
291.933 214.459 291.989 214.174 292.2 214.033 cv
293.84 212.939 296.162 208.664 298.028 205.228 cv
298.66 204.065 299.254 202.972 299.777 202.077 cv
299.907 201.858 300.189 201.786 300.406 201.913 cv
300.625 202.041 300.698 202.322 300.57 202.541 cv
300.051 203.429 299.462 204.513 298.836 205.667 cv
296.821 209.374 294.539 213.578 292.71 214.797 cv
292.632 214.849 292.543 214.874 292.455 214.874 cv
cp
f
337.791 216.484 mo
337.421 215.404 336.073 212.72 334.4 209.438 cv
332.105 219.046 318.786 231.905 308.694 231.388 cv
310.559 232.071 312.106 232.484 313.1 232.484 cv
318.63 232.484 338.817 219.473 337.791 216.484 cv
cp
.0840772 .560021 .779934 .00842298 cmyk
f
331.129 212.093 mo
331.005 212.093 330.881 212.043 330.79 211.944 cv
329.013 210.003 326.655 203.826 326.556 203.564 cv
326.466 203.327 326.585 203.061 326.822 202.972 cv
327.059 202.883 327.324 203.001 327.415 203.238 cv
327.438 203.3 329.809 209.512 331.468 211.324 cv
331.639 211.511 331.626 211.801 331.439 211.973 cv
331.351 212.053 331.24 212.093 331.129 212.093 cv
cp
.225498 .612055 .82446 .125887 cmyk
f
312.177 175.547 mo
309.76 175.138 302.472 173.587 303.188 177.959 cv
303.903 182.331 308.559 180.7 309.765 179.384 cv
310.971 178.069 314.532 175.946 312.177 175.547 cv
cp
0 .306889 .497108 0 cmyk
f
310.533 195.829 mo
309.108 199.227 li
309.108 199.227 306.585 198.717 307.134 200.214 cv
307.683 201.711 310.533 201.31 311.081 200.543 cv
311.629 199.775 312.287 193.197 310.533 195.829 cv
cp
f
298.629 193.296 mo
299.85 192.127 303.45 195.201 307.31 193.982 cv
308.757 193.525 307.386 201.14 300.685 199.464 cv
298.372 198.886 290.937 214.238 288.577 212.562 cv
286.216 210.887 296.877 194.971 298.629 193.296 cv
cp
f
312.306 225.413 mo
312.388 225.835 311.732 226.317 310.841 226.491 cv
309.949 226.664 309.16 226.463 309.078 226.041 cv
308.996 225.619 309.652 225.137 310.543 224.963 cv
311.435 224.79 312.224 224.991 312.306 225.413 cv
cp
f
300.464 405.743 mo
301.799 405.743 300.132 400.472 300.132 399.291 cv
300.134 398.751 298.529 399.552 296.99 399.64 cv
295.482 399.727 294.038 399.09 294.038 399.549 cv
286.716 400.385 283.865 405.743 287.175 405.743 cv
300.464 405.743 li
cp
.310063 .908476 .949554 .417609 cmyk
f
290.048 403.231 mo
290.861 403.069 292.654 402.741 292.868 401.754 cv
293.118 400.608 291.651 400.404 290.479 400.417 cv
288.757 401.081 287.47 401.988 286.694 402.875 cv
287.647 403.473 288.989 403.442 290.048 403.231 cv
cp
.258427 .826383 .812009 .219883 cmyk
f
300.131 399.291 mo
300.133 398.795 298.778 399.425 297.364 399.6 cv
296.491 401.941 294.881 404.09 292.349 404.676 cv
290.591 405.082 287.623 405.664 285.823 404.665 cv
285.809 405.303 286.235 405.743 287.175 405.743 cv
300.464 405.743 li
301.799 405.743 300.131 400.472 300.131 399.291 cv
cp
.344396 .952209 .933715 .53283 cmyk
f
321.593 405.743 mo
320.259 405.743 321.926 400.472 321.926 399.291 cv
321.924 398.751 323.528 399.552 325.067 399.64 cv
326.575 399.727 328.019 399.09 328.019 399.549 cv
335.341 400.385 338.192 405.743 334.882 405.743 cv
321.593 405.743 li
cp
.310063 .908476 .949554 .417609 cmyk
f
332.009 403.231 mo
331.196 403.069 329.404 402.741 329.189 401.754 cv
328.94 400.608 330.406 400.404 331.579 400.417 cv
333.3 401.081 334.588 401.988 335.363 402.875 cv
334.41 403.473 333.068 403.442 332.009 403.231 cv
cp
.258427 .826383 .812009 .219883 cmyk
f
321.926 399.291 mo
321.924 398.795 323.279 399.425 324.693 399.6 cv
325.566 401.941 327.176 404.09 329.708 404.676 cv
331.466 405.082 334.434 405.664 336.234 404.665 cv
336.249 405.303 335.822 405.743 334.882 405.743 cv
321.593 405.743 li
320.259 405.743 321.926 400.472 321.926 399.291 cv
cp
.344396 .952209 .933715 .53283 cmyk
f
151.112 323.745 mo
106.258 323.745 li
105.829 323.745 li
60.9751 323.745 li
60.9751 340.453 70.014 352.779 76.3138 361.27 cv
79.6899 366.553 78.12 367.993 78.0825 370.457 cv
77.9543 378.883 86.7932 393.968 89.0555 399.549 cv
93.2164 399.927 95.1078 399.17 95.1078 399.17 cv
95.1078 399.17 97.8872 392.569 98.9022 387.832 cv
100.28 381.402 99.9738 374.36 98.5123 367.396 cv
100.225 364.35 102.386 358.232 104.063 350.632 cv
104.063 350.632 104.948 351.077 105.989 351.077 cv
106.007 351.077 106.025 351.074 106.044 351.074 cv
106.062 351.074 106.08 351.077 106.098 351.077 cv
107.139 351.077 108.024 350.632 108.024 350.632 cv
109.701 358.232 111.862 364.35 113.575 367.396 cv
112.113 374.36 111.807 381.402 113.185 387.832 cv
114.2 392.569 116.979 399.17 116.979 399.17 cv
116.979 399.17 118.871 399.927 123.032 399.549 cv
125.294 393.968 134.133 378.883 134.005 370.457 cv
133.967 367.993 132.397 366.553 135.773 361.27 cv
142.073 352.779 151.112 340.453 151.112 323.745 cv
cp
0 .856229 1 .000488289 cmyk
f
151.112 323.745 mo
60.9751 323.745 li
85.7047 350.002 119.049 343.345 124.938 342.612 cv
133.044 341.603 137.78 341.885 133.394 351.807 cv
132.043 354.863 129.591 360.572 128.692 363.793 cv
127.553 367.876 129.071 372.331 126.197 379.183 cv
123.307 386.074 120.943 392.697 118.16 388.368 cv
114.027 381.938 114.424 375.148 114.643 372.09 cv
114.73 370.871 114.697 369.086 115.316 368.029 cv
115.753 367.282 117.045 367.021 116.42 365.954 cv
115.745 364.802 115.617 362.89 115.326 361.579 cv
114.968 359.969 115.098 358.053 115.263 356.426 cv
115.661 352.505 114.659 349.363 115.121 345.453 cv
110.243 347.117 107.204 348.971 101.937 348.567 cv
97.0627 348.193 93.357 345.441 89.0478 343.596 cv
93.5898 349.331 97.7231 360.583 89.3135 366.427 cv
97.4935 371.835 97.0343 380.331 89.6861 386.99 cv
86.3818 389.985 80.5319 380.939 80.5319 380.939 cv
83.2895 388.194 87.5768 395.901 89.0555 399.549 cv
93.2164 399.927 95.1078 399.17 95.1078 399.17 cv
95.1078 399.17 97.8872 392.569 98.9022 387.832 cv
100.28 381.402 99.9738 374.36 98.5123 367.396 cv
100.225 364.35 102.386 358.232 104.063 350.632 cv
104.063 350.632 104.948 351.077 105.989 351.077 cv
106.007 351.077 106.025 351.074 106.044 351.074 cv
106.062 351.074 106.08 351.077 106.098 351.077 cv
107.139 351.077 108.024 350.632 108.024 350.632 cv
109.701 358.232 111.862 364.35 113.575 367.396 cv
112.113 374.36 111.807 381.402 113.185 387.832 cv
114.2 392.569 116.979 399.17 116.979 399.17 cv
116.979 399.17 118.871 399.927 123.032 399.549 cv
125.294 393.968 134.133 378.883 134.005 370.457 cv
133.967 367.993 132.397 366.553 135.773 361.27 cv
142.073 352.779 151.112 340.453 151.112 323.745 cv
cp
.163912 .917113 1 .0738537 cmyk
f
95.4268 405.743 mo
96.7615 405.743 95.0944 400.472 95.0944 399.291 cv
95.0965 398.751 93.4923 399.552 91.9529 399.64 cv
90.4448 399.727 89.0008 399.09 89.0008 399.549 cv
81.6786 400.385 78.8282 405.743 82.1379 405.743 cv
95.4268 405.743 li
cp
.310063 .908476 .949554 .417609 cmyk
f
85.0112 403.231 mo
85.8238 403.069 87.6166 402.741 87.8313 401.754 cv
88.0806 400.608 86.6142 400.404 85.4415 400.417 cv
83.7204 401.081 82.4325 401.988 81.6573 402.875 cv
82.6098 403.473 83.9519 403.442 85.0112 403.231 cv
cp
.258427 .826383 .812009 .219883 cmyk
f
95.0944 399.291 mo
95.0963 398.795 93.7412 399.425 92.327 399.6 cv
91.454 401.941 89.8441 404.09 87.312 404.676 cv
85.5541 405.082 82.5862 405.664 80.7865 404.665 cv
80.7714 405.303 81.198 405.743 82.1379 405.743 cv
95.4268 405.743 li
96.7615 405.743 95.0944 400.472 95.0944 399.291 cv
cp
.344396 .952209 .933715 .53283 cmyk
f
116.556 405.743 mo
115.222 405.743 116.889 400.472 116.889 399.291 cv
116.887 398.751 118.491 399.552 120.03 399.64 cv
121.538 399.727 122.982 399.09 122.982 399.549 cv
130.304 400.385 133.155 405.743 129.845 405.743 cv
116.556 405.743 li
cp
.310063 .908476 .949554 .417609 cmyk
f
126.972 403.231 mo
126.159 403.069 124.366 402.741 124.152 401.754 cv
123.902 400.608 125.369 400.404 126.542 400.417 cv
128.263 401.081 129.551 401.988 130.326 402.875 cv
129.373 403.473 128.031 403.442 126.972 403.231 cv
cp
.258427 .826383 .812009 .219883 cmyk
f
116.889 399.291 mo
116.887 398.795 118.242 399.425 119.656 399.6 cv
120.529 401.941 122.139 404.09 124.671 404.676 cv
126.429 405.082 129.397 405.664 131.197 404.665 cv
131.212 405.303 130.785 405.743 129.845 405.743 cv
116.556 405.743 li
115.221 405.743 116.889 400.472 116.889 399.291 cv
cp
.344396 .952209 .933715 .53283 cmyk
f
78.0535 343.978 mo
81.8197 350.172 82.9847 356.341 80.6555 357.757 cv
78.3263 359.174 73.385 355.301 69.6187 349.107 cv
65.8524 342.913 64.6875 336.743 67.0167 335.327 cv
69.3459 333.911 74.2872 337.784 78.0535 343.978 cv
cp
0 .747524 .82153 0 cmyk
f
120.108 377.276 mo
119.806 380.396 118.61 382.833 117.437 382.719 cv
116.264 382.606 115.558 379.985 115.86 376.865 cv
116.161 373.745 117.357 371.308 118.53 371.422 cv
119.703 371.535 120.41 374.156 120.108 377.276 cv
cp
f
124.596 352.781 mo
123.639 357.373 121.463 360.803 119.736 360.443 cv
118.009 360.083 117.386 356.069 118.343 351.477 cv
119.301 346.886 121.476 343.455 123.203 343.815 cv
124.93 344.175 125.553 348.189 124.596 352.781 cv
cp
f
85.1651 375.553 mo
85.9472 378.621 85.64 381.347 84.4789 381.643 cv
83.3178 381.94 81.7425 379.693 80.9603 376.625 cv
80.1782 373.557 80.4854 370.831 81.6465 370.534 cv
82.8076 370.238 84.3829 372.485 85.1651 375.553 cv
cp
f
164.022 334.906 mo
154.671 335.783 li
152.766 340.723 149.681 344.604 154.312 346.632 cv
154.12 350.153 156.306 351.205 158.372 350.975 cv
160.439 350.746 164.469 349.714 165.847 347.188 cv
167.224 344.662 167.76 339.074 164.022 334.906 cv
cp
.0213016 .496376 .68127 0 cmyk
f
131.977 235.008 mo
140.279 237.741 155.404 249.792 156.968 256.331 cv
159.251 265.879 167.531 288.479 167.99 296.746 cv
168.449 305.012 164.022 334.906 164.022 334.906 cv
163.268 335.266 154.671 335.783 154.671 335.783 cv
141.661 297.671 li
131.977 235.008 li
cp
0 .419654 .583246 0 cmyk
f
166.612 297.205 mo
166.169 289.222 159.305 267.419 156.718 257.365 cv
156.533 256.672 155.143 259.009 153.838 259.096 cv
151.378 259.262 149.447 258.062 147.617 256.643 cv
143.54 256.845 139.6 257.827 135.646 258.748 cv
141.661 297.671 li
154.671 335.783 li
163.371 335.215 li
163.83 335.674 167.071 305.472 166.612 297.205 cv
cp
.0213016 .496376 .68127 0 cmyk
f
154.212 284.346 mo
155.284 275.16 151.299 263.226 150.076 260.085 cv
149.044 257.431 148.082 254.733 146.116 252.705 cv
146.077 252.687 146.039 252.68 145.999 252.65 cv
142.625 250.133 138.694 248.787 134.876 247.073 cv
134.512 246.91 134.139 246.745 133.765 246.578 cv
141.661 297.671 li
154.671 335.783 li
154.671 335.783 160.803 337.443 164.022 334.906 cv
153.498 333.677 164.928 311.901 154.212 284.346 cv
cp
.0840772 .560021 .779934 .00842298 cmyk
f
161.074 346.545 mo
159.57 346.761 158.154 346.354 156.934 345.488 cv
155.799 344.681 155.296 343.325 154.698 342.061 cv
154.618 343.678 154.575 344.501 154.401 345.87 cv
154.21 349.391 156.474 350.724 158.54 350.495 cv
160.607 350.265 164.481 349.321 165.859 346.795 cv
166.387 345.826 166.777 344.798 166.864 343.181 cv
165.597 345.009 163.676 346.171 161.074 346.545 cv
cp
f
48.719 334.906 mo
58.0697 335.783 li
59.9753 340.723 63.06 344.604 58.4292 346.632 cv
58.6205 350.153 56.4351 351.205 54.3684 350.975 cv
52.3018 350.746 48.2722 349.714 46.8944 347.188 cv
45.5166 344.662 44.9808 339.074 48.719 334.906 cv
cp
.0213016 .496376 .68127 0 cmyk
f
54.4267 343.093 mo
54.035 338.168 48.0783 335.68 47.8281 336.045 cv
46.5244 337.945 46.1319 341.136 46.8152 342.701 cv
48.5502 346.675 54.6951 346.466 54.4267 343.093 cv
cp
0 .419654 .583246 0 cmyk
f
80.764 235.008 mo
72.4619 237.741 57.3375 249.792 55.7734 256.331 cv
53.4895 265.879 45.2105 288.479 44.7512 296.746 cv
44.2919 305.012 48.719 334.906 48.719 334.906 cv
49.473 335.266 58.0697 335.783 58.0697 335.783 cv
71.0797 297.671 li
80.764 235.008 li
cp
f
53.7874 297.664 mo
59.6047 289.551 52.7158 276.997 63.2937 258.062 cv
67.3712 258.264 73.1407 257.827 77.095 258.748 cv
71.0797 297.671 li
58.0697 335.783 li
49.3702 335.215 li
55.4752 334.424 56.0964 313.15 53.7874 297.664 cv
cp
.0213016 .496376 .68127 0 cmyk
f
62.9726 288.938 mo
54.6994 283.732 61.4416 263.226 62.6644 260.085 cv
63.6975 257.431 64.6591 254.733 66.6245 252.705 cv
66.6638 252.687 66.7024 252.68 66.7421 252.65 cv
70.1164 250.133 74.0469 248.787 77.8649 247.073 cv
78.2293 246.91 78.6018 246.745 78.976 246.578 cv
71.0797 297.671 li
58.0697 335.783 li
58.0697 335.783 51.9382 337.443 48.719 334.906 cv
65.8242 338.537 46.8969 321.585 62.9726 288.938 cv
cp
.0840772 .560021 .779934 .00842298 cmyk
f
51.6674 346.545 mo
53.1714 346.761 54.5869 346.354 55.8071 345.488 cv
56.9423 344.681 57.4454 343.325 58.043 342.061 cv
58.1231 343.678 58.1662 344.501 58.3395 345.87 cv
58.5309 349.391 56.2674 350.724 54.2007 350.495 cv
52.134 350.265 48.26 349.321 46.8822 346.795 cv
46.3538 345.826 45.9644 344.798 45.8773 343.181 cv
47.144 345.009 49.0652 346.171 51.6674 346.545 cv
cp
f
149.338 287.62 mo
146.405 283.312 151.098 266.343 148.165 254.035 cv
145.243 241.775 120.21 224.256 106.13 224.197 cv
106.13 224.194 li
106.102 224.194 106.072 224.195 106.044 224.196 cv
106.015 224.195 105.985 224.194 105.957 224.194 cv
105.957 224.197 li
91.8767 224.256 66.8439 241.775 63.9223 254.035 cv
60.9891 266.343 65.6823 283.312 62.749 287.62 cv
61.3444 289.683 56.3898 297.817 58.8392 304.247 cv
58.8392 304.247 56.8491 307.309 56.9575 311.594 cv
57.079 316.399 58.092 320.694 60.9751 323.1 cv
74.5528 334.436 118.354 347.403 151.112 323.1 cv
160.092 316.438 152.271 291.928 149.338 287.62 cv
cp
0 .419654 .583246 0 cmyk
f
129.045 233.218 mo
127.816 232.201 125.554 230.792 125.554 230.792 cv
107.516 238.738 li
107.516 238.738 109.313 240.495 118.29 239.324 cv
124.742 238.483 131.134 235.352 129.045 233.218 cv
cp
.0213016 .496376 .68127 0 cmyk
f
126.901 226.903 mo
85.486 226.412 li
87.1099 230.506 li
87.1099 230.506 94.2022 238.738 107.516 238.738 cv
118.084 238.738 125.554 230.792 125.554 230.792 cv
126.901 226.903 li
cp
f
126.901 226.903 mo
85.486 226.412 li
85.486 226.412 86.6086 229.242 101.856 234.899 cv
102.737 235.226 106.476 236.559 107.516 238.738 cv
118.084 238.738 125.554 230.792 125.554 230.792 cv
126.901 226.903 li
cp
.127077 .600885 .835172 .0233768 cmyk
f
63.3239 286.296 mo
91.4182 286.296 100.938 279.983 100.938 279.983 cv
73.8281 284.332 61.9736 285.614 63.9223 254.035 cv
60.9891 266.343 58.3216 286.182 63.3239 286.296 cv
cp
.0213016 .496376 .68127 0 cmyk
f
149.189 285.115 mo
151.634 282.448 154.189 276.115 148.165 254.035 cv
148.165 265.115 148.189 285.337 109.745 279.782 cv
109.745 279.782 117.87 286.99 137.071 290.086 cv
143.053 291.05 146.634 307.997 125.279 316.494 cv
102.928 325.386 59.1138 318.037 56.991 312.751 cv
57.1977 317.084 58.3257 321.533 60.9751 323.745 cv
74.5528 335.08 118.354 348.048 151.112 323.745 cv
155.896 320.196 157.274 309.146 154.357 301.925 cv
155.13 293.225 150.56 287.128 149.189 285.115 cv
cp
f
126.656 320.118 mo
126.656 320.625 112.79 322.974 106.449 322.974 cv
100.108 322.974 86.2417 320.625 86.2417 320.118 cv
86.2417 320.118 100.108 321.381 106.449 321.381 cv
112.79 321.381 126.656 320.118 126.656 320.118 cv
cp
.127077 .600885 .835172 .0233768 cmyk
f
66.0859 284.833 mo
63.9741 284.829 62.1765 283.886 60.7868 282.294 cv
61.1568 284.738 61.9494 286.264 63.3239 286.296 cv
91.4183 286.296 100.938 279.983 100.938 279.983 cv
100.765 280.01 100.601 280.036 100.43 280.064 cv
95.6369 281.933 85.1349 284.834 66.0859 284.833 cv
cp
f
144.919 284.833 mo
147.031 284.829 149.51 283.85 150.9 282.258 cv
150.53 284.703 149.055 286.264 147.681 286.296 cv
119.586 286.296 110.067 279.983 110.067 279.983 cv
110.239 280.01 110.404 280.036 110.575 280.064 cv
115.368 281.933 125.87 284.833 144.919 284.833 cv
cp
f
66.874 327.68 mo
86.4799 339.278 126.908 344.119 151.112 323.745 cv
152.705 322.404 153.684 320.9 154.287 319.228 cv
133.012 342.668 77.1094 332.425 66.874 327.68 cv
cp
f
103.387 245.003 mo
92.9895 241.294 85.3232 237.042 75.5256 245.309 cv
65.7281 253.575 67.5651 267.965 85.3232 267.353 cv
103.081 266.741 103.439 262.306 108.898 264.291 cv
122.37 269.19 136.148 262.76 129.412 253.575 cv
122.676 244.39 118.116 250.255 103.387 245.003 cv
cp
0 .306889 .497108 0 cmyk
f
74.8758 282.97 mo
74.7833 283.708 73.3142 284.131 71.5944 283.915 cv
69.8745 283.7 68.5553 282.927 68.6478 282.19 cv
68.7402 281.452 70.2093 281.029 71.9292 281.245 cv
73.649 281.46 74.9682 282.233 74.8758 282.97 cv
cp
.225498 .612055 .82446 .125887 cmyk
f
137.337 282.971 mo
137.43 283.708 138.899 284.132 140.619 283.916 cv
142.339 283.701 143.658 282.928 143.565 282.19 cv
143.473 281.453 142.004 281.029 140.284 281.245 cv
138.564 281.461 137.245 282.233 137.337 282.971 cv
cp
f
121.605 289.168 mo
102.775 284.805 68.6367 284.499 62.8195 293.684 cv
57.0022 302.869 63.8911 304.859 67.8713 303.941 cv
60.9824 307.002 59.2545 310.294 62.9726 313.432 cv
67.6577 317.386 103.923 321.332 116.093 313.509 cv
123.747 308.589 123.404 305.356 117.012 303.481 cv
111.271 301.797 73.6886 302.869 71.5454 303.634 cv
83.0269 301.032 108.505 299.272 119.37 300.008 cv
135.612 301.109 134.152 292.075 121.605 289.168 cv
cp
0 .306889 .497108 0 cmyk
f
91.4305 193.452 mo
91.4305 193.452 86.7688 187.289 84.7145 189.975 cv
82.6601 192.662 88.27 200.563 88.9021 199.852 cv
89.5342 199.141 91.4305 193.452 91.4305 193.452 cv
cp
0 .419654 .583246 0 cmyk
f
88.8148 193.873 mo
87.9115 191.87 84.869 188.881 84.743 192.345 cv
85.1757 195.453 87.8125 199.001 88.1048 198.372 cv
88.4028 197.729 87.1888 196.902 87.2501 195.733 cv
87.3098 194.595 89.2699 194.882 88.8148 193.873 cv
cp
.0213016 .496376 .68127 0 cmyk
f
86.2716 193.285 mo
85.7913 194.816 87.9185 197.535 87.6109 196.983 cv
87.4054 196.614 87.2255 196.201 87.2501 195.733 cv
87.2859 195.049 88.0073 194.88 88.4792 194.635 cv
88.793 194.472 86.7799 191.664 86.2716 193.285 cv
cp
.0840772 .560021 .779934 .00842298 cmyk
f
120.663 193.452 mo
120.663 193.452 125.325 187.289 127.379 189.975 cv
129.433 192.662 123.823 200.563 123.191 199.852 cv
122.559 199.141 120.663 193.452 120.663 193.452 cv
cp
.0213016 .496376 .68127 0 cmyk
f
123.279 193.873 mo
124.182 191.87 127.224 188.881 127.35 192.345 cv
126.918 195.453 124.281 199.001 123.989 198.372 cv
123.691 197.729 124.905 196.902 124.843 195.733 cv
124.784 194.595 122.823 194.882 123.279 193.873 cv
cp
.0840772 .560021 .779934 .00842298 cmyk
f
125.822 193.285 mo
126.302 194.816 124.175 197.535 124.482 196.983 cv
124.688 196.614 124.868 196.201 124.843 195.733 cv
124.807 195.049 124.086 194.88 123.614 194.635 cv
123.3 194.472 125.313 191.664 125.822 193.285 cv
cp
.225498 .612055 .82446 .125887 cmyk
f
92.3787 163.427 mo
86.1092 170.951 91.2725 184.286 91.2725 189.422 cv
91.2725 194.558 79.4206 199.038 79.4206 217.472 cv
79.4206 219.915 87.0454 232.484 108.063 232.484 cv
126.312 232.484 132.754 221.083 132.754 216.484 cv
132.754 204.32 120.507 193.373 120.507 189.817 cv
120.507 186.262 125.965 171.672 121.218 164.691 cv
114.502 154.815 99.2922 155.131 92.3787 163.427 cv
cp
0 .419654 .583246 0 cmyk
f
106.181 223.532 mo
105.556 224.596 105.99 226.249 105.99 226.249 cv
100.479 226.211 101.651 223.211 102.316 222.805 cv
106.449 220.279 111.424 222.728 111.386 224.412 cv
111.343 226.312 107.674 227.551 106.181 223.532 cv
cp
132.754 216.484 mo
132.754 203.861 120.507 193.373 120.507 189.817 cv
120.507 186.262 128.361 170.272 123.615 163.292 cv
116.898 153.415 95.6199 155.724 88.7063 164.02 cv
82.4368 171.544 91.2725 184.286 91.2725 189.422 cv
91.2725 190.376 91.0441 191.453 90.3486 193.255 cv
88.8456 196.688 93.6947 193.365 94.9959 188.314 cv
95.7628 185.336 96.9059 178.06 96.5232 173.314 cv
96.3185 170.775 99.4775 175.258 111.988 173.694 cv
113.213 173.541 114.581 180.019 114.581 180.019 cv
114.583 180.542 114.762 182.022 114.393 181.642 cv
112.701 179.904 108.265 177.413 108.386 180.584 cv
108.443 182.076 108.878 188.858 109.094 189.648 cv
109.366 191.707 111.599 192.115 114.012 190.202 cv
115.586 190.151 116.301 186.865 116.459 187.411 cv
117.219 190.038 117.361 193.371 119.136 196.857 cv
129.068 201.966 128.874 213.003 124.13 216.49 cv
118.008 220.991 106.324 203.928 108.899 201.711 cv
109.769 197.269 108.184 193.28 107.166 191.682 cv
108.238 196.427 107.855 201.556 106.708 202.079 cv
105.163 202.783 102.646 201.711 102.646 201.711 cv
102.967 204.768 110.078 210.307 107.061 210.788 cv
102.082 211.581 99.2488 210.683 98.0121 206.449 cv
98.1652 217.854 93.6313 221.417 90.6936 221.504 cv
86.1833 221.638 79.6163 215.815 79.8009 212.011 cv
79.2101 215.086 79.3589 216.891 79.4206 217.472 cv
79.7355 220.432 85.3232 232.985 108.063 232.985 cv
125.738 232.985 132.754 221.963 132.754 216.484 cv
cp
.0213016 .496376 .68127 0 cmyk
f
94.7179 177.612 mo
95.9152 175.704 95.5972 171.57 94.8248 170.207 cv
97.4744 171.665 109.954 173.069 114.693 171.479 cv
113.906 174.523 121.109 182.918 122.183 183.497 cv
124.185 177.149 126.878 168.091 123.615 163.292 cv
116.898 153.415 95.6199 155.724 88.7063 164.02 cv
82.4368 171.544 93.053 179.793 94.7179 177.612 cv
cp
.0840772 .560021 .779934 .00842298 cmyk
f
103.46 182.304 mo
97.2922 184.793 li
96.6416 185.749 99.1765 186.046 98.0047 190.069 cv
99.8181 190.227 102.641 191.902 102.971 190.069 cv
103.301 188.237 103.963 183.49 103.46 182.304 cv
cp
.0213016 .496376 .68127 0 cmyk
f
90.3486 193.255 mo
90.3486 193.255 89.0061 186.49 86.5925 182.516 cv
84.1789 178.542 77.4983 168.978 86.2903 164.582 cv
85.0211 161.134 80.7374 158.706 90.7861 151.91 cv
100.835 145.113 109.638 144.274 109.27 141.279 cv
111.429 142.73 111.559 145.73 110.977 146.456 cv
113.348 145.293 126.94 145.053 126.521 142.454 cv
127.5 144.012 126.874 150.903 123.339 152.408 cv
126.232 153.052 129.669 155.816 129.37 159.459 cv
128.569 159.319 127.9 161.074 128.04 161.94 cv
132.529 176.377 120.622 180.03 121.234 192.528 cv
121.234 192.528 116.282 185.057 116.517 179.361 cv
116.753 173.665 119.828 166.717 115.096 169.199 cv
110.364 171.682 96.3909 170.247 89.2151 166.54 cv
91.3833 169.588 94.6749 172.318 94.6749 172.318 cv
94.6749 172.318 95.6761 189.099 90.3486 193.255 cv
cp
.390417 .621088 .702266 .531334 cmyk
f
90.3486 193.255 mo
90.3486 193.255 89.0061 186.49 86.5925 182.516 cv
85.7711 181.163 84.4553 179.163 83.4236 176.94 cv
93.6693 190.042 94.9973 172.516 85.4639 165.037 cv
85.7228 164.88 85.998 164.728 86.2903 164.582 cv
85.6402 162.816 84.1991 161.317 84.2985 159.362 cv
90.7928 165.575 106.023 160.853 110.47 155.388 cv
110.987 156.583 109.927 159.689 109.927 159.689 cv
111.943 158.986 121.003 158.05 125.064 165.345 cv
125.718 162.817 125.057 159.027 122.278 157.635 cv
126.305 157.687 129.104 158.521 129.37 159.459 cv
128.569 159.319 127.9 161.074 128.04 161.94 cv
132.529 176.377 120.622 180.03 121.234 192.528 cv
121.234 192.528 116.282 185.057 116.517 179.361 cv
116.753 173.665 119.828 166.717 115.096 169.199 cv
110.364 171.682 99.5449 171.589 92.369 167.882 cv
92.6996 170.556 94.6749 172.318 94.6749 172.318 cv
94.6749 172.318 95.6761 189.099 90.3486 193.255 cv
cp
.425513 .70309 .747433 .654566 cmyk
f
87.5211 164.197 mo
90.5568 166.308 109.896 173.088 121.764 164.474 cv
113.543 167.031 99.7854 168.043 87.5211 164.197 cv
cp
.474769 .751064 .766537 .755703 cmyk
f
93.6892 165.761 mo
96.0954 166.943 110.698 169.698 118.269 162.23 cv
112.653 164.958 102.9 167.182 93.6892 165.761 cv
cp
f
116.517 179.361 mo
116.282 185.057 121.234 192.528 121.234 192.528 cv
120.714 181.9 129.234 177.66 129.036 167.752 cv
127.383 175.364 121.216 184 116.517 179.361 cv
cp
f
92.6949 153.05 mo
95.2531 150.825 107.726 148.82 108.743 145.246 cv
109.779 146.983 109.44 148.828 109.294 149.138 cv
111.806 148.543 121.656 147.392 122.854 146.216 cv
115.99 153.88 104.857 149.319 92.6949 153.05 cv
cp
.313329 .600946 .664515 .320806 cmyk
f
102.946 190.202 mo
102.946 191.231 101.845 192.064 100.488 192.064 cv
99.1303 192.064 98.0297 191.231 98.0297 190.202 cv
98.0297 189.174 99.1303 188.34 100.488 188.34 cv
101.845 188.34 102.946 189.174 102.946 190.202 cv
cp
0 0 0 0 cmyk
f
102.031 190.356 mo
102.031 191.208 101.34 191.899 100.488 191.899 cv
99.6358 191.899 98.9451 191.208 98.9451 190.356 cv
98.9451 189.504 99.6358 188.814 100.488 188.814 cv
101.34 188.814 102.031 189.504 102.031 190.356 cv
cp
.876249 .77789 .617761 .962036 cmyk
f
100.488 189.087 mo
101.491 189.087 102.376 189.474 102.971 190.069 cv
102.843 189.015 101.787 188.189 100.488 188.189 cv
99.1886 188.189 98.1324 189.015 98.0047 190.069 cv
98.5999 189.474 99.4851 189.087 100.488 189.087 cv
cp
.474769 .751064 .766537 .755703 cmyk
f
101.715 189.825 mo
101.715 190.162 101.442 190.435 101.105 190.435 cv
100.768 190.435 100.495 190.162 100.495 189.825 cv
100.495 189.488 100.768 189.215 101.105 189.215 cv
101.442 189.215 101.715 189.488 101.715 189.825 cv
cp
0 0 0 0 cmyk
f
101.141 190.557 mo
101.141 190.767 100.971 190.938 100.761 190.938 cv
100.55 190.938 100.38 190.767 100.38 190.557 cv
100.38 190.347 100.55 190.177 100.761 190.177 cv
100.971 190.177 101.141 190.347 101.141 190.557 cv
cp
f
114.011 190.202 mo
114.011 191.231 112.911 192.064 111.553 192.064 cv
110.196 192.064 109.095 191.231 109.095 190.202 cv
109.095 189.174 110.196 188.34 111.553 188.34 cv
112.911 188.34 114.011 189.174 114.011 190.202 cv
cp
f
113.096 190.356 mo
113.096 191.208 112.405 191.899 111.553 191.899 cv
110.701 191.899 110.01 191.208 110.01 190.356 cv
110.01 189.504 110.701 188.814 111.553 188.814 cv
112.405 188.814 113.096 189.504 113.096 190.356 cv
cp
.876249 .77789 .617761 .962036 cmyk
f
111.553 189.087 mo
112.556 189.087 113.441 189.474 114.037 190.069 cv
113.909 189.015 112.853 188.189 111.553 188.189 cv
110.254 188.189 109.198 189.015 109.07 190.069 cv
109.665 189.474 110.551 189.087 111.553 189.087 cv
cp
.474769 .751064 .766537 .755703 cmyk
f
112.78 189.825 mo
112.78 190.162 112.507 190.435 112.17 190.435 cv
111.834 190.435 111.56 190.162 111.56 189.825 cv
111.56 189.488 111.834 189.215 112.17 189.215 cv
112.507 189.215 112.78 189.488 112.78 189.825 cv
cp
0 0 0 0 cmyk
f
112.206 190.557 mo
112.206 190.767 112.036 190.938 111.826 190.938 cv
111.616 190.938 111.446 190.767 111.446 190.557 cv
111.446 190.347 111.616 190.177 111.826 190.177 cv
112.036 190.177 112.206 190.347 112.206 190.557 cv
cp
f
97.2582 184.902 mo
99.0349 184.204 101.51 184.458 102.398 185.092 cv
103.286 185.727 104.048 181.475 102.906 181.412 cv
101.764 181.348 98.2132 182.317 97.7023 182.998 cv
96.7505 184.267 97.2582 184.902 97.2582 184.902 cv
cp
.474769 .751064 .766537 .755703 cmyk
f
114.617 181.973 mo
113.026 180.919 110.998 180.452 109.052 181.027 cv
108.004 181.337 108.095 178.766 109.112 178.242 cv
110.895 177.322 114.008 177.928 114.581 180.019 cv
115 181.549 114.617 181.973 114.617 181.973 cv
cp
f
102.646 201.711 mo
103.849 202.032 107.937 202.352 108.899 201.711 cv
109.861 201.07 107.376 205.88 102.646 201.711 cv
cp
.225498 .612055 .82446 .125887 cmyk
f
100.019 214.691 mo
105.76 206.501 114.794 215.639 112.956 215.26 cv
104.595 213.536 97.3421 218.511 100.019 214.691 cv
cp
.344396 .952209 .933715 .53283 cmyk
f
100.019 214.691 mo
104.459 208.185 111.083 213.021 111.083 213.021 cv
104.842 213.467 100.019 214.691 100.019 214.691 cv
cp
.179782 .126863 .138918 .0021973 cmyk
f
99.9482 215.713 mo
100.311 215.735 101.106 215.564 102.075 215.351 cv
103.865 214.96 106.315 214.424 109.127 214.424 cv
110.244 214.424 111.333 214.512 112.374 214.685 cv
111.416 213.661 108.766 211.73 105.915 211.73 cv
103.752 211.73 101.896 212.815 100.396 214.955 cv
100.115 215.356 99.9971 215.588 99.9482 215.713 cv
cp
99.9985 216.633 mo
99.5381 216.633 99.2285 216.487 99.0791 216.2 cv
98.8394 215.739 99.1313 215.159 99.6436 214.428 cv
101.326 212.028 103.436 210.811 105.915 210.811 cv
109.721 210.811 113.658 214.034 113.658 215.152 cv
113.658 215.325 113.589 215.48 113.464 215.588 cv
113.365 215.673 113.156 215.769 112.864 215.71 cv
111.682 215.466 110.425 215.343 109.127 215.343 cv
106.415 215.343 104.02 215.866 102.271 216.249 cv
101.251 216.472 100.514 216.633 99.9985 216.633 cv
cp
.225498 .612055 .82446 .125887 cmyk
f
107.14 175.547 mo
104.723 175.138 97.4348 173.587 98.1506 177.959 cv
98.8664 182.331 103.522 180.7 104.728 179.384 cv
105.934 178.069 109.495 175.946 107.14 175.547 cv
cp
0 .306889 .497108 0 cmyk
f
105.496 195.829 mo
104.071 199.227 li
104.071 199.227 101.548 198.717 102.097 200.214 cv
102.646 201.711 105.496 201.31 106.044 200.543 cv
106.592 199.775 107.25 193.197 105.496 195.829 cv
cp
f
105.978 223.01 mo
106.06 223.432 105.404 223.915 104.512 224.088 cv
103.621 224.261 102.832 224.06 102.75 223.638 cv
102.668 223.217 103.324 222.734 104.215 222.561 cv
105.107 222.387 105.896 222.589 105.978 223.01 cv
cp
f
96.3454 197.24 mo
93.4544 195.745 88.1886 196.14 85.6293 200.301 cv
81.8205 206.494 81.496 211.477 85.7824 212.089 cv
91.4406 212.897 96.4985 205.2 95.4269 202.138 cv
99.4071 205.506 102.097 200.214 96.3454 197.24 cv
cp
f
119.68 201.39 mo
122.629 203.844 123.992 207.068 122.724 208.591 cv
121.457 210.114 118.039 209.359 115.09 206.905 cv
112.141 204.452 110.778 201.227 112.046 199.704 cv
113.313 198.181 116.731 198.936 119.68 201.39 cv
cp
f
129.489 204.579 mo
135.329 223.153 112.12 236.968 86.8272 227.458 cv
91.1993 230.487 97.9221 232.985 108.063 232.985 cv
126.541 232.985 132.754 221.072 132.754 216.484 cv
132.754 212.208 131.347 208.179 129.489 204.579 cv
cp
.0840772 .560021 .779934 .00842298 cmyk
f
99.5146 104.463 mo
99.6099 104.463 99.7046 104.478 99.7959 104.507 cv
105.955 106.486 106.893 115.049 106.84 120.497 cv
115.208 103.672 li
115.337 103.412 115.582 103.229 115.868 103.177 cv
116.327 103.095 161.745 94.7686 165.306 77.9155 cv
166.631 71.6416 161.84 64.7729 151.066 57.5005 cv
138.499 49.0176 116.341 43.0928 97.1816 43.0928 cv
85.812 43.0928 65.8965 45.2207 60.2622 59.4712 cv
55.6802 71.061 56.6709 83.4604 62.9126 92.6396 cv
68.6216 101.036 77.9277 105.66 89.1167 105.66 cv
92.3765 105.66 95.8076 105.264 99.3154 104.485 cv
99.3809 104.47 99.4478 104.463 99.5146 104.463 cv
cp
105.638 125.895 mo
105.549 125.895 105.458 125.881 105.37 125.854 cv
104.94 125.723 104.668 125.3 104.728 124.855 cv
104.749 124.695 106.745 109.006 99.46 106.334 cv
95.9097 107.105 92.4312 107.497 89.1167 107.497 cv
77.3008 107.497 67.4551 102.587 61.3936 93.6729 cv
54.8096 83.9902 53.748 70.9517 58.5542 58.7954 cv
63.0259 47.4849 76.7441 41.2559 97.1816 41.2559 cv
116.671 41.2559 139.252 47.3096 152.094 55.978 cv
163.549 63.71 168.599 71.2188 167.103 78.2959 cv
163.445 95.603 121.787 103.938 116.648 104.902 cv
106.46 125.385 li
106.302 125.704 105.979 125.895 105.638 125.895 cv
cp
.912474 .787625 .619837 .97467 cmyk
f
305.66 99.4141 mo
305.857 99.4141 306.051 99.4775 306.212 99.5977 cv
306.426 99.7588 306.56 100.006 306.577 100.273 cv
307.069 107.912 312.172 114.411 314.967 117.431 cv
313.418 103.496 li
313.389 103.229 313.478 102.962 313.661 102.766 cv
313.847 102.57 314.105 102.469 314.375 102.477 cv
314.388 102.478 314.913 102.502 315.849 102.502 cv
315.85 102.502 315.851 102.502 315.852 102.502 cv
322.679 102.502 346.065 101.292 360.425 85.7134 cv
369.18 76.2144 372.936 63.0283 371.589 46.521 cv
371.211 41.9014 360.919 38.916 345.366 38.916 cv
315.754 38.916 277.742 48.9995 267.969 65.2896 cv
264.994 70.2456 265.736 78.687 269.773 85.8169 cv
275.067 95.1675 284.623 100.53 295.989 100.53 cv
299.007 100.53 302.193 100.162 305.461 99.436 cv
305.527 99.4214 305.594 99.4141 305.66 99.4141 cv
cp
316.168 120.846 mo
315.95 120.846 315.734 120.769 315.563 120.619 cv
315.164 120.27 306.069 112.197 304.838 101.445 cv
301.796 102.057 298.824 102.367 295.989 102.367 cv
283.942 102.367 273.804 96.6646 268.175 86.7217 cv
263.759 78.9214 263.042 69.9287 266.393 64.3442 cv
277.677 45.5381 319.367 37.0791 345.366 37.0791 cv
353.573 37.0791 372.735 37.9844 373.419 46.3716 cv
374.811 63.4116 370.893 77.0669 361.775 86.9585 cv
346.911 103.085 322.87 104.339 315.851 104.339 cv
315.851 104.339 315.85 104.339 315.849 104.339 cv
315.672 104.339 315.509 104.338 315.36 104.337 cv
317.06 119.638 li
317.09 119.729 317.106 119.827 317.106 119.928 cv
317.106 120.435 316.695 120.846 316.188 120.846 cv
316.181 120.846 316.175 120.845 316.168 120.846 cv
cp
f
86.9805 83.688 mo
87.6294 82.8149 87.9541 81.8081 87.9541 80.6665 cv
87.9541 79.5254 87.8589 78.521 87.6689 77.6538 cv
87.4785 76.7866 87.2686 76.1318 87.0396 75.6899 cv
86.8101 75.248 86.5444 74.8701 86.2422 74.5566 cv
85.873 74.1763 85.5708 73.9473 85.3359 73.8687 cv
84.1104 73.8687 li
84.2222 77.0356 84.2783 80.8345 84.2783 85.2656 cv
85.4307 85.0869 86.3315 84.5605 86.9805 83.688 cv
cp
84.4795 62.9248 mo
84.1548 62.9248 83.9932 63.3359 83.9932 64.1582 cv
83.9932 64.981 84.0151 66.2734 84.0601 68.0356 cv
84.1045 69.7983 84.1274 71.0767 84.1274 71.8711 cv
84.7202 71.7368 85.2295 71.2446 85.6548 70.394 cv
86.0015 69.6782 86.2866 68.9868 86.5107 68.3213 cv
86.7344 67.6553 86.8799 67.2441 86.9473 67.0874 cv
86.9473 65.8623 li
86.9473 65.1909 86.6978 64.5337 86.2002 63.8896 cv
85.7021 63.2466 85.1284 62.9248 84.4795 62.9248 cv
cp
82.3647 77.7461 mo
82.1299 63.7808 li
82.1299 63.5791 li
82.1299 62.3486 82.3198 61.5649 82.7007 61.2295 cv
82.8906 61.0615 83.1313 60.9775 83.4224 60.9775 cv
85.0562 60.9775 86.3315 61.5039 87.249 62.5557 cv
88.1665 63.6074 88.6255 64.9614 88.6255 66.6177 cv
88.6255 67.6582 88.3511 68.7383 87.8032 69.8569 cv
87.2549 70.9761 86.6001 71.8096 85.8394 72.3579 cv
87.2378 73.2979 88.2368 74.4927 88.8354 75.9414 cv
89.4341 77.3906 89.7334 78.9102 89.7334 80.4985 cv
89.7334 81.3379 89.5234 82.1997 89.104 83.0835 cv
88.6846 83.9678 88.2646 84.6729 87.8452 85.1987 cv
87.4253 85.7246 86.874 86.1665 86.1919 86.5244 cv
85.5093 86.8828 84.7593 87.0615 83.9424 87.0615 cv
83.8081 87.0615 li
82.7339 87.0615 82.1968 86.7764 82.1968 86.2056 cv
82.3647 77.7461 li
cp
f
95.4741 74.1875 mo
94.6182 74.1538 li
94.2822 74.1538 94.0474 74.2378 93.9131 74.4058 cv
93.9131 85.0142 li
95.0879 84.9468 95.7261 84.9131 95.8267 84.9131 cv
97.1357 84.9131 97.7905 85.2153 97.7905 85.8198 cv
97.7905 85.937 li
97.6338 86.2505 97.3652 86.4912 96.9849 86.6587 cv
96.6045 86.8267 96.2686 86.9219 95.9775 86.9443 cv
95.6865 86.9663 95.312 86.978 94.853 86.978 cv
93.7788 86.978 li
92.9282 86.978 92.4023 86.8101 92.2012 86.4741 cv
92.1113 86.3179 92.0669 86.1108 92.0669 85.853 cv
92.0669 65.8789 li
92.0669 65.4873 91.9883 64.9053 91.832 64.1333 cv
91.6748 63.3613 91.5967 62.7734 91.5967 62.3706 cv
91.5967 62.2534 li
91.9771 61.627 92.2627 61.2241 92.4526 61.0449 cv
95.0044 60.7427 li
95.3511 60.7427 95.7007 60.8462 96.0532 61.0532 cv
96.4058 61.2603 96.582 61.5317 96.582 61.8672 cv
96.582 62.5498 96.0615 62.8911 95.021 62.8911 cv
94.0308 62.8574 li
93.8628 62.8574 93.7397 62.8633 93.6616 62.8745 cv
93.9302 68.5479 li
93.9302 69.0068 93.9019 69.6753 93.8462 70.5537 cv
93.79 71.4321 93.7622 72.0728 93.7622 72.4756 cv
93.8853 72.4531 94.0527 72.4141 94.2656 72.3579 cv
94.7358 72.2349 95.1021 72.1733 95.3652 72.1733 cv
95.6279 72.1733 95.8628 72.2686 96.0698 72.4585 cv
96.2769 72.6489 96.3804 72.8784 96.3804 73.147 cv
96.3804 73.4155 96.2969 73.6563 96.1289 73.8687 cv
95.9609 74.0815 95.7427 74.1875 95.4741 74.1875 cv
cp
f
102.087 85.1987 mo
102.003 85.417 li
102.048 85.5513 102.07 85.7275 102.07 85.9453 cv
102.07 86.1636 101.964 86.3623 101.751 86.5415 cv
101.539 86.7207 101.259 86.8101 100.912 86.8101 cv
100.252 86.8101 99.9219 86.0771 99.9219 84.6113 cv
99.9219 82.4292 99.8071 78.3057 99.5776 72.2402 cv
99.3481 66.1753 99.1162 62.9639 98.8813 62.606 cv
98.8921 61.4199 99.7036 60.7876 101.315 60.709 cv
101.561 60.6982 101.894 60.6924 102.314 60.6924 cv
102.733 60.6924 103.063 60.7705 103.304 60.9272 cv
103.544 61.084 103.665 61.4028 103.665 61.8838 cv
103.665 62.3652 103.346 62.606 102.708 62.606 cv
101.869 62.5723 li
101.231 62.5723 100.912 62.7012 100.912 62.9585 cv
100.912 64.0215 100.996 65.5796 101.164 67.6328 cv
101.332 69.6865 101.421 71.2056 101.433 72.1899 cv
101.578 72.168 101.774 72.123 102.02 72.0557 cv
102.602 71.8994 103.033 71.8208 103.313 71.8208 cv
103.592 71.8208 103.824 71.9297 104.009 72.1479 cv
104.194 72.3662 104.286 72.6099 104.286 72.8784 cv
104.286 73.6279 103.335 74.0029 101.433 74.0029 cv
101.433 75.2451 101.541 77.1079 101.76 79.5923 cv
101.978 82.0767 102.087 83.9453 102.087 85.1987 cv
cp
f
111.512 63.8228 mo
111.283 63.2354 110.997 62.7822 110.656 62.4629 cv
110.314 62.144 109.976 61.9849 109.641 61.9849 cv
109.305 61.9849 109.028 62.1021 108.81 62.3374 cv
108.591 62.5723 108.407 62.9053 108.256 63.3359 cv
108.104 63.7671 107.97 64.2285 107.853 64.7207 cv
107.735 65.2134 107.646 65.7813 107.584 66.4243 cv
107.522 67.0679 107.469 67.6528 107.425 68.1782 cv
107.391 68.6934 107.363 69.2642 107.341 69.8906 cv
107.318 70.9312 107.302 71.7427 107.29 72.3242 cv
107.29 72.4756 li
107.29 74.0088 107.408 75.6621 107.643 77.4355 cv
107.878 79.209 108.122 80.6611 108.373 81.791 cv
108.625 82.9214 108.963 83.8809 109.389 84.6699 cv
109.814 85.4585 110.289 85.853 110.815 85.853 cv
111.274 85.853 111.66 85.4224 111.974 84.5605 cv
112.287 83.688 112.511 82.6138 112.645 81.3379 cv
112.869 79.0552 112.983 77.4521 112.989 76.5288 cv
112.995 75.606 112.995 74.9316 112.989 74.5063 cv
112.983 74.0815 112.966 73.4634 112.939 72.6519 cv
112.911 71.8403 112.863 71.0796 112.796 70.3691 cv
112.729 69.6582 112.642 68.8726 112.536 68.0107 cv
112.429 67.1489 112.29 66.3823 112.116 65.7109 cv
111.943 65.0396 111.741 64.4102 111.512 63.8228 cv
cp
114.559 76.4033 mo
114.256 80.7505 li
114.256 80.9014 li
114.111 81.5396 114.038 82.2275 114.038 82.9663 cv
114.038 83.7046 113.909 84.418 113.652 85.1064 cv
113.395 85.7944 113.003 86.4043 112.477 86.936 cv
111.951 87.4673 111.375 87.7329 110.748 87.7329 cv
110.122 87.7329 109.551 87.5205 109.036 87.0952 cv
108.521 86.6699 108.096 86.1245 107.761 85.4585 cv
107.425 84.793 107.128 83.9985 106.871 83.0752 cv
106.613 82.1519 106.415 81.2515 106.275 80.373 cv
106.135 79.4946 106.021 78.5684 105.931 77.5947 cv
105.797 76.1069 105.732 74.9512 105.738 74.1289 cv
105.744 73.3062 105.741 72.6016 105.729 72.0137 cv
105.718 71.4263 105.707 70.8975 105.696 70.4277 cv
105.696 70.1929 105.696 69.9326 105.696 69.647 cv
105.696 69.3618 105.696 69.0571 105.696 68.7324 cv
105.707 68.0723 105.727 67.479 105.755 66.9531 cv
105.783 66.4272 105.833 65.8594 105.906 65.2495 cv
105.979 64.6396 106.071 64.1025 106.183 63.6382 cv
106.294 63.1738 106.445 62.7178 106.636 62.27 cv
106.837 61.8115 107.061 61.4365 107.307 61.1455 cv
107.867 60.4966 108.51 60.1719 109.238 60.1719 cv
109.965 60.1719 110.586 60.3037 111.101 60.5664 cv
111.615 60.8296 112.049 61.252 112.401 61.8335 cv
112.754 62.4155 113.062 62.981 113.325 63.5288 cv
113.587 64.0771 113.795 64.8413 113.946 65.8203 cv
114.097 66.7993 114.217 67.5908 114.307 68.1953 cv
114.396 68.8105 114.458 69.689 114.491 70.8306 cv
114.536 72.3638 114.559 73.561 114.559 74.4224 cv
114.559 76.4033 li
cp
f
118.906 62.2197 mo
118.722 69.2358 li
118.722 69.9409 118.732 70.4668 118.755 70.8135 cv
119.146 70.4443 119.533 70.0024 119.913 69.4878 cv
120.45 66.5166 li
120.484 66.3604 120.501 66.1812 120.501 65.9795 cv
120.501 65.4316 120.389 64.7656 120.165 63.9819 cv
119.852 62.9077 119.432 62.3203 118.906 62.2197 cv
cp
117.009 85.769 mo
117.144 65.6104 li
117.144 61.3804 li
117.144 61.1118 117.2 60.9219 117.312 60.8096 cv
117.423 60.6982 117.717 60.6421 118.193 60.6421 cv
118.668 60.6421 119.149 60.7568 119.636 60.9858 cv
120.123 61.2153 120.534 61.5205 120.87 61.9009 cv
121.194 62.3037 121.474 62.7515 121.709 63.2437 cv
122.157 64.1948 122.381 65.23 122.381 66.3486 cv
122.381 67.4678 122.101 68.749 121.541 70.1929 cv
121.474 70.3496 121.34 70.6792 121.139 71.1831 cv
120.937 71.6865 120.82 71.9834 120.786 72.0728 cv
120.797 73.7734 121.228 75.9834 122.079 78.7026 cv
122.37 79.6206 122.784 80.8765 123.321 82.4712 cv
123.858 84.0654 124.193 85.0757 124.328 85.5005 cv
124.328 85.5845 li
124.328 86.3569 124.238 86.8071 124.059 86.936 cv
123.88 87.0645 123.69 87.1289 123.488 87.1289 cv
123.063 87.1289 122.649 86.8208 122.247 86.2056 cv
122.247 86.0884 li
122.134 84.0068 121.418 80.8569 120.098 76.6382 cv
119.494 74.7139 119.074 73.2871 118.839 72.3579 cv
118.839 85.9033 li
118.839 86.2505 118.777 86.519 118.654 86.709 cv
118.531 86.8994 118.308 86.9946 117.983 86.9946 cv
117.658 86.9946 117.415 86.9023 117.253 86.7178 cv
117.09 86.5332 117.009 86.3062 117.009 86.0376 cv
117.009 85.769 li
cp
f
129.816 74.1875 mo
128.96 74.1538 li
128.624 74.1538 128.39 74.2378 128.255 74.4058 cv
128.255 85.0142 li
129.43 84.9468 130.068 84.9131 130.169 84.9131 cv
131.478 84.9131 132.133 85.2153 132.133 85.8198 cv
132.133 85.937 li
131.976 86.2505 131.708 86.4912 131.327 86.6587 cv
130.947 86.8267 130.611 86.9219 130.32 86.9443 cv
130.029 86.9663 129.654 86.978 129.195 86.978 cv
128.121 86.978 li
127.271 86.978 126.745 86.8101 126.543 86.4741 cv
126.454 86.3179 126.409 86.1108 126.409 85.853 cv
126.409 65.8789 li
126.409 65.4873 126.331 64.9053 126.174 64.1333 cv
126.017 63.3613 125.939 62.7734 125.939 62.3706 cv
125.939 62.2534 li
126.319 61.627 126.605 61.2241 126.795 61.0449 cv
129.347 60.7427 li
129.693 60.7427 130.043 60.8462 130.395 61.0532 cv
130.748 61.2603 130.924 61.5317 130.924 61.8672 cv
130.924 62.5498 130.404 62.8911 129.363 62.8911 cv
128.373 62.8574 li
128.205 62.8574 128.082 62.8633 128.004 62.8745 cv
128.272 68.5479 li
128.272 69.0068 128.244 69.6753 128.188 70.5537 cv
128.132 71.4321 128.104 72.0728 128.104 72.4756 cv
128.227 72.4531 128.395 72.4141 128.608 72.3579 cv
129.078 72.2349 129.444 72.1733 129.708 72.1733 cv
129.97 72.1733 130.205 72.2686 130.412 72.4585 cv
130.619 72.6489 130.723 72.8784 130.723 73.147 cv
130.723 73.4155 130.639 73.6563 130.471 73.8687 cv
130.303 74.0815 130.085 74.1875 129.816 74.1875 cv
cp
f
304.234 73.73 mo
304.032 71.6992 303.851 69.7632 303.689 67.9224 cv
303.526 66.082 303.445 64.9683 303.445 64.582 cv
303.445 64.1963 303.45 63.9756 303.462 63.9194 cv
303.103 64.2886 302.586 66.3423 301.909 70.0796 cv
301.232 73.8169 300.871 76.1836 300.826 77.1797 cv
301.777 77.437 302.575 77.5654 303.219 77.5654 cv
303.862 77.5654 304.318 77.5317 304.587 77.4648 cv
304.553 77.0063 304.435 75.7612 304.234 73.73 cv
cp
305.678 84.9512 mo
304.973 84.9512 304.62 84.6548 304.62 84.0615 cv
304.62 79.5796 li
304.295 79.356 303.711 79.166 302.866 79.0093 cv
302.021 78.8525 301.269 78.752 300.608 78.707 cv
300.373 79.1099 300.181 79.6919 300.029 80.4526 cv
299.878 81.2139 299.722 81.98 299.56 82.752 cv
299.397 83.5244 299.182 84.1343 298.913 84.5815 cv
298.018 84.5815 297.515 84.3525 297.402 83.8936 cv
297.716 83.4463 298.225 81.1577 298.93 77.0283 cv
299.635 72.8994 300.214 69.668 300.667 67.335 cv
301.12 65.002 301.609 63.041 302.136 61.4517 cv
302.662 59.8628 303.165 59.0684 303.646 59.0684 cv
304.128 59.0684 304.497 59.1689 304.754 59.3706 cv
304.754 60.1875 304.978 62.3975 305.426 66.0005 cv
305.873 69.604 306.098 71.9341 306.098 72.9917 cv
306.098 74.0488 306.218 75.8062 306.458 78.2622 cv
306.698 80.7188 306.819 82.562 306.819 83.793 cv
306.819 84.5649 306.439 84.9512 305.678 84.9512 cv
cp
f
311.703 83.3901 mo
311.62 83.6084 li
311.664 83.7427 311.686 83.9189 311.686 84.1367 cv
311.686 84.355 311.58 84.5537 311.368 84.7329 cv
311.155 84.9121 310.875 85.0015 310.528 85.0015 cv
309.868 85.0015 309.538 84.2686 309.538 82.8027 cv
309.538 80.6206 309.424 76.4971 309.194 70.4316 cv
308.965 64.3667 308.732 61.1553 308.498 60.7974 cv
308.509 59.6113 309.32 58.979 310.932 58.9004 cv
311.178 58.8896 311.511 58.8838 311.931 58.8838 cv
312.35 58.8838 312.68 58.9619 312.921 59.1187 cv
313.161 59.2754 313.281 59.5942 313.281 60.0752 cv
313.281 60.5566 312.963 60.7974 312.324 60.7974 cv
311.485 60.7637 li
310.848 60.7637 310.528 60.8926 310.528 61.1499 cv
310.528 62.2129 310.612 63.771 310.78 65.8242 cv
310.948 67.8779 311.038 69.397 311.049 70.3813 cv
311.194 70.3594 311.391 70.3145 311.637 70.2471 cv
312.218 70.0908 312.649 70.0122 312.929 70.0122 cv
313.208 70.0122 313.44 70.1211 313.625 70.3394 cv
313.81 70.5576 313.902 70.8013 313.902 71.0698 cv
313.902 71.8193 312.951 72.1943 311.049 72.1943 cv
311.049 73.4365 311.158 75.2993 311.376 77.7837 cv
311.595 80.2681 311.703 82.1367 311.703 83.3901 cv
cp
f
319.794 65.0103 mo
319.727 69.4414 li
320.029 77.3472 li
320.314 83.5244 li
320.314 84.6436 319.984 85.2026 319.324 85.2026 cv
318.943 85.2026 318.664 85.0234 318.484 84.6655 cv
318.306 84.3076 318.216 83.9102 318.216 83.4741 cv
318.484 77.9854 li
318.484 76.7993 318.406 75.0142 318.25 72.6309 cv
318.093 70.2471 318.015 68.4624 318.015 67.2764 cv
318.065 64.2715 li
318.065 62.627 317.959 61.5581 317.746 61.0659 cv
315.883 61.2505 li
315.592 61.2505 315.332 61.1641 315.102 60.9902 cv
314.873 60.8169 314.759 60.5933 314.759 60.3188 cv
314.759 60.0449 315.032 59.8125 315.581 59.6221 cv
316.141 59.4209 316.811 59.2754 317.595 59.186 cv
318.972 59.0293 320.13 58.9507 321.069 58.9507 cv
321.35 58.9507 321.603 59.043 321.833 59.228 cv
322.063 59.4126 322.178 59.645 322.178 59.9243 cv
322.178 60.2041 322.077 60.4253 321.875 60.5874 cv
321.674 60.7495 321.428 60.8306 321.137 60.8306 cv
319.911 60.7637 li
319.755 60.7637 319.637 60.7695 319.559 60.7803 cv
319.716 62.1011 319.794 63.5107 319.794 65.0103 cv
cp
f
327.582 72.3789 mo
326.726 72.3452 li
326.39 72.3452 326.155 72.4292 326.02 72.5972 cv
326.02 83.2056 li
327.195 83.1382 327.834 83.1045 327.935 83.1045 cv
329.243 83.1045 329.898 83.4067 329.898 84.0112 cv
329.898 84.1284 li
329.741 84.4419 329.473 84.6826 329.093 84.8501 cv
328.712 85.0181 328.376 85.1133 328.085 85.1357 cv
327.794 85.1577 327.42 85.1694 326.961 85.1694 cv
325.887 85.1694 li
325.036 85.1694 324.51 85.0015 324.309 84.6655 cv
324.219 84.5093 324.175 84.3022 324.175 84.0444 cv
324.175 64.0703 li
324.175 63.6787 324.096 63.0967 323.939 62.3247 cv
323.782 61.5527 323.704 60.9648 323.704 60.562 cv
323.704 60.4448 li
324.085 59.8184 324.37 59.4155 324.56 59.2363 cv
327.112 58.9341 li
327.459 58.9341 327.809 59.0376 328.161 59.2446 cv
328.514 59.4517 328.689 59.7231 328.689 60.0586 cv
328.689 60.7412 328.169 61.0825 327.129 61.0825 cv
326.139 61.0488 li
325.971 61.0488 325.848 61.0547 325.77 61.0659 cv
326.038 66.7393 li
326.038 67.1982 326.01 67.8667 325.954 68.7451 cv
325.897 69.6235 325.87 70.2642 325.87 70.667 cv
325.993 70.6445 326.16 70.6055 326.373 70.5493 cv
326.844 70.4263 327.21 70.3647 327.473 70.3647 cv
327.735 70.3647 327.971 70.46 328.178 70.6499 cv
328.385 70.8403 328.488 71.0698 328.488 71.3384 cv
328.488 71.6069 328.404 71.8477 328.236 72.0601 cv
328.068 72.2729 327.851 72.3789 327.582 72.3789 cv
cp
f
333.541 60.4111 mo
333.356 67.4272 li
333.356 68.1323 333.367 68.6582 333.39 69.0049 cv
333.781 68.6357 334.167 68.1938 334.548 67.6792 cv
335.085 64.708 li
335.118 64.5518 335.136 64.3726 335.136 64.1709 cv
335.136 63.623 335.023 62.957 334.8 62.1733 cv
334.486 61.0991 334.066 60.5117 333.541 60.4111 cv
cp
331.644 83.9604 mo
331.778 63.8018 li
331.778 59.5718 li
331.778 59.3032 331.834 59.1133 331.946 59.001 cv
332.058 58.8896 332.352 58.8335 332.827 58.8335 cv
333.303 58.8335 333.784 58.9482 334.27 59.1772 cv
334.758 59.4067 335.169 59.7119 335.505 60.0923 cv
335.829 60.4951 336.108 60.9429 336.344 61.4351 cv
336.791 62.3862 337.016 63.4214 337.016 64.54 cv
337.016 65.6592 336.735 66.9404 336.176 68.3843 cv
336.108 68.541 335.975 68.8706 335.773 69.3745 cv
335.571 69.8779 335.454 70.1748 335.421 70.2642 cv
335.432 71.9648 335.862 74.1748 336.713 76.894 cv
337.004 77.812 337.418 79.0679 337.955 80.6626 cv
338.492 82.2568 338.828 83.2671 338.962 83.6919 cv
338.962 83.7759 li
338.962 84.5483 338.873 84.9985 338.693 85.1274 cv
338.515 85.2559 338.324 85.3203 338.123 85.3203 cv
337.697 85.3203 337.284 85.0122 336.881 84.397 cv
336.881 84.2798 li
336.769 82.1982 336.053 79.0483 334.732 74.8296 cv
334.128 72.9053 333.709 71.4785 333.474 70.5493 cv
333.474 84.0947 li
333.474 84.4419 333.412 84.7104 333.289 84.9004 cv
333.166 85.0908 332.942 85.186 332.617 85.186 cv
332.293 85.186 332.05 85.0938 331.888 84.9092 cv
331.725 84.7246 331.644 84.4976 331.644 84.229 cv
331.644 83.9604 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 18.1.1
%%For: ( ) ()
%%Title: (1607.m00.i125.n006.P.c25.426934942 Weight loss. Man before and after diet vector illustration.eps)
%%CreationDate: 7/15/2016 10:33 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBic7ao(VbPSo_Z!Z]L7O9Xf<QP$fsj,S16CI3HTgi*^BA94i3Or'1'W^FJp9"mF0lZ-E'f5`De1<)W*`Wh,V]D05+*CAh\N
%n`OB$aNWD!Ohm+KhuCpE4KImMg6_NS2bMot9"hRcC6U48p0+6BBXJX4CHmaMb]`N0^+![N=),._+.:Y_Z#iI]j>NRH6FBiC1g9(]
%:<(Nsgh7`!_lqhe'FfT=h!Q2#Sl=*eV:2,,d+CJLg@kC[aZ6=\)jneAD#3)cSuWk-i0o48H2,Og>q\#2nWTlp:S-Tqnn^bpg@VT?
%an&4%f>3N!c^u:eP2)obMqY?kMlgHdg8NIU(,I<92bRLins/6E\(6\lB&[.hZ1B)j+Wb3<RV6F,;_II0ao<7T5P`LpUPA9QGn^4u
%h$-+&ZcZAf>NXVpc!q50*F,*HIBE,Dk.h+5RH6kHmggo2c!%ANiBpYgaZ>i8q'Yu.fU5Kq43i1&laiL0f64HNRrK/BBa4?*pPfc\
%ntTCa@kmSV;CkmQ)@pkjc@5G9FP[q8FRrhJ<b]7M=$*d+1/K(uZ/$g0C'8/HGbJ/KUe!bm^NGTi@dBi<+Y7N\\i>JaN,OC,^$M>/
%'n987YGRn%Vcfu@1u@^gk7s\LARbs>AHnPf=lDZWL6F>dPrQU!9FQHl_gsrjc7\)E:9/\=XY7usFKVc%2/7':WoY)(4dGR!(P@hB
%'0eeXUK:',G<2"8\9(XiY&,P"`5libA*W`5H*)(H")-`@eI!m[kbcojdGMrnn96]W\#EfpL;T>eHD"H^_#OAZ9DQjtgoY_`bDfPt
%gYAkP2u`]Hfj)(-<6;ePPWFd>*GIO?F7bIkG`\>)qTU"eMBs0nrf6hcMq-sB.g@7Y>Et.p9@*1$iP0)u-P@^h'+Z4flh)?b>,.K&
%=Sej3EOSuM(L%dV+rYF$qLcL2dQYW;U1:%k0%H>B/5=h6*ejL`NIONT`)gZMg8`^/L>]LLX7JiVFbTuK=,J_f:,D,5=f#%Xm2oB<
%rgeUaMk*e0*0ki\*USRY)=KBT?J<hd\5o]]W[FoXo<_]DXL>_-e'(+Q;2[mcnpN>nniQgX:Sn8i;ead+l2o;iXL^e!KZ)g0R5(9b
%H>;)+o]7@C&oPp>\OnF<!`H\<ci,"T_YL>!;(?,3s*9(CW)_U8dHJ]<?)!j(WE.^Pg$Vg;nYZ6t05fD`omRYCPA^Ar?2EB`i7O'j
%F]&l.qqZ"b'%:IQ]ErF3Z[Z.p<d9D:T)8&>c6:<;UthE2^J^eoL4$Q3AqLq"#7AU?oJs6KJ%aUnH:cfqJ'M+g:aV(%T3$EJPaVLA
%]N1p`k@k$%eY@#[6B#`@3p'VJ@Xk#uBsguZ<U/@,AJR0qS4$`D=6CsHVCuRV_jG_2=kKW<lR0B:IM?R'h<U,:\T<'_[sIRLHI2e9
%^U^TRk-S#L3UNVm-L<]AE7+aXB*pWt*,cC;V?#T<kWm4+*e(C'j-/S,T.J=fA@_>B)i*S+OB'IQ5XVGH_:E#M3anF`%F[&<1,c.1
%!8#\H/fcA#`ZdM#ee&d_ohso:h3"V<gm2XCOT;2[L83Tgh^N]*5:U@W3SA[gN$`="=+bWpCf^tGb4dNZAfA,,f7-c8eJnCV.]J&%
%"5)abE3,iq\=VQP!Y4:62.3OY]3@oQ[)7nQRE\092D8;+eP*8hE#$hmXSMFX+3C3AgV+$97^LMmP3J.h:u\Y<NFgZ:7D,lq@\_PR
%!82:4>G]Js3"OG&PR=(GdgMXUD)Tg?ONVQG"Y2*)045r13R00M/\A7iAnp"Y(C1[hg"B<Imb_I+*Ogo:\("_BWpQ9bgSM^A$+0(t
%pfaPlh:/g$RW_WYDJIm"9tQm4g,VXB1"%OnH`?'pU@2dGE<R)I<,nkuL4".aqHM@6N[KerF`L4QdLk<+4*p`h=8/+PB`9l8I&h;E
%plRmq-Wk0K[\PfJ=%C88;F\ZJkdQ\JT-a>-s"5HZn7ig9A"&#\4,sZnG-b5OV`;%]YuX3*AdXXZXs6"jj.`YO5ZI0K;67:ZW8M>h
%R^HUnJ7l,lXs.F2"[I(Z;*f>i5YT$0cMWhK\/Mm6rhG&V3D@KDqSgTXO58?f'Kc+iaI)0Q1+tnM;`h"LUsb-C^X3qtBc(3^<9g'!
%O\MGPrt:km"]ho%8+C5L;^+<;;f&;;pnd.E9pfD'HCjC9`mEEURke&\SeeN]U)XIr?5bb*3FDSZjngj5r+*q;UOqg1Fs.Zn,\&,@
%(mF+NgF.7"m:ro?H80O%bl_jRa7#?8ARk3*9?@1RSNiH-=5QdI+p+BE7dt2Rb]2YE.D0)%<f4d[Vib\\X_R%k][BA=ob5<l;L!9/
%/dh">*0*0sY+/\G*.+:TCWpV]H#jo#:NIjq,<V,GA9&9P4YW8`JQ=5FjBjD_-SZ2&Me>+#&_ubGl_K-W*+]7S<\]RW:LhKGA.1K;
%?)b)Qb=lEe.5pE[`K6Lt&Ofa?;G'9JR(+lF`l/Y;P%i]r)E48-NMgdVC#!qO2]dt;1lWH8MskF"2]c`:AK!KK9-023K2o&q+*ZJ)
%[76](DEZ8'$p67")^tqdkdHLCS)#Ih+H7r>m69CF2"iI^[;.nll1FTh'i[E.L@NfeeSmaD3m<peXu6H*r==ho5Y^)o5U`I`jEJ_B
%E>&R9b!RM/\9-0!<9d,p1+Q".!`r/990]G9>,ARTWg&hgX^_7GLr7_b2D2-gBBhMs?e8F15rSD.:&S^'s4PnOepe5Elp!<)'J[)V
%s/P8<<9:T`Stj.W2[)1+)Z>rLJ!T:[@Q.#qb)V:[FJZn;Icj&Mi7QHjF#)-ll;\^;Y6p[T2q[qVpQpsmDZ.#u#NJHU)Y3PcS##)?
%El8GO1,8i.aHgeQ^YifIHt;Me)85'!]33)BU:i8IJ!i?(VN."Bj(7M#R6"ZONgHa*Aa4N.3aVdda33[7e+H1dV[atUaM'QW-JF)o
%6]4t"S86NejCB-TLY-Nh)3'e89m4@11mbnR"Y7UfE5oS!7J^8sn`S'0Z$,opin(\AX%60/A)++be>aO<*W8qsNgF^T<ca]:a73#c
%-U9qoB4PL*)lJsk`_/3bX#Sq:.Sd`tY1!_QdgAhp;ZWGYoRb[o^eDr[?K]QPn;>h>5YT*h?I^FHEHRs.=,ML$,+.E=QaSKB_GCQ_
%<q7mnK/pMZR!4Z52+b7pV_u7fCsl%!U8<)Pm'Q,u\:ZMMVSg?=]so5br[EZ<S43N.O&,pM"%+"*UHCjHUiCe;Y$?%Zb6S+L=gomB
%Pkb`O`k6II407sa>K=-@UFb*4Mat0al"hdn9oWbi<:0Tg1pX+QJY21EAP'X6iF9s*k-:h`P]0;7)&7[H'1kVO0)b.?E:!r;kG2Yh
%j0#5d:Q+>S+)<fgSc'L,KH$OB0WjRu]mW("jI<rRIXdlb\pZKA\*Bk;rN8jANL_o1;K0kEAZ:f!QFc4fd#:kN)OoJZ2kf$P<8SR/
%IHRJC"uipGc7bEWRETt=l/DLuQJ7fW7?aDZ9m*1G?c_jDq)GtTV`2];=im/i+<Of_0YKb9`a%mX>`tT5+<Ot)4M=$E?FT!m_K!5A
%j7EQO<&fo!@QXYmEdE@cXCU?c\j8NFNAp,(q-V=U9[>LaH*G&,PC2.\k4eB7aZ5F>\r)?_LuVO@e1&sT2QCKXG^8^L]SM<7"FosO
%lRF=dID(!A6`9](e]T(uSOWi_ejpB_4=[ciKi[;^[o+lU\`MDoIoNZ&)uH1@VfYdP[-+_,qAiONWQqWDpS`U(kdHM_2;6t&b[T"B
%[OYc*DbbafUu>5$24+XjDIs=UhlomRbLOu1a#)ilG+8]X)LJ0c5u4sC8\(<u0#;as[P+D`nR`Fn909_a,sH5?*O:O*On&<r)l'BS
%FVBXDbbm-D`kGWrcG/9Akl_fj\8f'%Ig+^V+BJ.CqWHKeB7pn:5VNae*]'2M,_BAbS$>I@1RmMreKjG/ab*3*RrHfSB]9clS&V\i
%*EQEuC28M%O)[8?:@TaWktZnU;Ir`/AJj>aC#+h5]gp:@$Jg#BD^*lU9gZ.eQSC6S*R-L>BJsT^1N,H5>9.Eu#b*f`npJe6f%\5Z
%hS:h"3.Ksn+2<3^A*glM^SZ6NKH;_#1g3V"lM;?@3h5c,X4='_c<nQBBo;$@8[81f/%AG0:ZC!CR%AaIN32"6Jlfgb:^4tSd,">2
%0.AgD#%mk#Y5+?*dtHUo4.0k:iA[2U=)#Mre#_[$b?@YnIK('7[8f5*r(+Zn8]4o1g\4:Vg?9$T<ioG\.7tnPMRClU.Le;`F]:Ud
%(XZ5<OXX"p:O8!-N)lcX/#LF#/sa]2:A$rDlmX7tFWD2rC"RbF[W(r,%)p`sp@]RCPgt)jEa5`E.c3h\>UajeW=Ui4GBAG>Sd$Q8
%V=&W<<_VPDl01;[Y_ohQMEb#n%[(.h@On:FPFeOJ\%EDu8L'3pdMR&%n[R+/:Es\d>=ulppUEMHp$-fPWq_"&Qq>&kF[IB&2^`r/
%Q*E@ncJ)\61/(uO=(;KI:).*&N?:sOVk3S'Eg=9ogNN)/D+cq"QFop25IPR!ihFD7=7%$;rVHi&ClOV9IQ8-a8oqb8k#,lT2kB)/
%Cr)@uVDNKOc%2*A6YO_%,[BOm&a`k'..LY4@ccl$hL`l#lu,Wrg_>"e.[I-k1m*d%j+r!<G,*SMD:BIO.=t8mc?JZGc^f*j.Hd0#
%cBeT.Vk!3_chU8hR(4,4rhu,]^%t=p)\pMn"6QtRm^5DZa&.CDYL7rbVFnlWMfb`r,#-q<#]jQF59RYT;3F3/-1q=0oENW''_b#j
%KkDL)8PctWb/1O`e1^Yu7[)qql33uIG2ZoiDopmupVPd?C/\hS)#%K<ELlfm8*^gnA?,Cs`eu;'U>5279_X9Wkr1)^S%c1TXB@>c
%=u1StFW.?N^<V$[%$#VR0N+RZ\D,9*OU@%%\"(S<:Bec<;Ln;POm<jrNU$/<e^L>8CN4HTI8XTjc/@K]j,B-C9m/gZkmKMlR%)or
%(NSAsQZ:lhnFZ@4S-^%0Dr_mNiAcZ`n?7(_-fns`oM(j>Hlg%F("7Q'CX$trX[rrM!`@u-1i??o7Z'9udo;=3dFP1o)WO+@do;<H
%9@]ED([NK<B><W+Js0[[N8)JP7R,Yg*6Qc3Rfls_B&2:IDV!VQdn'Scf]Sp'!Fj8/:kj6PDF/3oWCPuUkKuh?V/tqL(`VdQlHpFZ
%Wpt"X7jAHO;ier^Bn#?pR!LU/m:<(8NN#EX;EPl;:%Dtn!bPn()E4<)`JpibTleCL<1u#-ZX^rq%bHt\<M"EjFo%u,NcEUa3`hS;
%:R9AjVlng@B^g"!Gp_sU=@Ul/^//Pg?RQ*K\p<H'oXtUlFm8%c>p2m323VKh:>`-,[J-QlhULC$B6u:cH9&D-DM#QG"(12\,&MN*
%/\Voq9b"h9_)F7HV?Yr-i0tX42r*=IDj%q\_og6]KT,"l7ktZ7T-KW`@HZTVgXb'$pj7<3qd3goh;C6Zgm"UN1RmA^_-_K:c=lL2
%h#P`@"7o-7n]aR&2DuUi2J$4p-o>X3cZ*T(2pgeGiQUVV*?$0.Mf-<6P,"LSp7q^udKk5P?bLI^_e?$jADA&'ME(=J`<)*<_R4G0
%NQ*peBT?Fb1Ca%PRc'V'E+USS0`FAQ)^0/u>a/s#I6ZD@?VGVVmeij]@Ue1bQ:hgQ>!"=el]p1QV,f%Ao7.961+N(m;T'#o*PT?[
%7P&EIeTS9"/60tGp!.`c3KYNK]L]r:#dmB[V.4&Qs"XZuc(9tt"3_k9.!&h;ETW3i05ZbJpnPi97\p)odPU5H]Rb8'1+"a4r%/Xm
%NB;9YH,8Z3f(ll`[hI0in[k`Kgo0VM<N5mLL#;O4>-"LCfVsku?u+;=V3n"8)-M0[m7*PU1Pr90!m8&EV+Cl?daY1Y?D@Rs<FO/L
%C06ATEj\jEOlgWBY+pRu"VX[`(/FjlJ[cW4hYn`udSjQ3;<9'g:tGS7"\QI*:P47q;YRhN8]"-H+XK11$ER_(O5eJ"VaSD%;f&9E
%CXR97CbLKrgIPi32TAo.4Dm%%e&YPW2H%_m=Ke<oU56A;[=XlEOS&h12Y/l$P\KA/A>5k#@aa$JdnH!Go$=0WPAt5;Ad[_k`202m
%DFQ+u[$o]Zk+\Y;^I])%':t,FMBe(00$9.b3@Rqg$->Ubh1T$t1dF`U;5UlPdp/,E40"d@MdlYnE`#`>pMlP.V43R)Op6_6e#4WW
%(F9f*NB;:<e6J6d9uoap"2q!4rH1SD-8DDF'k7.Df,3UP:A0UP;PgEg:L`leD+r5@r74l,EWnD%WZ`0pZQ(F@c,JDLht7&J8X*nR
%f#?i:WPs@9j%C--p%m]U.0DD):A\g<B;UXUmkMBf0.3AI\gaBn25<fqVGftY%ktS_gnnd*Y1Li/_rEW[9ntA@oj&K46NbTZlh4?>
%IODo+mseY%q)_rtgT>V_pC<OT"g9C7N[gII<k!LGfe1j6-cAo,>%Lmt<F9A!gU1Lm<]q&5f3Jn*NS4I4mZpV'I(f"lPLU$b+F9CG
%)aM#CI=U7M(#h:X,F"`R%>00"T9A-Noe/OkmrGPUIck@GdO&^R;/cA0kJ'7pZQBJoMVVJ!1LUd].58a-=3mAD9%:u(m,1q^5f%s=
%MJ1\<?eN4o[V'63XQOr5Ep/-k#/93HLVU6%:I"S+LF:=8YFkUU3IU`nD1Bo-A@=9959$$]J*G->&-GX)VR>b+#ppd2/>E#-puIk"
%-dQcgT01`"%lXE[+8Y?P(UcW%*VuIZ4nl,^l7'Vp9Yfgo[W:Vbj1CW;"8'Cu>^S4W:H@&0;jiXbn-?uDXq>tD<PjF-R9kjm]>[sM
%e#<Ul]19VTCtN$)b(eVB2V4hNoM#'>gfW=)N<P"(r[14!p7_NcB=B^6dq:mj7bF7Ad_ini@ILsT(,EJlA9:nJ8'_UMCQI^RkiY,-
%]Qd,'Wk[1lNV>NgeR,)gX_PJs6[=.^LBm?77fA6mJg:AH\c;:!W):H/s">fEqH>P@6,T+/Pe%-YkDLA7l']GCYQ6#(5C53rC.P9H
%6b^9:Z;]pW[f9:D>gk5?kl<MpQYK;PLU6a?mDC$b<dX('4c2;\M^oOABJo265::o\NiH@<rosb-oqa7rYB84Jm,Jg,]?cH?Yc7'1
%;86;0FB5s#%cin.?*=njrr,AlW[?%3VE=*YnL-i;/s_X^F@UfT?j``J]@/b>NGN#ST_p[u\+h12Pj&!;R/U;eFKo,)C'khNN$^]b
%rY'C[J+X8CIsO7:Mj2u:IuM-e*sXQ8f;b[:_o?Q6a=Q[XMR?)":A&?S?:4X2Y/u2Fh0Z_X&W&GhN?5O/+hKLV:1bR]GimHpes2h%
%?GOlA!JqZ<C85bd4@bA@.8O05j3CE#R\CQ%04s^IZ-aY\0hUY[hs`KE$3\JYYuo%lV,Jq/Ap"Q@$3'X-mZb,+,SeTNHHTp1Q>c"F
%j>KA$b?D1MUY+G,rbm;gEgrqofkjaCQ.D!gk+M9X-aR-^G)Af?>.#$lWtWq]7]gZ0XR0#Vh-)na(/8b\eQSeI5%le1,iIqcEY"-*
%iibX0a`$2[i,qML,LZ(mbtOg#oMhek=opr:PH_fsEH@U8B"QJTc0Q2"SP#sZ5L+>plrDc!>.69j#X#??m52GGWua"oBVPeK[oKN%
%FGhN3b\j3/D2.-.cg!(!csr<0eSHWSF]58:C[!1h%@>ZtQHSf]jUfarmBcf#@]eAP5O<R"d>:^J\!b?\4,jNg9)fG2<et+N.R@G.
%<&17WZPt4/%:uSb++d1keN%@Y>NJNbg#<l<rO\=Y8fd8Bq:''M7d7!?#BJ7-7!k?c)e>DV-D<`;b,'IE'2jYn40;u*h(6!RNL0pM
%QDo36Zg0T:F"n@U4]$uKr6!<ea@gPbf>R)^\WcQf=*@:jf8-\2*UXRJ8038U4RBl>b]-$N`HnGN+Zq6_LD&o&Mn:7F%VjA(ibcG.
%HWKJETklSY`>Y\_boMNH_l,Mr^=(`Zp[h1/IfQ5S;\+H"8AIS0KUQqL%WT%@gR<TBbU,K)B=Z8R[oNm9q+[[h:.O3=*5(*A29mEA
%DC5ocZRa8jW`oUQc"pC/<,1B[qU,$)d\P,[$,t7L#Z2,#CTd]jM:qeQS\[[?qBgL$QeCgcS&?o5RCB(oU?8!gPu\Q9q]VMoi&*k6
%d0Lh-&#*.rJJN<lq&auI01/X4a>^@Wh8<-mg*@AeUZ5.ep(Q0TfLR<-98uu_;BCF*R>$ue:@Ir!3LlHsmoKIie7d$c.hT@G9O`o\
%SC<.uR1K&08I,N!AVb&<+O'mr($fE_>5BNIZh<1Q[X]>S4?pf*G#4e&b[kD;GP?T813kFqCqhO7bTt622e#b-<9npJqVBpn=Wb+'
%j_FNP1%FE34n>,PjU)lsi(FV_?q<:3UfdUA&XGpl!tq_M,hhQMU4L$?RV;GBLt9)7gHj%C4=@sFd7:"r_Ag>ceK0)sqtfaQe'M+9
%*"K1a)\<D7)FmpOUfa[Or')/ShWOkc_O`"]:F^c,gu"HO8Q5uaia+4r@BF^L_:]`n0=Q@1D'%*ES6aMq"RAZnRRe,a5dD(Q[(siI
%NMFbpE?fOUBQ0A;Y/2W]Vot2P-6r.'38MF0Y/\*1IMX,uFLhnP;K0aO-ZE&PS/9$502RgqrL51tBA"MC"HDI%X;JdIqK$*Fo4%$e
%4j\Zq6M(cFD-)NnZ2W.236`ho7,F].q..$\*Od'(WnX@'CdVOZc&%R#Op`T!!Oc'SZP"g&fRhhJ>.,ueH9UHsm>$a\m^ccBFM">e
%Z[>NZ=fn9E(!Z<7UIm?kmQ'Xl8MSTj/isR.Uur20Ohf(BC?S5fhk]#S\'8`.@F#uJhJc/`?Ia+kq.u%TS9-nUNFo259(,ei$(%hr
%qY+Cd/E%c!cBEW\gQAt`j'SH's6Crf)P<-%g_i(dd_AC8L'bPRI0$og%J:n<D@]A6+2Gk/Y24ODXJ$$5>r>l:^B$IVDJYMB+^`BW
%G4hXpbc2U32NG.kld@MuBB-L*]1TSi,\d]K]M]aBT#Vtp[9!"6a6X_uV:;H-"R3^(^C1ToNAN>PWhm&F3k*8b7LP)aZ'V!lm<MCR
%m^1C<?gRb0g5Yd=.tiOKI$2/_"*LLqibBAJG2rEZd:cU)r,Dn9m8C8kqKWCZP>7s#qbg[r:7Z,O<Zj#LOq+QoCo5hph=36#=>EqB
%Y^S6:lfcnh:=uBKbh[sN-OAaq^4c$IC*t@%XE#p-pEVJdaRo"s94\!$SP$"Ro;Y"$%]cB*?I]RP-CO7&;23:&hoSa#2;f+X=Co$@
%<qZ+Q,iQ>7F&H8>d'XK:8^TV+8W(g8PmjF_j*E(WY$JmBUf4UBg_b,do_3-FO!:%"L7MA7^l?#X6WKO4l+'WM00AfL[U(sC7WmrK
%lim8&I[)F&#TZM/e?9^kAn&D^"Q45_7ig?^7C'NTQgGQ7<BBWTe7j@$ILI7#YF@J0p]&pjpA/i>06U^3epmq?5)s&W:PK`+_`DQ&
%QuM$o4579?3977+8cnJP=lB`?p0*:hoP??WQZ4#5dD"uB\OX2WM6]K3g=hP\#J>9nTu%LAB!;%;Fd#$OR98"H'0<.+,]luaI$'7R
%o3S-M[*#Lo$B`9_Nk=u4A_8E%["#$&\SHip(@1WA^2Z`R.nuP^Gu@A+D=;>CAiA8m>Vg?TH.Cq,mX)%g8h-+DNfH0:'^ThL%dOi*
%>>+-D0@fCJSrM$0A;U$V6#pE6UaP5<s."<MY&MbXMY^W*3W?N]/0aXPXB%\16uIKkF45@(PnGhPn?)Y2kMF6LbASK[?RidZHZ%Zo
%R9s66D4I4NT%%[A0AN"c]t[T"B%qOcf?`%(4,YVm2kFj?:D^K(h;;OQF\?%L?#BHpVJY3FN->2)raa<a]<_&Tqf$+lY1[,q^JG:p
%c-"JcX]F*?H"Zg2frM6?A\57_<djnAPg<t1T+&rO<IR^WHMPG%UA&)kPQ1?%ec%6eQTK,%[<%i7S^U))gcO=YhS/l1oiph_>FHmg
%Ccjp#3ndjm3;24AqY2L`Ya0]YnZ9i]Mk=(:cO-:G(>IO68,9]`DII^`Hq`#YIMKR<mWA'@TAOsq[?]IX`T,LtcJ#8l_<fj;YP7T6
%F6i_Go$dJSAKY/uHgT"uQNhlLpH?8ohRp6Wmshs=gRl5ZQUSP;QFetJn87krBt`T?RU&"_&!rT'1Y060X"WYM5$D+$s15F8krsLc
%k4tRsV,F:;L/6>ilc35-1::gI'YRQ?maoGCQfmJ\g<A%Co;tNT]"+sAHf"k>K9`:rV\W"e0"q(nP,jr;T0IY7]sQ^gIsPAm]S6'a
%Q"uXCbsuE)Ai+$Is1J;bG0[^,n_RG=H*Orh:o$H:[i`rAcW+"]hX7qin:#.bASlMacJ/$&^qn!Wr8pNDc4b,un`A0hS+=TgF`ce&
%O8G_:6QeO3+5Xi=I!"8WYNjc?-`^kjgj+mPDou:=q>&<ZI\F9!YAigTLDHb,n\l:cKtG\g`mO0JS,[a*Up-pb/\bS@+oU$Tf"]@@
%lFkms%";hOHLbTp:?A+>4OsVJID!3lrq>mjT4YH>)K09=$)aJ'X3[OeI#aP$c9C)PYDUSAcE5Xp+`DS=dXGrC+5Ce2gd1qoU\sZ!
%MsouNir-Kima:?%bKoa7:N?]<V+tq&DJ;1VTIca$cMRP=%R!ejYl=(Vdr)NcK"O8!qW07Lc*(\_cb`%rhoHo.YEsN-C#%^#7o/P(
%]p2O5a>D0<U&!osWr;@2@AVL8I;LWT^O=8&j?(nX9.0LRma5bopsQpH]q?a^527VJ>RX'M/3S=7SLro<k,Rt,=eoCD7TBY=iZ9sX
%Q4>sbEsL#Qh8.q643b^pLSt0TFUN$ki+_)TeQi,TFn^J[@J4%!_:km#pL4$A=FQX@Zs%N?AbY^mZkD&SBKNX\Eeht8`jt4,Y6C$S
%Memk6Roe*E5Yfkes*jqk\+=0R]<HJVgc*Fn8*.Tkq><BsdNReXZ!)2j^PrJB4'Rb1X?J_Uo=/]N1_$R^ZBO0*S#Ob>YEm"@/E;!F
%D.@OurV]@\Bs+ei]R:IsO-].!I=&9,8`moo[9[pCFj>Kl<=eM65)\B'W\!!g-^rn=!$p<Jo_A6;kM`KiT89CJo^0lR_i;rMq)l.d
%om)"[qKTFk"!$3Jk2m/^)^d.S%Q96!FoTuRRV)AXZ2Q3+OllLFj/"6\Eu3`]_0:P)db4AAi=&C.[A'niHQV]p&[-S05IX^05"tZs
%<I@9;n@n;WSNb9[?G,1!dkhAk*d0MJ3UlJ(XDNAM0RH4/_gD4>h#/lh,%7ZO3.,]2PQ;p3>d"]Q3CeMTL+%Q^B0DD*nb>HaWuI&k
%\V&=?g;m?6M8\<-IIuU*C[nmErOJ3i>.+4,%,c#sb<c-HMeDX8j`T_eJ'63/4KM3UKC+qle_5'hMt?c^'C+"%pYE-go&aW%gO8dE
%&&2Ea<^2%Bh7IegLJL^*b#.,skKNB9W!@O]jnW-[jjm3cp1P@$YON_,OAUh+1lo?b=(SboEj4O!VR&pFRK7jh;;6K7h;;,Bq"9M6
%q6FUMXDR(_Z.H&=h!>rV?Gn7qF#4?.D>O=X90?bW8Z(GMb-L`MT"L4>k%8g<0^]UG&>MDId4j'6cObN:b["m#FEe/$r\WC8@md\T
%p>uA(liW>N4H2E"GeZM%IOF_s_AkV?@"t4sQ_KIEi@^3Npl7l)]lCcYc0[n\pEZ7Zs&&ij)0.iJ4?o]LO([Bnne9D\b;;r9jl`k(
%B0H.bpdoj\49L'&Zb(4D&-_pg]+?rloG2p,\:fS+O>5r]!4=t7d>NGMQj/$G8.cX.5iKjsaH^EWH(7sX@rT0o"Wosg#$?dlV.m0j
%?1&WWeap;D<Xd4a9UFk]=Sa9iXUlDjRfkb17-%GoPl2mHM$YHaArQkGhG&IA0LmNA@.p.?!akSgo]Gj2+e'#e[-T(M.`0&\\)8J*
%pAj/mKFB@CgNfer5aF)4X!2#"d_j1c637@]Ie\TQ@4ZSgpQ0T$c=UjG^Jfn0RX'W7SgMIM#U>r1EenY@oC3l.K]I`N_UE%Z%q7X;
%%$!%*C'n;9`Q]Ym!#H!ao.k3b+6)>@rShhoW/CT`\\Nh6T)0j]9[`$l`GujFQpImHgH.TE5q;A^AtMK7*P?YpVbt[ENL>bn_?af*
%9diio=#8$R_p6*9PpKr7et_msn",6-G5cB\o"a`ckUugg?*YuM0qr0?P40l.9:>n7="dV1qkTrMpc-LoUM4sUhU71]6I%X(qjd&>
%?B?556/snq)rCGhgp*E"nasGaS7_GuP2!&+^Wu4j2UBtsD(X!*ITrR]$7iqd1UMc-*lJ8Xbcpp5i-T?SD07d8!mc5eL9+u8MnQ>A
%'I%IpoQlQMJks_eo$:MN^CD2-k</XSR="JteH`drf/%%Ym@?jBX/K7j.VTZjZB:uI*G4P$Z\^O6[$D1ko=W\I.kgJ6YM/j]e_Q:>
%V<d$j`&=jLm>l\8)_4`Jp00$,/OWP=:Ab1^E]]!Q\$q-.eSjlmddd.W$#/B0:"kdY?U::??FbUjcGtg4f"(NjT*Im`.s;IuPL^HE
%4*D1-9fc3$["I.hOWWUTrac#E;jlU0p#IXfP<8Nj:*7/V>Gs`2]Vs/7p'F2s]N%,7dhr`_[Lh3^4Zg.MN/rL$[I1ipYpG40&N$a*
%0nF#,5qD0U'>aI2'R$,!hSdu;YGm[Edbq4t@Z<W&5:V%DHkPL!hL!;DB+NQ.Gad?j\,43oFmHlA@9-Afldo56j4B?ZCQgS'Y6ueb
%FU`%%#RC74I.*#d!-o';Qrj(Rq;Im]HG02Ublm2nUVQHUh1^p(=5%u7qJ(5.TQu%d;YqcOmq6[E?LGQWj<'W(04LGigbXK-BAK=g
%A*_*21Uc]Jh'M@(fq#P":U_)]4kVeW%.WY)QHh2]@eFR7&_S>>a"d*:_FaB2oh7N_`F"9(*P!k_`U\<!J>daM4o]K+Vrh'Xen.n]
%m$CHf;K+GhlI"'>`UDao#N!VOMta^&i]Y!*$Q#UODL\GZNR$[+9<Gk@'u];)GdaY&5eLV&iot0hb9n=C,5t3`OMJ!C*44<.S*&,@
%dd-e`KTAnh[G+?ph;*"[K@e*:&-U2BM`%:!BuQe]4e%LWFhdMoW"g5k(\)&ml5,S&E[VdkkpY5BV;`5#XPDUEr/k:<O3*cWbtq#-
%/-_>do!.[l\$f8W4!2tI-gs8a*$"M^k6-1'g-:]:G:Pu$X':@WiKc[rk-KErq3Apchp*F6Fl;+/eCV'KP>H54q7TYM0>(Lm$+KOj
%MSh!8<k`t#Y."!)2tE"e4+7"YJacaAk;uJ0*aRj']t2\#51!X)[FZK`FH7+7`u+](:%$h!hgN#H(Z0\F/fd/<3a#U5=-uR<-6baG
%%`&a8nE%4TmP>nH+j>'n@s5QHF@pY0+-uJ_k0=_m)"*qHVAh@mr/63pg[Poh2moai&q3XFXreSTchZURr:0VgA%S4O<cT;69=qS:
%I9MkYY+Ek-&U+\%HgQNRDfQ(e.j2i^X2tc$IsH462'6p]]6apX(TUp@@ljCo&!JK(#cG]NKJZmD8S@kk\o>0$]$N[BHLh$)Nqq`O
%2XUCj;C2;P8(Pr\8'R7!q<Z@rDPNEh&+4n=0?c>+#CTsH7pDH4*[$WT=RjT1e_7QRb\-P<m">1GETd;C;DU!3J^[o8TBEt(4M8>M
%@_$mY]s!@@c%l,-&U_)q=KArE\V#:W>cmgGHpc/,YHBGE]W,ZSd`c;'QT3Xg\Ff26&Pmj;[s,(I]amD>RQKoElJq:*b$neVkWX.H
%D61EUHh0)B*&UnN=%aY,S#*gS<Vro`%%R<`41@bD(p=:Qc_#(YcTW()>!%c"h2emqDD0eA(O'r@q3*n4D/Z\I>pDM3qJ]iLj%9E0
%pMp#Fh3gVQq==C0_M;`AYXK>i+5FK??T>]>&!f$Qq<6<(QZ&E-4&Q;BI\X5u[/+`bEVkmk0m@SUmoBt54Pbt9h9nJFN>l*=4<eIq
%PWrH(.*q;qeoIBSI9bHQ=3/].30Dfkef1.@edle-Y]g`4?WYP[bZ/.T(KT(c(IUV&[a]s*qV4B4[QV(?N-]fYZM^NoG-t@0mL:&/
%Z?g]/o6f);J,AoFa.M_q_dM$AoRO"8^Rg!gZ_(96B:CQr2HarD$.)sl5X%Ae^NP@QfXaH4_hT?U@+"Ub]nBL7n:%j1Hh#rD-T:ej
%MjNOQq)k&1=kbJ^rLL9YQl?E+DL=Ti&gSEM@YFJ>HJ/)54=teab9&mKc3.?Y>K__*XaZbQ\p\h@n]Ab:CC?d*04$1_L]XJ\mEZU"
%c/[Ko@W(XXGbf7j8Iujm\;q$.-`cZ/e)=t>Yr4DRNG?'9BS/M;J[&hY0/daPoo[Ym>^,pj@E%FMd_XOr$F_)%R:PKp`Y3nI$F7AY
%0g>8?c%^)-LU.N0!;-i704@+`AS)4c>Ums8T'(^S:G;/No"3ZRKpef4I-,;-AAqaN@)k[7<?jfn=S:\#ABrrEZ^.AYB.M0sf`smA
%6'lp;n9KMX0'h(2V;4/Tfs@`_f4Wi.T>=@JSg^bWA[LVan2V$lcbI5&Rf0?gp#,Uq`u&1upRdd\=MMp7:3RbbBb_e50@fcYlm9U,
%KDeXai?JRaE*b#$gu%l0_dd<=ZVPgeekPf*C_],I$EW#o'h&@7h3IATG3<s-J\4e6\OPQ:K/o8t,C>.rNKkE;:mWXtl&?0']$FaX
%)ML?BMPmJY1j=;&WBVfOS)r\Im#-iGH-D5NY<LdY(H#62O.+*u;_%P8am/\=s'%g@>'\]KU_q8oT'!/_>kF=gmHj!/]<BbX#3*#\
%S*/<[$*i$%(knfmRToQu4VM)%($mJ(n#^Gn\*aYho2*j(K>p5lrM]7&^9:m32f[H%HZ)-P(VakE?9Nd[DhuVt'U#@IhpHFF'57c$
%6cIQ1Ba2A,J2ofhZ[DK94)*cF0,'lJ>O2:#_S'inZ>+SbaVZ1R4CPgBQh+@PfP,NB[efCGmRhr7r!J,Xo?V&^$]+:i8h;Mp/"X)e
%[,/@&Gq5D2W*[(n9Y&[lDX1%8fJf.Dp$f0g%_Yn(2j;J]H+.:"Ib\$H7N&#1PR\I9IQ?[/^4&rB^bdQ6(&3m/VT4tPpbA4l.:+oB
%`]3idio8d1rqKgkNn\j,H!E>1AJZ!.<56YJd##+OHAc,Om3BF>W;g\8#Bbrh"M:&-n)&$dk1^\+4ECEj]7\<5de,MVmoJ-QhVHJl
%GlIMc^9[[uG0ck1[7OsP2i3`G>&Y:=G4)2T<YVL9!?#:kSeV_sTB?S4pF?K^0ud<a$]TmHP1D/TV`mg7\$>J>5PVU7FHCj=5B6*k
%@nme\YWe<s@U6jYoWbLhM/[!JmI]H0pHibAV7F+lmP]AsM6?a3%/07g[Gk?g@<J:)/R.P+oaf*4lTg$JV9-FEM>$ZO&6Hi@5G,Uu
%a2s&iYp\u-#OgU:Z\:`[S)\2J.oJb&cfY]/gbqaRK*SGi9?Zp1BB^:pI@Vb(n+O?ujZ#E"BA?Rt=.KSML%Y"GrZo<@osY0MoJZ%&
%H_&o,CjgGuI"-)Nis,BsYg]ZIQabQ/5-Nh;a45GTg#`/VJc)K>:Hj/t5C-Da,I2[eCubJ&o.)W@Ll<t=HCZh.;FW_a*tq/:0ALPO
%YF[m'S`hLWlkeP\PP5!Vfab6$fmUP<?6GDZ4]e"*B?@`6[5XG%Id>W'm+d9dFPhI1cEWHZb\VQ_(Cf4Qh"u%gcQ>)05@R.3:rg'-
%r2W"dap/mAD"C<f`J4\I%gjH$iVn/&Hi&`9o?96$XL[LeKu:G[M`h_C"!+I%#3:#LPcnjMVhP!Rl16`!a(W%'\]4C;!g6Z/nt2uO
%mj-1/@Kh\9Mf6%6pj7te=/6[O([c4c'V7VI7!95H:iGf7o?SN7EKX8P3d91K7rr6D2,AALq<`MgrBk7<b<6@+cecgmQhbOe@*LbY
%bHsrDpqf.63HC*aV%>:V#-qi^9.NZ-?a"eKbl]d%q;em)mFPAS_U40Xm$<J>X31WbO,CMT\@8`nN&.ZC\*aF@j`'&=eJ%[brr!)0
%IVXCTiNuoDh@36:[V3A#E3k&E>cZ`XG^o\>_p\:lEHf.B,2]r=p<Y(3iVYSO"0[bDi,5)?XoE_\k8Po+\BO:rO\=?PjLLpUmfgf3
%7)AhJZ.YHKM7^`TQ][cVHBcJK="Z=1lY!VK-X1>-l^b`maj'Zb#)-lWR?:f``-!=$J4c&&RFS:F9!W&K_ooB/WUekm!S8P7nl5Xs
%kN%02Y<21hIoNkg[8+,4X5s-Fp0P-/S-+_>O*Yfnm715qQT;_:b\"!.j\$,D<^uMYrDWG<Z151eLJmZ=>/)W'2=.qZ4K3/j>icgH
%([`18i6pp7@FmiNh0E3bH;gsDOeVSVj^]>)*E"P"06&FM<\CBB]fmYca+I*0S\t[sV`,8n3nj,k5e]_?Is/9K]m)M(c4<_?krU%\
%52]H%$Q0hOkP*tgp2$97NmFjjN'<i"d0ha>S;M23RLqa^&e8KPQ[-Oo*1lJIhE0"h\*_+!qA(B,EV91j1AY=RhF1a*aMG1qLLHZu
%F2BbZ-eq/()0XXm5u>!%-J!qg5)jO3Qoegid48C"Hoa#hcN/e+)Vu\"8#uiRf_U,h,T=m<@P/p.UDFclc;;Tn15S`7A)NMUH!q,B
%V%5H6U0K4tH\F<q2`cW]W1ouE`%%_+Aj'L`A`DDk*ui*2E\dRYLA9,FTLjN'SgbcPAQYQeQj?F"iRF3ee**GZL9:=GOtee?!P="1
%!2IV:g8.iXRCj_b#n'qc[u<j+Uuk"E=5C(kQa5KtOtP+mm,CJon3O+$rbK/c/&$@R_&@.H%Xknfnhhgu6a>='H="$qrC(TVK8b^5
%Xi;1TL>IIWKj$F%D7GfJ6[>GQB326r5^)QRC=VNGlL;DciG,h@og\2QeMsbn)h6A67dsf^QcfN4^-.Y;-)gi5kdjf28enl$V74Vl
%;(B1tOJoIMiXB2'.sskK+F/>-ZLr*C_i()._.iZAW*ZRV_R6q@4k(t\>`8(6]r9L,r4:h7C-S<)9jWmqS=nt?f,F=&noFAf9RsRa
%QqhqlJ"d0R/nZ5Yg+f0E[c-f-mE,=ZT8BBR]b)0F)rLTI&69F5qP2G!]:/Fn[(\E3[Fai%b8ttJ0M)I'@%/RhO?72^H=\lZ!%uNI
%6U"%?#^%cXB^(B\roSQPI5FIObMB8V"1fH_L==$Da-3f"fC6tS8LhB+9Doc$mJU%2gaj,FXWCOs/QQu@:?f?,iVbr_JSZ/)mJp#9
%WOVdXSPftcc]q[nULIl:pp1UTZHF'>`uYFcr+cNO)dmB?B0ZZu?l-EKB"^U,.jZ:M\mjQn_P^IqoO>_AD,7?5Ft)8>S]bU;hthUu
%auZE7W*gl);)q]5)A;G&K\L%i?2^RB95Emn4aY#j>Z',CW`'lEN-VD&[GO-a&N8pF4m_4jbIb-?k2i(ejn8#o;J)6/&K\\&\QPX[
%#CSjopO`(OI;&oSDh;'X^PR/"0p@^.N1'O=AGGNq),p>KIVDj&60m+LJ,_</6gk8JXZCg(#bQn&c%!EpcR`\F^>a#d%]T'cW3d`a
%H&,OMn[m0)rIG.5R[:[0/bSGXTIb'8noJp6:KoU8Q@'Qu#erJ#mshonNu5]j[tpHdk84su"C?VFU)Bi/!k\oco3C$+LO?lMc+qPd
%0rnti_kU"YNtipD9f))H%lTt$)rOLR)]0q#Xj!jY"BM7ro\]]D.]WX.N>cXpK<0"GFuYTN-X(%I(Cqi2/V8KeNbBgk#dV1d#9-De
%9g0WJlO$jZi:'!LAdF&9hS%m80^E>9Dje>':h3U.F!X/p]gbdHU(A3J[N,JXYA5@]hsm5t#LiAe"'b1QY4#O]54B_?G1I%K%nh#N
%FDcsH+joRf".)cAL<J#$NbkW!%GDQGbo4at&kt=k/*j^:T4i=/_A#'l=JA5[MM$^(/HWhr1\"9GmD!SMaXP+SS4(#uW+,l14k^HD
%jYZK'44>mgNOJ"3$<q&i%_6g?T&od!WUPHMf5QLmi,,j6/E)A@Z(7uVd4FIoXTTWpD(8_BP,8!XSY@J-5e(5LRV5u[3cq`8U=&T&
%A9+nBMk6.S9Jfr+^bWPr@ORLa![<<YPe%1UQrmSF0`chHD$[)GNN['DRFqh5GAj[=4]m9!-&*?1ZA1iKAe12CAR1Ae-=d>s!TJHL
%08!(bToNd)Cr7T+D<&<hAqEGsRM%_,frCH.4C#fNU1k97,$nR-R"S-(M'8OP)kS6.TX2)n?9XKfeYGq"AsI.6$2V,)JfO[D_^C[E
%T\:m;:m=W&X+KDOaekG=PHC:b'>oMd+>Ied=X4b"F\I=ZLDp<`[4r'42RB";CGE.d[VGZI'J70U<.YEYVTP?njnCM<70l<-g5/j!
%;N))K3F&j=VVG^_-Lp/9RLph.NB'IKJRQS%(j`\8n.+Os>uklGV]hI%:oF@t9\(m+gW,$RiN#M773>e`2j(,8[&Sa))1FhD_C(gJ
%%\$,$6>VEk1Mkl6.j4n!)`hn?[!^aRqBq\@q[.B"G!Lr764DCF7/N9C1E4'!=VG[>FQ9.H,IV1VFS'7o[KRuid,)&X5u%!B0@(79
%om'`%Qq6/^["1Y&D)+&$5!kJ&OtBIF(lh=ci7YmnT&K!9E-3pLBFLC3>"m8H1[f#s#e(,^0q`Fu^pO!)5tm5t(/79L77GHCkicS`
%a73[pK[>DL#*.T\ZYkkI>t7a*D+hZ\N5-`g`J[#PAU*!Fdq0K]87/tm<o`ss:12F<5eGu_3!]%)IahoEJ-0e1#VPcp2IK_$/R]=D
%#K63R^Sdil2-_pl+93acmLcPBM+Lk>AZqiiR6E?G1['ID3YLoF!LSTdD)Y"'Ms1hqHY-aeQir3i(m[d3Zr3!*G2J-)+pZf&nDo,"
%Y4!Z3pl-E#Y8ifm"j=4A)VtV2!+0#aOX#EZQ=YWn3!g##/-g2TM5Q2:$%sYZ-L@tL)"B29p=nRY#cV;>ENOrW^r%cuOut_"kutq.
%"4K'jS=#,sE#a=:E[Y3e/bFhN.fe4ED62G<.^2X02J=t5/*BYig^diP;hn>ZZ)[o)n#e>%&a3!2WG%dri(Y193mr9t#Y.SrGROoH
%;Qmm$-C=FY[t^JSY&5Ko'"\M=ch7@\GLJHqZQ.HEUgRuO!?2glr$8D)"KqC7_,(fIa<DLV"k/&)Bd*lCab#@b]=o^RC#ZdU6&o`k
%dZIp+PF;)L=;X#(e$f/c-^?@V3fr>:GGIS8AB!2H7T7aV1gC(&K7Tj2"6i@SmLbr-E.QjGi[R,_$SrWsP"dhD!X&$,Kt&2!3#!]t
%BpFe%2Z\Y-gDsB[e"En3c>D9GO4:KnU#/*FM"&_k:aLqCW>UIa$GL;F:aMdXfVUKf(+G#3,2."'p2(q_#sL`qXrH#F6%jMA2]7@N
%OijT.O_5^2CjOM:&Ii(0j1R_56<Hi1+mESC:(T&2eW1?\EWcr:E/Ig6'/Cee`M]"&_^7:e158mi@0gpol=Mf<ZlrLj\AZBm<k^/T
%\<0;J(JR<=&YCjiPJQ]N5$Z.MZ6i:1Zn%/+H,J_jRR*MkHji9d-(3Ao7;;iX**\=3B#K@tVPg=<Ki)"Z+6@mS51A,n*71.bUZ\"r
%HZWZdW9\[H*Jn?Pnu*bWf4FqM@a<u>+>OM^o8$W\RLMO/)>_3@8P9>"Vd(2G1L1O.3eJ28,]j$PDm?l?$hpHNC`CdT8YfP(84o?.
%-bc:1Tb=rAXRcIFcV;."5^3b^T[li:'cIZ)")4XF3$KH,9cheS'1Ybb@kq&/oHj9R8JDWnH!1Ls=?Tu0!)-rrp&dbtkY8AI5-,UK
%.0pDb"=82t>pp8OfC1XfpC-n]eI5*rOG&lS/C>n;a;Q5bB+4:G#?_/%-4ADJmoN"M41e$*+j9q5imUo'Ahfi2_t67D2#e)[A/@>G
%CEWm%YVor=dgY1=1F%Ps`,i:"G?g,>`-A[p,B7WW5.ZDG9N7$BE!.5'!M\(?Lk&P+&Tu%k8(E_C^$e:1KFD:;9E@pU,)9u$h;n?Q
%Qs(T:KL%Aq^b12f23l`1:"Ji+Y'E;EU/lLa:`LH8:2heebJ]jFDnu9[AVSeFKuEON&4,#sQH0[_Cl<ERg&iYFhmXcH"r.;=8.9/U
%&Efq6XO:UK2-Go87-Hq8#F!78\PFH^9N+@0A?NNqCb8dh?jMN;M0/A,9mjI@Lutu$-B&OO;RB<(RhTfbC2;dA#>EsX/IeeQRc"Pc
%7M@JaUR13L_J%$'N!4"4fE;t!"sT9p0BCk/fGg.CCTJ\t2+=%!7O)<fGeVAri*pt<aRYkFOF7`DmG[A;,H];AJq7S(Wp!uLS_:Zh
%+=3)rg`d@X,F^DpF"utD3>UX#l%/a\X:e#+.NO-VkXH6>-$1A1BFB^!Z@X@!dJ+tg"BgQ"q+U[=Rgp8E5ADt@djIIoo)eS"CmWAt
%+OasBH4\Id,4T'64esH^<)_@\-sLpuh\Kla!An*1ckKGc_@qNh2\-.geR+[-!Qm'?X3X_,qVm]Z-715C(52b@kpmO3^6/r"'*D_H
%VtS>R!J+`qIfM''<(^o%krff(-G)F6R<XT@>N.7^$OtNk87>K&?cLTrET*P,Z\BuHP\AHpT8]?N4AE+F+=`3Z$7r&D\@n[[[S^_-
%en6IjAK%Oe[Vu5a%$qCQJ;M;-7spWg^(SVY:u!`,DR.r"cY@VKY).IP<i;U`\rJ:mdknJXlG4.UU0aXM"7`B8;/b45*?Afj/?lqm
%6DK,H<0OfE$<UJodRE`I$KlP"[r\5+q^a$bUaV?/Nl<3Ts)8-/+?DC&H8Mm8pi>YA-GHN`!o-?u:mGMPjM@dM+=BQRK!Nne"K!2W
%Th?`0DY4DMjL4bR5_V+\es8u_PT,bbL]R4##V>BM$^?T=/--':6P_57J@s"r@N>$5Ogr75BM00R$Y%(RXLtlr-E8c>KRbCQ[\T5p
%QZPeE\L75)Si,/W5g7c:L/[H9TMsH5:3]:?=DSA$ibs_#LD><2m3\=p3nEKQP-D;W:Dg#PV7dZJTiTSWD!ks?QBj24@EZ!.+j\#d
%ltYr`3+K8>#cdD(Rs>u.BY@s)h7UsnS^L``-DhEX6CE-)d:gV^5-.E9e1Pi]=ZA6%Gb%Qe;9ic:5YDO6rd7L[Ta*Fm:"i4DM)@Wu
%7$B"\'[:D[3bTPNN6%RV@T2Ve6ej^'%RT:e*$Ib>f,(QY4b>;]]*k+M(8h2tq^fi\;^1kV%"]F9K-I;[C),#?8sXlJ@6o5nXMKVp
%$rt7T!j+^lG\n_Pm((h80c]SSKOD$O]O@dpqN/tE$ZQBkf9UC5Zls%FjR?9<,qACtpHo,$'Kd`17Wtbuf0gn<+lJ`hT+R)F/>,T*
%\k5*+>/!'bhl^G_\0#Il*ZRLc9ao<oOiLEkJKZL6[ElWZ;[-^X`&`aY6-q%#pGq$G*Z+UP8V&SB(]IB@SC.aBc6EL<?9ru?cC[aF
%J?>Wu!,+c:J=9.KL%E6ILnTE'OFVK,fMlfGR"@f'jO4=#dc`tq<DZ.)TIQCH$Sn"@P0h^Cd2^1?IKW)ia"oHUcVGI\048o4]OqT*
%WXn6M-DCM!JWT_Ej=>CCd,G<5L`CP%_aNj'&Cs_ne^jUh-3s&\C_j9'&,YSe:jF5:",k'-#R0uKZQRe8=?M4r/4Fls%oGjZ0iW(L
%2\j.<.#QMH3!gKI1+/p<`3K\P%%+/mEah8;=X6"U;g_H\p#5]jVP7JGOG8oaPG`p^$4JA6ThA'U5oH7AD-D$'lj[qe&!798KnL\*
%K_5rVHMT>[8X!se9/bK)YE\X/l/G&$+[_1uJf(eFZ>%4T-T\%MS0bgW+RaS,aWs?rcWVm\JM1QUR/uQ)MHQ,!IKOs5$R.E(dR8[f
%A2>5\`s`grLr7l(#UJDW=YO8HE!*N\0:B%:_&J,g;U?dBmRR`T9e70%-HH2k,nX0=H5U[#:m3D5&^P71Figc(ltqDDY`CJakqqT9
%,+Hg7fnL(_;@)7F2.0>o*cYF@+N9.H)8=?M,D&C)r65PI;A%r_>oX8e.%![4@tF__U$i>&>)4Qc9FM1u\43\Kb\7B/@4%)A"X1gm
%#bS11LfYnM9)Ik"*cI))fKqNJ%g'X?^hpocjG9LgDiMPTU`\tI*=4\m!'-!:,YL+L5sZ]._9u"S/.JgLa<(R'@Nf966ZRG_*B9[Y
%dbtsq_Pg"XZJc?u'25Vi64+\kTMXY$!0KpoET6(D2jjkD+Io;>.cSo6`B2&Zc7D84g,rU"L8SkM6\\L-2%au3E*D!P26X@FRKWb]
%/Ad*M&@Ss]&nFdGH"ltBVa`a\ao2lB#85Dr"N#@b<<M4kSF'L97G#G./@IRC?5kZK&\\`<!Y80ZMu[#]G_U_U]A.!$^td.BJ`-mC
%Q\;3?X['"-\3QguU"V<;p?>C9'*$lb/lN=/juB4q$/9d-aXUh;^e(1i-#eEP)L:9!)I2h$+tO].i\9QVA--2c(7_]Hj-i<qeDZ$Y
%+u"Or;#c<S&d[O(eYq+h6/-.kbJE2$[_uZ#_1Zt<V,tJF"<X23/@&2*+V,J^nC2&,,s@3kgs:daA75[Jb0fQYJ[)gR19>ONVRt((
%Z-tC,R1Ch/0OV^Lio4`@[m1S=!/\mRV1NOt\AE>QSLuQ9d(n23Od_c4B:EQ9I63IdoK^nB9P(h0->YJ)PlR(9L&gB<YTI\^kqFU'
%fWbLo3J`0SeI[n2,Ud=R&/&BK0-(JNE:XlbNX,oF*j[6O`M8(4?8EJQ,`t77&Uf>1Ya^;>*.R!L_Ms*-$uJW[/BiVk#8TVhBPMGM
%Mk,K[1:2iJE9O#.0csrE[9]((;%mZt[\Gj&ge&s1JSI9nc?CsO"*#/#=<ME#)&%\#OpM4,M:o5)8mKK^LIj_Gg%5@c4%5fhEZEHr
%ab"JC)oLKQKi50&%e'uR=e\,Uiki@H0A*+V'D:$oL1M6!!O)b`e$KN2D&pfomFDmP'G-(6!T"cH/$8/^YRo+LZr1;J0YZ`Zi5oAA
%7._0R5TiKV5$j'hR_E6@a)Em,n?aB0PjFfsQUlK;-&@1DRbg3!G7\$48i')(+G1J^N`e6Z'/u+&hBglfS'B\r(^]M.RBf_D8^D`&
%8VQaZ)=_03T/@]%0\HGbUfLkNS$^!&%=p>#87j*M4rQ"jO\,4(8fNa?b"+W/:(!snM)iJNOrU'">gtJ4+W>4u<:,8<jTMZI+OUL/
%ESfGB$EGT]@6:W0nV'^Ypm8W];b;'d',[8+BYrKqP,#uJHI`XoFK5R#Z80PLLrQ*Q-`>Kh>/_!'(Nk[fLkZk!2C-K30d6EB'pN)f
%=tB0[(=+l(Z$i`OOWE\l7MVppL(Xql_;DG];o8oQS84$kk<]8];;mAq6AnWL]U+*6k%9=6#Z*Q+r;]Q2?d`tEMC@e[#("$#-qc)"
%i(7jon57=C5Wk(/%;Lg=+g,+;iW>[e%=$dgh7"uh9bUaH8r-+u0Zc%/[ZjhF/D*'q)jn?Pa`FU:JU1F-2M\g4*)W2mS!IaI0^"%<
%D,Q'-/E'E/s$qZG^rhdtkVUp<ioRU^NYXrMk(U5o'#IaqG`]_D/<?R*D"fub*LU;og9(e@<*9kB1pG[$KjU'G%%chT;@l22g@qhD
%SdZFNqi5=JgJVk$_J*i@6:XX-!bna;CCP1Nh\KB-X#3/7VW_,m#`.u*UXIU,NTDDMMP)rl:9fE3_0o'S&fB>7EW_l<8(N=UYon+L
%[H#BF>F+6*66F#(!cf\aJH-'sbWo]'D6LA[3A^`,b=';"Pnl_l$N1@`%$SSjCkg>4OtnHn1S'NCl%2a?HqY!1SQHBk+9mC+.T[U.
%,]Y'd[.iBc`Qf0Zh12=TE)Vu7*"jr&Z+kh8`f9mRbWtg*_Y*)KAo2gP@>Gc9XZp@<iOSZ$.u#3D_BT-;JNqaI\JU4:D."\_a-OhT
%6d3Y\O`/lE]01t(]:gVq<l*oYlOF]2]9^9&(U?sRCVYleVDNRLUo5d:DJ%NH1uK5S.jJ:*KX3'blj"?^Wu:Q@Tb'M!A4,i"MQV]Z
%FEh")NYr'4;jF*mD!&"T^`I/:$u@!l@.:M^nq4!ZJC]d(32ZBq_9I`4*Uu))A*UU2Lk));lr:5;h;Vp#38hY9SU!-7dG_dE3:YH+
%&RU.am"L+jb@H6(5O-t.=+.<=/k`'rhh1.E8tSiV91g"N<1L<!lj2rS%)Thro,2'8gjmA8R+9-F?.0C`-]'Tr@L6U7c7.ff#SqE'
%MF)".f8/O.\ct#@iP7k)^9<0*!7l;pBdFEhT(PdS&'j<JA&u[H]6\J*<d#3u.<q`s&=`%r@Qk9[9562C/Nj6j9/iJ<cQq]`2soc!
%Ec'qiS18H5ap,lsgXt$>RI!C@?kdo[8<4?R%F<V.(1Q-<j;i:9,YTUK0^Y"X`q4'klNajS"M_GQ9gk)M_J?FrbE>m3G4+Qt[\d=L
%f-H"dA6L(S%sI<(ZLj=I!5;Q=T4K]JnSqd]e-GC&\En75LR!0IPOX=Bq]".e%pDN4Q4lgm(m&"]LuB?Y(snD@Z?GbYJ:TMdqVqrS
%p9Gkgbi8sREl4(!"Z/2idhc>p!bPag'?(d7cSbn6350niNna9H(G#]@?!$np+nW!DfCb?tKd!,gVYGbfg"V($QZ-gQD5p<@j]H=Y
%8:\OufZ5o?=\/u'$oT*=VKcHM8Rl>R#4e8-?6m=:NWG;$bY0!aYS"s`66duh0\@?JAap]D(iUS5E*0Z4!!BB&pd--\!/&NY:JO:_
%(p$!'2K=6JBV=HT,/?H!3,?,WGJX=^Eh?SH.n:0Ub7?p5844:GM:_(g(.T3\)93=bGSjl);WqNe9M^<B8Q*]o5a[Qci'rQ$5r-<-
%?L.^YM(eo3*DRW7+q19-'>3[s$6osH:A8dH8uNC7P5iD<TPO8"+s?/rXNs1V0uVClA1>^0ZnN[5aQ&g(,E:oD1RVsLCqbZ)]J,K=
%WV8Ag,t^(0pM<a>*9DlDRVAG:K&d9.I#g'aJPu\<+K^BPUabB4M,]^eD)6g&.tJe6:Z+c1"Rt/Eiel]bCrV%AA/1'q=3_IKlAa$h
%(rp$BFA3=(e+5ulL090WBfahTi==mJ(nQac&/>Q>(eBu0`)1J->F]TIjpdjR#1!R/NHIEqIh<QP;gNCpEN?o7d/p,RYs1oJ8OWb(
%>h'<E>SsS5l=[VF^5XLg=q]UpHnl$8^I-<=H@;P2CXX!l73&$%%)0toKcpfW9k$M"[d"\5mZ%Gl,=j"J!Nor'*Q9ErJP8MQ9nk&-
%lh:O.nJ;R5]1?[;g4R]m:/9!q2#\mm0kADd:73.CPJ#g5e:Ek'^_%5WLH9D.B##=TKKAH2fUs$_TUdU4!>=Yt/KoJXdQUBcFkFd7
%iUBSde:E(?WJt)AF>.k%+G()G0XA=MqW(J.QG7N@&haW&*T/QafWS_bK11C:3g[cG,_^YS$aql5'@+a,doOB_Tq/S2?lW"uZM5po
%%h`E#mEapAXe[F-AAu\s<PDt9IH=nA"KdF;C'TV$^BDW90B'jc'(C=uo"qW0%[LM)E`jOoQ2i7@D(62(9<];"lALq3.\kW5OB>)i
%QPfn1l7a*-]'5>!WFRLNY]?sY#di4-&<Km3YTkD*/HHQCF+'fs$0RKC21d5[_Qq1eos:?i*]mqKI76Y!psQ9YC>@uc8YSeN-!FN3
%>'73*;e]f-3Ei/E7?A54nY7d?Jk\..5+m-^%5I,-BZUg!YF1aTrNH\'hXVr[a=L.ps$b4`X5W*C$W;j&2pdEkLL']1`(uR&]--o'
%O9hZm])][l^sS=4B"RglEVh['(q:dZ&B86Z/.B,j99lK`]/pG5J3#eol#<^:c&e#h$.mU6QQb9n=4d\ePE*/Oiil(];$T]QFe"Z>
%U1an<h=1>QPEt11Vg:D@W:K%T_Vl,%;$\Gp(ktWqUP/`6`3bBB94E<H`u'\I\,g9H(UYjghKh5k(.N8+XW2C:)7ef@6kl%t8`uO;
%U5@h9E40Yi,OeG*qU'8=VDsm)Ct1h<jDZ*-EI-ct:"kI2(Dq:R_2*gbJG6X#`UATd0mP6%1p_9T8BN"+>&iY+OMt:oX@+n$YB7$.
%0+eV%It3]@)[Q^Wlb+]-Ugl^Sjr+kodBOf0R=+fT)%.@Q"PO+<^._"J=L:-K#1AVVoHQYqZQ-kRck(G;f;*/cC?p[468C*oROrt&
%Ej2p+S?JL"(q2&1o&46+T^INuL?TJ^Op#YNeUbhN1uuouN3X2"CJ2i:#9"Uf$Eh>lcU.2eh!_M15%baA:'o-jFu3n,]oE:+3#Y0k
%KVQLupIuJ6_GV(TFH3(]!6jIR1--=aLSgUe50tu%`1k+Z<E>h[!Qu\AAM0R1"sLtAQ[f&:k5n?(SniE6Q+jU:AJqeuf+nk5fOX5^
%A]4<g*lLPsAg6R#[c3:QFQf8Z=mUB1m.Y*p7?U<#\V'bfCnNa-065\tnncV\ojiXeSemR(QKZ'j3[HuuTqR*'lmKg8b*<U"2T'Yt
%AAso4+Y?rSFd,MAG1]N"g,^NPiBkGm*-5M,`**D3\;6$0HXU:g7&d\^9errkG,u$m/<'a)I">8;.<T$TD&<S9-NZq[$!<?<&dFZs
%E"&S"`+*<u>k3$DiZnns^!KWD0L!G[(Z.]@i`!(WE.o_J:Os>8(?\R@_G_Qnc]`f=4G>@C>u#DJ_c,o@ZU3Pl(nLem-:<A*eN,t7
%F__%O]5]hr27VS&j&84f^u4"W7!o=d=JhkLDB,8M^kUo!L%-VK",TPri`#bk:O!4>FB"LJl*+l:MRP>QSmmFa0TQa^;eWH_q(rLU
%iE;eVHR-L-BN:p?'2*Sm(72dbe-.cQ!pc\-@n@gFe+c)r.4?TqA*OVXd^<b-.>feUEWFhFW*gNuDK:kW#g@<pM'g'`/t9Z/_:h)?
%1uEU&$8i8nlu@DhZU<$-b_s!jNZ22+QB!?'OJRoK''Y.Cc?4Q$oRWYk#1M0R!aP=&F;2p*=H`neA<T])!=,#Y=>/QWG)js";er.)
%95H!JF#oWD9Gkm&:=R:;@mCcrH7L!Hc<lsgOr;KoH9;r1L[PVPaHX&R5_JCJ8<,o]p0?BIe$/_(Xrd\QaP7)d!7rqpZ]q:2N/B-I
%+G=2s/.m1-\ul(S3+SKu,iFUDh$m$uRrZ@=L&cSbDNYk-!n)a"n)is%A#79af<p[m]p?/<0#pPpU<OUQ+5WjU7U/DaJ\IQ;j76P2
%cjKH%IA7("nHB*[7`(tZ91.:EiZ"53i8F=C/g#f$.?Yp6.KcnL3%s%KTSgWF[[1e;Qaeqih4[d7Ra]CR3kM/j$FmTkK#"SYL?95Q
%N[&eIO'pXqp(1,7LMqXq'%)C8e'a)F\6g@>ZcsY&S+i$RI`F4ODaslL%b+D(#7qFnQLdR$@4d<H_EZ6NSBt.B9=sa7#E`N+caX/s
%%`eot;R-OBPLLmT&an<2U6csJ8r6iIK#7T0V;[^5Y0$&8h9o,;57WFM8T_iZBJ+@hCpUZ#9G.N>k_hi'657?A>#XE>#o&WY_1!"#
%fr)jB)e*41dY!&PX5:FjCh$`9,nibi=q+:)F`#FO`f)1$9[j'Y%92>J3'Dq$$ncXP3f.*4#LX$g!nLnC/AC#"S%`.Z_BS$s@,aPU
%'AQ4!Kl9cW_;g8iTH-1C$'`DGJ-r,LLE0.P@`L*c'hD$N"^I<]_5_K396Xc8Ye^_UL[-9"MXiW4;@.p(1p+r=E?-r\OCaIfA+p'c
%)-k3KT`N1?;l4sH08,T.Z;[T8iWFRZ<Cu=T9_j(@h-rMlUjS(P;[M/lb3*47EL]Ks5*om/\T^kE!fdB`]3LT[@@+K`kT@$li))h*
%2K&-a&21SnGjA`VZ=^p1.a0U)KOBWN"(?qSTR7IJ@APBLI,*ej*&gDbrXb.r.KA,)-G]ZG$HBTc[im1XE@Y9;S5RZjAk]1fTQ'Q5
%(i+1b%IVo<>*n?_g9+\.LALu6!<#?D\00HDW>`99c1-%c"M"$,-<IDRT.`"lbu94%94X"#OnP^g9qG<UP9s3ECpChmM$0R#ObuZN
%IY$K/_=;2,:s=<^-I#\X(Hm[&nmXSe'I5pu3TDk$/s?+"*VA\+6G'NVi<FmP=JAfN]:<OAO(3%j+^H1V)]im:OZC7o$f'1J,rqW?
%i3F]1HjOZK.QLl(B*60_,[2&n9]$jV/t$/YklNqp)9u;l'q,,_.(6Q\A'UEm.X[_Jm3>72H0UUTFNHeN"JUR6VltO6IO\Ai_pK/g
%c'X[2Bj(GH.'Ak<*iRK:QOktnOR\pACWT!FF,[nYFD0Jt_5tK=/ir7LOGH;Lo*4K2A>#TC.I'_Y/p5":U+2]_!I_qpJ=(D&W6L1;
%Af#P$WY'4C5_ZEDBn;5nRmKd<-#aI)DM]3/>e)#*)Z7a%4Z>)!RQOg6Mt'udlR\5/fPo6rSh=(W!TtaZbo7G8]&nekf80cTHF"8U
%eAOU`MD,I:E1[l46?F3'#\/8ioqP25L8R-uCEb4,,S_sPajYd+"XVR&_L)_Mcm?EY>oEIqSFCb7YRSI]PC2337K!Y*j9N.6Y0";W
%L?bRJNdkJ@9]?rDETnUWc3`\M#?'KLk*rhD(NHhq9tY!QngVrl-KmO-+!S<!LBpN2$>2NE'g%2\&P`UDGE-NRBr.W0?M#A?b1X@.
%!UA6^:;#nFkO:qW8jMnaVEDjk6W[GXN/1IQR[@4kpk9EW#3&e,11dj\Xprc-,0sgp\;q8$*MHEu/JhpgQ&aaC64>gZ<0[k^AfMHt
%TN\)YLO)7Zgl!j*pY0LO'86s((s8!Y0(2H?`Pf*"eUJ9<W5rD;MU0/(OsZ$l5f-aPIhW+^V&Q$1I(+-O/3]!]_;nHq.*\X\pZTZA
%%,(4oP,/[06disc*t@[sgK^mF_2WEqOconcH_$)b*LeBW6jXF7*&*0rbQgRR\FSV:U_+!EmT[<MjJ#a0>^uSWTW?Dp_)4:'N[Dnh
%/F>VZ%GVl8R,LXEL<&P9bRB`5/-AXGOX-N#Ec=Y0G/KacTWZ2+K)f!@\PA.shN<MaLC5.+\6-Qg`3>*k,f"7D4*'Rk:XjXp!@66'
%!o['3.?19lR-=iaX2d*1<1)S]%0eE%j5WhYC*>CGB._K,?*<T.!<I3-E&#$O[%L_m/CJKA5[5Qub]rS/(*n@E"RU63'[EF,/Ii/n
%nR)m&E./EXI\=qn%i(%#>K.KV)2O/jpB](gSg.0!DSt.b\h%_A2Nt,X!0K%q.nL1]AHL;3rQ9S^Dq%%&Eofl3BT"NfEcj2s2,PgM
%f#<i/qL",7HL.[Ig+n(PgTCm_7\D?ROI-qa*gI[Z$%XPA$PXfjo,gBhpO?,-ZD)(n\u:DOBo;Eme-YaN3#7HW)PJ_modEI2!MD`o
%k:7E'aIbcN'HG5\a297,O,+F$a_o2"Zu)p7E[f-)6WXu&Z[_d?.sS=t>d0hs\enhdDKrRWD\d%oMnV95E[!3c`)tU$]S*V3k:f/P
%+O5\Y]mcSHTcpqeqnUf;Ub\4WL%s`cE*S-TCGPH0E]k4YDX2t4+OjKi(>KQJq$er5_d^LTD2Gn])F0-hD`"@7Yi?$*P%]sfdU1p4
%6YR.XRus3k\UrodQ'Bf:e4h<s5Jp_k4Ro'tY12EMNDh-del95*)D^)AOhZVraKe>N53sL;!)a.6#"OE#ri,A%pfo[CMf+af`2XfR
%FG_"RIMi3im&me$m,!0KZ?X*^:3n!Y6-Ns?*,Yjpog"NpYmjqW9[\g9D1DdX-CpLU#-L"gIBW0!T[i$YpLkMU`\:KTO1#'>0tf8-
%*Gtt+SKs+Ug]sc3^/SAFpL+?;@4;"k-Slpu0Br(5;V@AK%[0lnSO+!78d_3T$6_roKQf(u'OoeHTg]I9Kh2XnY9#,ObTXgp=hqi!
%-kSZV2%H!H8[uM[1(gh8`3,f8Vd\n<N*NQ4aGNVf3Be`O_$6h1";HNL7#Qh@b#PDQ&MrO7VSXB7>QrOf9oR7:L\eTAU*6VDH'l`e
%`ae?#NiZWNQpHIk:B,EueJQsGVW7!J..Ce5*#XcINLPa>pmE9u/mXgd`VpU_;T2=+ilt;#9uXO/;#<8WF`g%%%\omC@U;Xro!"66
%$YANl'c.>ei:n!&'5fI-\i)HEf%@IU<O\7+O2@2,p'*kNW1/ET'aB"e_C"EV&11Wk1Mi$OiHH-S2BDqSRP$hfl;GOdfM\CXK</Ob
%\S%<#WXMEYZ8T?`'?`RDP)#2@JKjIB_TPD">DtIA/ft)uf<@SKP9iXPi@RO-%+bm\P7VcZ=,Y6c-@t<B=BlCpl3KV2_po#%^-X,G
%?i+6[5fXgSi^0k%OrL#Mm^cUtnt:+ucT1="`%c=90!=pd*]%n;$b)7ENu:sVUf(fHbc'XD&g9I$Yc7Aa_q"r)MA_A:)$3ofbbc)7
%<:%a5_IL#6@=c+9HmOQsd[Xjs%q0A\l_AGigd6.3]j&Wh:P=lm-hAb0lPcXLm=f_b1XnV$^<kt)f25+IE6HMqloq?_f?3IEBGpZk
%"PE^(b5r3iQ8iK39+&O!CM5@^9$qYS4n]3Oh0m3ffOG[Sr=ERQE;d+28(?CG[a&1q\5)+=.U6H?huK,sY`"CSlpipM)4Sh#nnia?
%VJYTZq6!+CV1fEu`^Q!QQ2h$]Hjr:r"L.B_Bk+!\-YFu4_SSPV;K>uJ0Aqc/Ojj?)VB=O<lZ3g/W$@7?Gt3G-Dh=(>VIX)mW";8'
%HnV:-7nPh2W.]\#B&jOrg#<PWeC=,X<"]`mY3qn6#-O!22aoI$b;k];OKDfhhC)]O/fVu+HQ\.RM,pi<m5?`\oi?T4:4oE%UP=qT
%l:ZtMh$H7Ua6jfndA1F):PQ!A7-%sCK>Cb(fKF<@-LLF4QPO_&!=4H"K_03Gq8N$3Oep,k%s7h:^Vtl03nh0qLL\\olAqP!c"qmi
%rB22@,^^+lkmG1QFjU[FB&H=U?B_]Vd,Zq16ja7`^>YMh=LeauLiY]:)N%^SL+u=kA9f<:Mnk3%aeXRA[!`sRjP/_=J#.Z5ifgm7
%2?['_Ca8l]=ZZ0$V'K8FT'&__aGBA'H,GB?*6gJFWUFWd95Ij2gi`6)TH^m!NAcZO!ussZRKU/j"*.a"Oh,r%-OB[K-J)r3f5j*(
%Xb3eji0f[kILh2[05*XTMgk142Sj@C3]14KL.EE$r(,\C@dn.HA7'Xj/O`ZMc"ImIdWiRZnA7ohpj+,:)XCQ$Eel^N4Oe'--<oM]
%I_1+7KbLI[9Dm)`@efNj'US8Q>'q>cP8$EMc]tS/(a*4XlKBLAmG8T6_in.30dNoNf#Q$*h.k\:hX+pu69NmWdaAA;\.,qsm-=3C
%jm,l%U]G7$'9^G4._]i-<>49nf[g+SY;A+=81;is?q\d1^b^]5@^%]S>HT3"$Ah7CE/kb1;dHB)KGu'mDFl#Kf\mB"#h.a)r^a0N
%KOcJl:?[U)k(g!AfsG4]3DK]Tip+jBd)H23Peo;H@8lo>"g7eSmmmbq!aA+_m_i?2S<VoVd_cg8:/-kq+]mSKH21%Q't@ANXsFX#
%"b+W*>b`HDi34P8SW)2&T=,Eug*'g2S'(8#JhQVmb0+l2T^Bc(9PjBr!p_J/6kSAZ(<n.%@U*:u8`Nm2$YZqbjX5"u4*muDKt+q9
%\bbS[KF=kh]DQ,u&/Y+$OT$9\!h*@RMgB=CXVTgW1*[:JA]_VZ5HI$1pGLT<>csCaA4`nDPcgI7'NBqEiIWbMPt(VMb9:mC.(Hne
%6Xm8lhX&,0BM=7iPO?CoLPht'?i0c,&`')tWaps@NR7]QW@,t$4q;Mq43jq!.771W6';Ld=TQ',]F9Ff,[MmHPSgnq!u3l$[EEZ*
%,lHYDKk\9<..S+-i8iJ^7YF(7NauO=kpu`'&P%5m;RqZj:UCa`SHO/tH8YUe&<C+g.#MaE\l?<o=[29-ooT[+mgB^$&)cE5jB/Qq
%A?e?\_#";0TSe!);2Ze5;:N(jT@\/iW)([FF@B`NJu!07>ia^2Us%?@Q13ME/\uquqI+gV>LP(5V91*Jc-RZ_<MQfb>T&/sB+R)-
%eZc7XUB;[8/Lg>=73'ub>O"j3INt(;/68u%BP<;o);,r!d[r^RheU98(Z&eXG<tItWdJ8a#a`&b]Je+n_t^@p(+NZtBG._W29+`V
%]OX7UP?7V)@u$=X#_BQJUCeuc+2(e%OV1H'%H"S508GHTj7e6u&3;Nta.T6L9[o3"O'WG)G]Q$Mq.jZ34W70=0FIJo0[nLSe)2$m
%H-hX9-d!+l?q:Q=KqD6^*Cfgm@pFfskI".]H;"C6c7]Dh]tRYL<Zi)Sg<h:dAdBCPb2P!AC_W67;1_gMK-36\mTe3NJ"Mo5Gfd2i
%i11Y@/oh2!M&8YB[GRGM$f3;.Fn"6I,bKgej%<2O=;'8T`UCdoGn-XL-rqknKd^''iAj1p[D$#cQY`l/-I0C>R!:GU=G6?Te!)+=
%Efq];rVZL7>N_"@EmpX+]a&ZufkA)G<s-jndhtul<p8k0(90joM]JW6P0`QD-Skn\T#fY>`C/Y-pS;CY?CC*"hBcBGRg"7WQfX)P
%Cc1,hC.Ji?<O)o>!0sX&^S`<Nl4SB"L.aAfH26-l(!1TYY7"j`E-N`8?K@382f-@;nH.a2&K&o7KCJ.C$<"h'jU;n+1\sO@M,q>/
%KU&=,<7p7t.H*P&A2f9<-+TEdrf4K1h@=;p$l6878bp3$Omp_O8JD[=$q=[m`0@iiT8_A;G"b.4N]%/XT2tt.ac`j9g7D(=j*YdZ
%6\I9$7XsFQ$;;3/=QSYpK)Ql*O&P]C`C3fQ5S49.l:U;sik'AGa<^5Xp$UfcFlgL+14R%Q30\^6@5Pfg&]-_uQp!qGk=s`qiQ/VQ
%kSNTQr73WYZadhTg]0WE'1/#B++]>GL=GQH\69G:"tNMJKT)t*l,]I6Dj3MfC%I7k"r?h%DsFqcJoI93L\.:`SkIia?q7jIYlE@=
%GHq,Hp>2ZJP9d]egCrLpa:1'1'G:?3^6Fd*5X5[OKg_S8!cb,,$".cVNmpDqHc:&dGso=>hWjC/b*KCWHI6je,N91,E&Y7eA&f:L
%8Q5G0[q?X@A/JR&lokL@VSl"t[?MYmg!t^dm>/,SWr?:;0[eKH[=Y#8V8M(j.RV:GC./gc)aZAEWQhuR[fC#r]/cj^5r]4OmtW31
%`oOlRmLRKQ7N9n:B4l`7h`W!D:8E=F+Wm(WA^lo1VpPrKX>:dUQ.s7`,7&k--RC`nE0DKgLDIkTc:0E%T$E+t+m-2]Mi?cNBN1Em
%UrrQ/#da<4<h^`1\C9q^k]F]@A?9]6eoHk]pq#e@AkO+kf<3$(Ji`O8e&fWCD="[peF22bpp''oY!MLMZK]l0FS4goHiG:>r*e8s
%Ee,uPSm,!AP-c8l:F;n6f3CBJ;1X;dA`q`@YN)nZ'Jo9"O,\qUaSs_:j!c2u@eaa!ET*qslETm?dL(j&>\]Ga^!3qSQpsmG[IZR"
%mG<-']lrQEZA%J];b,*ZWj2(V\";C-G_fO,rH79H*A8@-ZQ\b^CZGAMfhgD]g3IEGWg_RUk7t8UVKY,J?#W<IGFk,50Yl;kqdd&U
%\)+;Lq%Vc\-gLKY7]4>F;nOtRTu"o#)'Ub"!h_AsHP%i^R3Qqm;WVjs.tM\MMTjO4'Z^1eZ:U!&C5!AL41r)ZT5?&`24uRo[SH.1
%6K2rQF%@KYg<E'j0,%Zk#J#:0c`,nO!Ii+?mSFT>3sR@rTl<0Q*lT%cliQXn6StdgO1MlWPd1gF='0CpHr*qUaaH*rb;mHO$Da_^
%@e33/lLqX8G-WO3Of2dn[.h\oH/!_Ms$8gEro$@nC@A%_qd3cX+Sj%eAmJuJ"CkMT&+NnLG/"@LW+g$^C+$]<$[C"Ca8uO\P6l\m
%R6C,sAlcE;I=bMC[<C<4G3b(M_qNX1V?oPar!ng/g5V@gR?B@IX#4lZIuP[PTi3BO[38`7gpcBBH:2KNbY4ar$#l?;9M;6oF&trm
%kis=R7e#35Zb<AKdL^61G>`O^Go@#0A1]#@/=[o)%1uc)ZEGb?["pl/gO>f)_b*1m[9/kOIa72Dj%0,pnk\(3Eeo#aJO7S\)IOVQ
%:27kcG=%G]SXuct8gX%?$GND]88O.8?A[QVHVYH84SE]lNe/7GmHo`s9^5uVD!qtjg6"O]2M^\I6tUEgbL4p6/W"VUq2LH>GcBHA
%7adAB'$g^/K^Md-8+l;Oj=+C=P!NhaQW+K<7"\E3'-@bMm;6sp9&%WUF?U?gaMF@?+Feo\c:&uW"[sSi+ZD]M6:5L.7IVK]?O<:@
%$@3*-ZO-b_Lf1W/W`@gSO6.9>'^$rXAkAjuNi<ApL-2'==[UOcW0PrCBH"ql#\:(oBa4#P(QLI1V4G,6XrP2",2sf`TGH>*a4R@G
%k/XRqKO)_:,JcO!GeMuP7l24+0kJ!p)=uMZ#u_X`j4kor0@TLBl?B*MkgpK[ODWR/bndsX=1@c"jsB,/<F'u$[+R7cV;fSQ$TWoS
%N=A.i`(XTKY,O\IWBqU&'0lD6\?_O[JGpHaG_;TVH1!:@I;DQ+1X6C9WIAKXd)e/9T%WMBHU!+bGH)!XWDLj%l^$NX=QsZ*jM!s$
%_R[;,juk?^XuU4ID?=1d%\kQhJ5hLMbtC<!)H?(SNb1]Ss2Q:ckf>sk3m-RE0]80L$3_VpV'[SnK-uS>[Q],*QeK!lm%bjp2[bd1
%<`&('D+Yol7bWI84!IB$Cs2Hr4%_'Kk70"&NcU&?6GA!B;KNNehn+Ki=QJIe(ZA2N:tl&sqoRJ1\,?j;o7uVu+']RMGC!`mW9_b*
%qsG\EWC6oebW#[^dYlF&FU?C:ps1SQgQh<[YQpjFWUZ[bl9te]d'Dme3r4^LdWS4.X6NdfB:YQN-mIpr3A[HXh(Y."/`.:MjP1[%
%cG\:\jGJc7k2_XM))Jcu$>_#gP1T7(Q9d93\?AhNn81A7o%+sgkR,9t+.f<-3sP+6DjtgJ79+Qg%]q*SIl9*E#Q[WlMN0q?71-R>
%d2^M1nU46G[WWC0+5ZsEbW%["PZcGd8r$[G^A/M%df(6T\Hij%qW>=QjC-HJJUG.W+:)YMPQB%/bCajdK4I+JCt0l2>4!1K=CAY-
%\BgK>#:o9?L9&J#';7F'`]+R:h&s[!];'oOS_XL?Zp/8W7Mg3L[5F2F97\ci@VE8JX[gk$FHq<dLhI2WQq^,N0,MRqPVB)!BniNW
%"P?;!U;a..$a#f;,EZst,,j"pOrkT>WJ3V(:%r7C?BNL^Q?F%^+fOO4>"h'hcH6S-&7nT+Kc)ddm4?fV,<A4$!\+2M<rG>o&2/$_
%<b+Xt")lo*;VD+[!,P*7a[7+`;dQQnkXY'Hf1kA_Q,@b-1:H9Q8JU9.C.^>TSOVnQHXOl0MR--3UW*iJiE[^\]qr\;NI=rlK&So!
%4Un)=J1f-&Aq,Ca]*sXZ2A9%n7.OBUjIG(1#>LA?R]9d?(X._#pqeas:6/j`&:akpd0Zs@YV-'@.ohi_:L:le%5L:MF&K5@0Nbmd
%c;;Fo^&b6)>)oL<:aKHnp8q:4%rCrKi,b%,VINOeUj+H4gL/E"Edm-cr?4!7&@5?C(HD[1W]8sH7=Wmcbus`pFQt#s)o[BnMAX<N
%gPJSs@^]e+g_2lDEkY4mLh9IhnkE2B`:]RG26eZCbM^/bUoFhn&,T,E]JgX]`@`2uEO)u05N!a`p!+ij/E(6NItqk9'P8q)W=g*:
%/A_HD"At$9BXnr1=&7>ir_5'JJak`'(.m#t[VX/t'@T*+Us++$s$KJMkHkgbMF1N<>(/lbamXW9BbPXTU,<tM3!<hZU*M/6/+)6c
%4\?.j#s_tEqCfI]WY2sfF(l+43Y2'Hau1BO=PDWo.VuLh:a:;YWF%3kGqS.Rn,(o;S;!39Yq]=$&BS&pRTfo%'N4+sd0T<mI_\FN
%Vj')a9C*SFg)U5ZI<bnK<$Ege\2QAf1thH)dj]4&&M$L2aSR$C)Cip'Wn<nLR3ccm&QWM/]c8rbLng9@&#Q5dB8lf9$&4.sEu`(&
%HK^QbrHd#^%:r%4aCCRFE%:_c^l!6TE]cD&Vf%ApSpD!f/?<'iHbP6:^Q/(8#\)n)q"Rd)GBUsJl`Ybs\s)4'Q[8a]s-]/GIRX5g
%Ot0754Z/ci?gJW[(#.q?>6t?g8h?:EM&L#KFT;P6#^DgZf$oD<_[<IBnbom*Ms6LnJS@bcrXNS?%+`m'5%L8tgh2>*r?!+dP.Mj+
%`LHV,*tUU#a?6p`]OFsaa_DP(hdQ04#QlO-IYC$TD2V,`SimE'WSY]TWZ\5=]kG5WgY[E:6>K=IH<o-U%OR:D'[)(pJ7+12,O5W1
%M(HZ$Xr[L8XZ3?]l>nT2H$/q`IN7Y)5F#%]CZ5'[3F.-+\+22#dPD&OJR.o_V#PjD`\IVUHH"dU^Ih;fXpF>f_4i`Y3SHb!1s#&-
%M3q*(cD=dtiD0+Bo!DU85HB,al%Ec$-%8'r;a9,']-VA-3:Q7if3O$=TCu^#3uJ5mN)\d#'*oHY19]`JYFZ&g'&JNdfPtRr*R989
%P%;L-c@&Xc$uTd"+*_+s%''MJrg+K28^*je?-hi8lcAn`Bt#L>2J+Y=i6QAd*fhOR.t?V?K/<96*j9cpG7EP\g5"(i6=YK1nagua
%8eiG5g3LHS0uKbdq7^kS6d+he6Q>).,A;7CCJo7\gn0]/35t@;PU,cBZ:"?[F`d"WY>9N.K3t,nC4Pl"4cpTBQSH,plT:Wj]</,S
%*P2^?G]o^W>=u+>4&cqWEoP(2N#"TV+-dnAmAh9i;@jY%I6YJ/m1SfYNI,SX"mZ#1S367@T>/!,Z.Ai%cg1"m`R@#0p+;/<-mj`V
%=51damt?<?SuUR,S6J4$I3DG^(XX;G*<"]I29>m/+86ITh'QL)V=(O54\i6@Q_3+'j-SBhAWJ"QUY_((;maRm8X/\Id]I\,etB0h
%[rPMsiHXYRY\LM(]DFq#4GL:LO1Rgk/Ug>G]mE!3da%UU51TH,K(juN0^cu0)"2BEj6d#\5NGl*&*[--_MGrTmH5HQoXG=X=^Nca
%RP=T]j)373O5JAYoA5P?o^g6G?AeZ0_>D)b)#*&SN;!Q-o#Jp:1q>*4bDR-01CF,"?("`d)IITdim)C(PqOFoF3UV?I[QEnQRd]O
%d`[>P]'J\B.`n%O7gOsE,JUscp@rkM`eX*`Ji;fJdqJ3Wq(9;PD\<2[5.,JN0"6.,k:&0]cO5(VCO\J7&j=e@Mpr+/Ib^csn)&Pn
%oD8]`(Z'e&a*eeCk]7fFWn\DErZ\`W-AOdnq%b:5[*d`ui_-&1BPoJ$KiVi83?VWrQUZIe=q/5/c@mIgTA:Fajn3d[aZYB'eq_(j
%"s`t!HglI[!G6$fc]oc+WK@ZJ:pVh`atI'@S)Hsl3XJmT>iXbFD6MD\7%P42nP&`g9gbf;-BjBc$Vm7]_s%>-Ii7U5Ro"f:V_+l!
%Z3OqUJ2iXWLAAo)-"m8[E%uaUo#b5CjbKQ.nLDlQXiC7>bnEDCWUB@+$=aft.hP^[OGB:N_?Z.7`![/s"S<;!>;ni=.T3d/9R..>
%6l!(b#'nU-?)3L#+cpVR-s(L*6aQipIKBN&pjt9\G?^Vh'R:_R+9*V5)hOAV>Q+0jPlBT9@3=G35uVghLDf"QT`iYB?.$n[#G_)b
%j@%W=e(h<,nFT7&T8nJq$"RM$Z$cK*.k":G@:gf`Zf9uFPbFbkC"uHA=Oi.8aG46pap\k,]!-P%N-6;N"l1#D:D=\CM9^W!MXQnD
%GT4HJkd5na31=Z6"$"<GOB-F.6IV\::7,FZG8=oY'H1#B(.3rS9O#XPa$S'K9m>O?rM,]q:MhK!96Ecd]1.gD7M.!sWSVgcj4ZAp
%Ua1Z)!*=gGQ.7$7cjR/b#nU6ma4MRKI^fRnpkc"250h_$YNV4^P9&Z7=,(kJeV'\[mH^oN;g6)@.D\WB4`e[^eXK:XIcE/7Uis6M
%(1l2WCuAH?PBV/!'9>d@THQ](O"$s1]Iq,K1$]X&O1Itgq_KS.6#uQSI'TGs;Iq7!m\)8WQ?8gW5G.IA5)hd7J,+VBl#M2chh`62
%DZpg%1Af=```&i)eb\jY7"*me.%c6OScQV+YEh4LY-)$0At[^!XK!4NEFCBsA$CIh*mXqdW3h&'aea&eCHn^:_9PG-D7^#8#C`Z%
%IK(B.8cEU,Z0'mRhim]"UNind^"1i(^R+\5*s^L_:bZKEi(RuE6U+aus$CVN!i$q.DS&*X@s`9t+(O[Gc/M1MoSCOn6r>:`V)FMN
%rQR$\&fo`SSPqPnUj-t;PV&EEa.._Wl7$"6G0g&:0&8V-k);].Y6NY'>.4diF]`1TCPa3?63@;^EcZ<,YpEst7WH<q!9+sG8&S[:
%ioX]nA3S/W5rK_=_;S^(>d`i$cdJ"Z%+c3g$i*2&bh\i>X)Ah\R-P@Rgu>u#l5km>!r2sUi00H)]2,k#rG8\8itHD0,8d*'XsLGF
%Mj+S"CJ2L50/hQZ0]4!**&g2nMI^<8agY.V3UEoZhkE&FZKdI2pOr[E[!8,'T&\^F-F7AL]LDo%eTeu(]&HrPBB$k1D?g(lih^?J
%#&q#Q19&6]4&Ot\&XDroiN9^s=4L,9X$c40U^F7=CN42`d=V`2T[Ap]Mf`BNksAcAo8$A^Tm?m!-u+`0?Vorrp2Vj7Za>](+Nbo6
%V$"M'G?*76POWOG+c_X,AW`OF2Y%DH'Lq(DW=kV:U*O3DjjcP"DG(CqN(beUA@3PkRV?YIp^s!tW=BQmmjO2"GA`o<ilL\.X+tF\
%l?u$$4PA5=J*&fr>t2IOq=AM?`]$S+-![pd\7<)E^4piW8h%7eH>p'Qg>['bBsjMmHX5Xg_ANlCia/dPi(%9cm!\VmgJYTXb$?/'
%i6VC,hhueLk@lWddlfE.CXp@q^4>P+iV5+.N>-iq.UZM;3"Zta\jtJl6dkUaeRF('/?r5f6mg9+-BgRoH*&A($QU09J:70lO=6X.
%A2SU;#XG6*ku1e+;r%SYXMN]D?Hu(,n]HWL/4tPMH=(3tfe=Ttni=4Z"OmS,5MJmlV%#Og!,&4P^KIVV85&C,+-iMC2FaS_:8P=a
%aSjLMI,,U'VX0`Nr3q1)TCm4SiqW):IY;lEq-\9?%:r&;mF'9nB""Of#049o-I&\`F9hnEmjfji_*d:nQO&uC),1*/*>B6-3V4!?
%aLdb#U;@Wml70t'6`3\;Dqb*.6=qITS,+):3Un-rB0l`,P\Q,0Za:Ym=u)f$&6-Zrno5NS92PjTY1]\Q/s6ZTq<u,IU!,KtLd7Hk
%WtM1GB`8SpZotcD:s!+I;Z&m+I,MO)M"Z\T1'HE5mI%uMEmPMAhR)LFfJ,GECjF:l*f/#<kuA!/?9rR<#I,;fpQAVMjprCoO_&_g
%A&s(C4[8VO2=YfZI6OaQ=GK*X6Mu+CdF]Ic"Cj`g(-6g\l$a+Cob.E"*+>UAJ.dE'84O+op`WuM$9<1*(&.7J4r1X68XVC%IG?FV
%jC9H>&F&DpJFHWkVuI=Wl$^)X>i.?]_..<td^3kA/QM?!4LV1l1;^%U-YVod`ZsTlh<.:87P_?ZCG0^L8P6<$%Q/CDG_1np<R4[!
%ij(V?=sEQ(QES!A]mY#Rg0C0oi+\^t6!E'<N-gW'QEU09';[3hmTXJ[^N&\VTO0`lS.1Hk+7i@A)l<_G1U.tK?F1"-0W98YaD)3[
%3>oY:h2[89MX"2MdG1Ea>XfQrTMXG]nt,F`+6Vh]ghZQT5Q/Q\G*Db*.,H?FKtM\s8!Jq2EUAp1</7_eKbT+F6Bf<TKE17[]efJe
%p6k3[VnLS4fUFk]r<"W*P\&^BI?k`Z-sZ(qDPG<R<.)E:8qfLDnW(UNo^tY,[-)2f(M.\6*1".`s!@7,e+mLr-Fto6_FppL-c=4%
%LJK.Ep[94S.Cb\<W/0-?q]#401,g42!@c0+U'(6D&S([uXktc+=O1'fr/0("W]`Ri-(=`k;'*;\QD0P[@k#HUhcVbX&1E<K4Xpf.
%)BU!b_!%JfU6$TG!];ICCTh:kWFa"i9f-F)INggeB5BmlL_B-4FfSP?Dl-pbajI%SeDWHoqutE1lMTR0Xh>\?1C'bF)_9UsKV!u8
%TZ%s#<4[,8'sEO)SW\a+[V7**7C/^eN==AQ(NugUZqfCf8K'%IeCS4\`i.0GM/-2@aMR#DhK$8!EaYGL:kD,P;1H"09',H%T"`_F
%K#jG'D$A&7lVQL<1h<Xb-hN`j[U//5,%'qGK:),Fj\Tc%D*dDA8Ep?ME<,gJV)#.UfWEpaJm[-(U8B8$G9nMA6R2ES%_!<hil0q=
%[0i$t].E/'=r(N&$dsoSjDOSQ0L;L*`Rf>^C3<kD@70-oeQqLE@eB4.K;cp^HUtl"3WiFc@N,7q6C65Yo:Z'%Tc$$'JLQH@9@?In
%N2(g]>QL$a]`TY90eV/k5*Vl&Vj2g'dd7`[;o4GpV>FR;("R5:lTifV4'`="L)8=;4q+QX`LAbt>UAsbY9rl\;#T[1#C%P[/G7OF
%;O_jWYcV+--?F!$3!c2((KF0@<$hl#49eZ`53dpN^AX]=81_/p0=C9#;QI(PbR-._M&0N#F*0[>FA[q$@+GP[ULN_N2"I(Z$9Ba_
%/%:iAldTK;LF_W6T<BhBG[kAtc!qOt7$YG]NS%4h:5aJ2$YUe3J>ip7)BMRl:&he9qXYZ6Ib^l_g%uKCo-4knE9rk\:7Gd2V3dOE
%bYE!1pIeheV`'Z6AAVQ?&-ajan'WOt?9jDA7A%XZ'uf%+:DELrX$$$rX(^f4Gl11ig.qL?Lj(U;56+I%'Z9soQhiZJ5>7d/&04tr
%CjdKPFS5LW-OTVK7Cr/KQqF57m%mKG>$9ETT8:DZkRVg1HEIeD7-(M.$XN%Nq(Q:>;C@o(A\k#(7,FO#k:^tPapb[g](F+b_>Z-2
%nmSYK^Xh+dW0<sq[<"L\$/r,&aua_i%LeNk[lV?D8Y\N#M5Y%sO7CdKG$TK(kS)3:W=O-'bFFJ$Lg-E@.UKh^SZ&Zu+J?JaRJtpR
%qGEr6A8T6?RA[04\su=mL81bhF5d#!a,8J-U>@V]5W_n]lhK`/^74EIQ@;3$HDpZim<C&I)Y9B$W_q94!W7L1)jT7BqbR;=[U7aG
%k3`R"qRoT@/C`$dgSkU+[gp6iBn51G9lZ%$Snkoa\QY_<=.?O;Xt`k.9IiaF?bQO#C9>0a+7/:B6ZF[ZU9m<J[a%O`]oNu>1i#6j
%pi@<(7<4MU3cP)D+.+%h6kRhap&'%sF(g*!P5;05FrCq2_`9kg]nGeuF*gM0Y&OB'#`T-Z5u75KD+mj[:*#&<XuuU4$Go]IWdZSf
%$_M)=k]2OZi6QZs@/7<oF@!P,Xk=m5?W^:erErP8jn-`Mm[s.B3;89_U,VMZJXkc^6Gepqp5X_%NpG?%Ge*R!#og["o9^;Imco0Y
%IlP3?kMGg3Hc8*dI15O<m]d=qN7T<2\niJ/QVFX&/$CHG!B?`Gpg,D+/:m"(XqgVjkCpH8a0WJK;Q3EXgkuinTkN2%&LRiP]3]e:
%p&mgPQk/q78?ckZUA*G#PlJ>9kh9>:Y)`JTELUn!9KMiQ6?04#`&YS`FN1k1AWD^T3u!J1T?nIJl2a`nX1(_h':l$q;M7p7%4[e<
%o8]Un0Brp48%iHQ&LPG,HUUXu)?#(:Yuic$acdR'A9BeYo\s'iR+(&lp@#X/N\]:]oJ^WW@0pBEEN>=!!s^W_-J7XK,i^\N#O0aO
%LTlta67nk,'-%>X1).Ar8%Xt"e0Llhs)\8S\aAZ\N*_&d#k\[))^Jh=h9e0Iih9-1/D5)"=RP6=[?cV.J[%_p<Og/?*5R\pFC[6@
%)^><c^2Rf(GCfP![fq&I)THFa>!Y2QW2.YrQ,jut/Q*rO2FSAZ6g6G#WU78s6o=8W8QZp/G=r*3;A\5LT?[@<baZ#tpm__?TB1f4
%>^*+[I8SBBb9*6mpTj5TWt@Rs;k18P#gI+g9e@ZkMKaL73VO.Pj-Q68"h!(<MtCm5(kRJTQM`-*L_XVs=;EB!'h*+d(.90<7-%^[
%:WjOeb8M-\J0DcA;g!95@KJq>0hn$I]c+;EiW^r\+gQ-e4Veb8]=_a2jM@'3#mX&CF38b1"lfqQ\p4tu9l=Z"jlW2=$+'YreqD6Z
%@_4(dL?7/*Of_QUd;i,f3nBtVHJi^b6SKFRd#I#AO3E)<1B7<or8brs+YGlC\ElK,mD791W2F8r6Fb58$o2(NL\i],f2`@L>nm'Z
%HeUOK9>+!T`<$?R$);XRmcqc3KLDF/Me).)RG9k&p=i*ep"o.47pnasTC1(HEW7_j?/:$0IWa?b*h!V3SJ[NQN0h_jjdf^&J.kH5
%GWP1i1oAUoh[Id0iieuS<LMFm>sIMG$7UFLlcbsS#X"[N8^kKJ%/l`X=tMm)IijI@UKmI&bNet2<oqNlW/H`d70#l-\i>knQPV;\
%`/aNLUX'\2L+X9JI2:["ki^mZ9]5Kf@3(d7)=Eu%@/IQL+2X0*_`NX@ABeJh(4XjUr%#b^Or?1Or2M&R(PrOaOs[T0S`B7#\*0M6
%/F:]a!K+IkCO`\IP3N^@GB(>b+J\:jYEVHW8N$)qcM&gBl6:fY!g7Ng$^>jMp%_1BG^iqHrCW\U_@KQ_f^WaQGC_q\pMH1Nd_J:#
%h$YmC#,3B)j[3m(`iUJpLYgs>'1DIn*(cB[l!:)<$)<s06ZpIeBu`#LTW-.P]IFFE/>JGbp>Bp\EL]2Aa!\e';>T>5Er1;;[qDY#
%jd&nUIAr=(g6_f=6Wet%XtD#`e2)#+PXn]ATq+d-C4nn(]H1fUPG8>IQQA_Yjn;bEJi'C=Z_U0[m\(i'5Aut(Mt=noD1CeVrMWQ\
%L*qWOB%<nWVkPl.i?J(gL,=8\\;9o\*l[B9XPjY]:m[smrcs+\N8gpQO1i.D!/,qE!F!?1Q.q\Rk5l/H@JI^6CMQta(>G1i$pBmE
%PH^n0q`5`:F1&'`!6Dt8/08u/XJ5U0mo5-oU>"91f_MnKJl*`E$RX;!K="u.+kdia*9&V^MJ$8_pp2cqXNApTQU_NTfI]<i^=1=b
%EQkYl=l_`fg-;KV(3u^kCIYRBU_U$o9[5E\Fo8]lf<qT[$)%NN$:M5"-1U2r15^FB-u%#Jg(WX>m$&"Q(8uPCAlT?,@nmVQ^j3-d
%J5XG?V01mnPq^R#4b*9<\:8N["nMuLp?0b7%6clliR@b=;5$-8TE2t4m7ZYL`[e,pLNX8OQ>3_]0k.V=!cN`3gWiAo*7*9/+`>uU
%RZo"r1OQ8b%0#:DkIOYAJF1Fei-.\P"]aMijR'6DD\:5.h]f-$2(r(4P)<rO(2Hc9aprL+)t'>i:J-L>L!]kTq)f+bj<"$1JDa&-
%!PGEW<<,Xq7mZOrd4=l04,'A'^5-IV'iPbSrOCiakMi!#%Qj:m-e%m5!XaNIYq17q<6W7Ne[-eFH#SWph41&*'So!P:6-fP.kV9>
%V[/Q@0QWaOO?<-c#6;U3q&`-%9.P#qCFd.4$hAh#r*%ZJ1RBTj;Q+1b(BGfSk,9lsQ^"%J@9I[WQ0:P+!iH[k3FZF=;fC4R9=7H?
%0k_SAP1q-KhH9R:D_\Z)b0PRT`>*!aq5T/9^uFa!@:8>mJlS=JI>?;Vd4)T3AsMUOn8,Zs)cj!jrY<*g5n=Q5FgnJXNe2_MK<N&(
%GBYeUjqfn@3_8ftTp9@!!C]!Wi3e<!YI\7q1!heA.9UEb6^&t<cko+P#q\8M=-[LI(n._/n/)da-,Q<GT)0(SXjQ=h]4E@u#(`dM
%`qi3.UI45:kD#;kP6Ja5"M25Bl\WOs@,Arorl]4jZ@uqn]72T`:\-dp9O7EhF]qGN,T9N+>TLcHntI$o@+V9ic*i%n3%RCaWHf<2
%-Tr7[CSagn?<adAAP8?*Xoqmb$QAdKO;b@cX.*EQeTRRbZf8?Qr<)2\9uL1m:rSDL0T<CC,?jWl9hdI8!bF=[YRuQ^+"-p>cYgm#
%-.oK;*DFHP@d/h%])m?s/\W)@)-Gf\:@gBPIkVk4(XMq$1aYjo.cu-5.3<Z\#LjhNfB4:\[Z:%%_+I`t#@,i*l$)1j*6.9OkR7qA
%gEFq2gX_qa$MR_%/3'E6NYW^jb_NqIbh_GpPfSqYM8$b?[tJIY!,hBeLZEas#e^O`FFH:pcIp]IB_7u`T^]@ej5B20`<!$eaeoh&
%p!k:A-ob^J]94KhOMs.Og+_L@?aL@u4VX25_bJZGg$D*`Rn@4g:";Eo"0S^6<t].erpoTS=XOE/Asaad'dr@d-3+q#dA>]5<iXAF
%Kd+94X1+g".S5J2.LXX<0AGHQg7]GVP069(N_.iiSZ%&akZI^]l.YN0f/_Co77=[a>)4EYW$r9Anbh&XA^_]mNWE$"l`g5f*Z>8X
%B#cf0WtpWYM?VZ&SU6%X1[%/r897!)%oij4UjYf.4+%O5V4@\EKr+qrr>\#2Wk"T19i63kXu'XqOM&_1jBanHIUS`?dGd+5?k[t`
%5!K_Yq(Y"l/H#7nK='VVYKO7@o<-hkkeo)k_r88/\uknJDJ3GlhIZlI8@5speUYIJah$5?BOGjlKl!6Pd^rKsSo$5j7QX<;YSbZb
%D/"J/)%>^.YA"/UHf;l0ItP/Eg<;^ooW\O_DUnA%Jst(B*p#:4FUl0#<ATJBVt?ooQ@//&nJ#Y51r/2-)GR='7MrFG+5'-+cb/K]
%2K>F(k%Q]Sc.6@m<oQ^nhUAN_ct9Jb[LU;rhbC@el>RGqoCT>1RZ\`be^-T8\MeB\3KSE]VjYF4Bg/k@.gMei+n@69kJJ*FV5e(h
%2K:p`;M#H]^%uU(Hl1m^[;QtJUr)*ZhWNe(5Iup^d?aQT62Y\eft^EYjae<aVuc'>4O03^i_22CC-r?FFjP>0PucY^3;m?4SPL3b
%_be,Hbg&YN%5!WrJV!>PgkK,hJBl0!dI`V^C,e%7Nq;RDa2$n<(o`l-0J_Phn"O]0Js6N,JZ!+]MJ@&#U1a4)Ha,2"WMU<]`WZsI
%-JNt'(0F=7-2.r!U8onT4tI'u]?%Y%Yi'F3'L(oAe!o-)MTq#U?0?N<'suHXW^:r4'p/C(5Pd8fE1j'!/t6=#)<e7N`Lm+b>6$g(
%HfDrOqF:e7SGXslEmFEF>1G>r7%RQ[pjKdd)TL%#0;c[uBTeN)QR0J)5(2dO+T^',PJIbk!op$;mHI?GSSA/G[N_.WTO3ZalkBOC
%[LIe`.s/*l#lIScL-7,EVU3k>(_D[?fr,GY!@'tU;c!"Y&Ladmj+3u)5>2=$GB//;*&R@E+,0kuCA765Fp%c=qUh_!^tIkN_J$`2
%mO^Y>L(E2#F-GS7S8YU^JnU1fmUY12m!cE<?L>c^XHT1@<jFGi0ZfV,9Vq`f=m)Q,,+@(cSm>(YUeY#G$WKfR:+#$2PTf-'ANVEo
%DaHLnZt=q]iC-=6WK7\O(:Ei9<eSP4K@ERApP#8!DNPtF8811T?O^=)V>9YAhit.2A$aQr/6r\6lS7<m__5"n4sgK@gQ^";'A,#[
%FP38H:8V\f^'46CFPHc<4.:[%3W][5e^OMbNlSq=>KmBr(RH4c-/6q#YaPXV8J#BSB4r\Ip'g>e:sWrL4c;L?>kEWs9*FNWG1GP.
%+#bl".7i1$oi<MKHiZY%40d=s,tef:(p'%AZ*HGFJNBGOl6cu2mC,P>o%MkK5ie,)-1H91lFpfp#)?Yf!NSQCg^Khn(nrKEVQJe?
%?C_.-EB>S1eJpn7%sfklO(s%RokH\WcJ,><;+dhOcm!<mB(2!cgnsFrs.7a\[^`DV*EV0"]Vm<o_n-(IH0Q:_0f"o8R*C<(,D&s%
%"8QJDIu*$m,6HJNT23_PpXpG9F*_\*FB"fGY0W4?,m1IlR6To#lH[&6'9^t<E;fB_HCji54f6I<Vg9!SJ4Coc\7qTO]RhB*>o_0^
%Pf1:tUtkli7_\kh)>Q")*^M,]4]S@I,D5I);7Na^(4pp<14bZ/3e-:>\P^4F;'^_8i%>@&f`M405>tut5H:re@p$MJIPB1&io>AS
%P_,-kI0jBR\3/Xhbj3676Na0X+3Yl`'1_eNT:@`q`*C`n-Pg'6rJ8&]$MNU&7Ahd_;YlD=FcVoh[/qk+-o\5J3=rEEE6.N^,rCgs
%l6U_n19f9I0QK*TrOSfQQ7Mf7BPRJ?'3-GQ.?XIK%0I!;FR*HdBa>ND4#Sqc(?oP[]poRck#l\Q@4KQjrs53F<Q\jXKr2PKnhdE:
%8!I2qI-+>^Jg?q.P)UHQ@NO%lf&i?\dtNSB9RKUH=Y>mjSgErg9o_Uin&/E,jSOFT1?AEG7FANr2$-ZQhqq(lEWXHEeGB\5]EN#&
%p:nqr/UB3f<)'SL+\Q!e,d3!:8G&Za?Z$S4fm*=D&H0GLb5E[a_N1Jeh1[$%9_IhmWQdNN%kT1mg$9P<qV9g\-'C,(jgO4s]9#k<
%>>5+?YHfcYZOfptr(s>DC+i;\k4Zo_IbUm"r0"'G34e<$`Fhe,l>RQ&&/CUcoVbYV325it0ouPR\Qq!>E*,+Qrq>"AQ]JKC$OQ`P
%3mqiZ1;-211_IaA9Kp"A,B?"'qlKLWNj.oJOL<$D@e*_K("aiZk+3o8MPI4th_k4%A5'rP4OIZ:Ssq1u[PWg_8R*[iq+nj^V<@cS
%!#7ZZT3D->?Dh-qr2r01Sq$C&S?7/9T1mA!cENnHYfQD7b"mPq/]S.J52--R-a4R"b[\08@bI\+\Xpn#J$/G7/iJ7s;n5fi3GWHG
%8JS)=dY=5:O^E?k;emT8O"*u)NuTp_'^X!W+4rAo]^+0V+T;-,Q]R4Q3*/el-T<er.5%ha;R/+p,a?G3VugXAJ+QMUC-0gkTA0L#
%CkaNn-:Z)YUo(\44F'V*bkjs7\6;kHJ9Oq9m]9NJFC"]hqa3M[(r2nB!S>XD9k;W8)b<P'2eo:6!:ZahKZG?VKR1GeW^CLj??'Hs
%@KSeYDpb]:aI"4f(ET<s:F>;mjhU\soZ!Z;p.$'L_+sZ/_D+\sJ\d4ckO;%%,f"T]Bi^4lfLi;Ll,u1d&pE4)SWL(@"]iTf/p>S_
%,CVAln.l<Xg9+;Zo^kS#?PSh=OnH8r#&![fCN=Q>J_k#sFR;'p6hN>toG)o4Nrt@*/Ame)rWag+74on,6USnuK</dhCZtP<9`A:D
%lt.dlX]N^UUg$t+"G3f6[X/;WOjB<Zjn!)"XU:jG_roUP?4VD\UngT\c^M!CE!hG8=g*2;[/(,OIr.tJa^74Lm+\jd_I'[(haM!0
%2/C?Hdd!PGDC9(.m%]9!0V;Wfj4+!p1nC*2Xg#S:FE;`_HC)qXqP:/O$"t-^WC?0a!*$/a%.lRYe\&OMnqFP7oSE?4BF!ci%MPQ]
%=85TDieu"K3ZZGQeQSjD]tB.Bp'm9,@*fCM.8adll6f.P93&iM`;CeL.7F`?-tn8k/00b*+eGWr0Lb3@PRHYZZ'8OcZ\P]l^PY+Q
%1QMjpcG_))6f!!OCd$=u_F@dS#$NM-Y/`U<m^:K5W##OgK2DDHd!N+o$2F2PK78d=IDcZp?b\J*[l"d6=u"24:pdUhYT2K4l6tOO
%-Q:`,A@47+:dXX^/hN1`%RX-l7#6T5@NE@l0DrA@*5"t/LBGV$@'d.m$*p1an*nBTkQS#f8IbZq#q+AL76-\2=XuUY#RP+'.'=q!
%a=u0;8^&>1c,#nim\<=thmpKNlpu$_!X@ak@[+JFr]QoNjte@YFdR*)ik4m0a3C$@f-SJP+j"Uo]'.t54[\4nRV$DO^mfo#FL+Yt
%j[:p'DM14_"Z#sm2i+@ih4C0pgEj]jhLL2R9rH\J6W..RE!_J,(Rk#?`*hjRrir:lQ_Z?KoeSQRR2V`jRtWDg*MH)P.@rQ>IL!s;
%SR)_RX'Vm&+j*r-'bJ>57eYs4Y/J`.&cU^!42L:?o6T4nK'Wl&EpYC:MFAr8kJiZN;qr]FFr$P7r0_kL/gMl0ah>;?HWjY"mIeTE
%r:*:ZQ"5c3rjpQX_r16cH`O!U&Ui8Ce(EFC/%)jUbjmT^qi/YXl%Kik:'D6t]^aWo_Y>a+#MrZ[&6e>MCX4/meU<GFjeg,"Jp,bK
%@kLIWFD\Wc`k2!$Dm^;@2WZc&pDq^[6ANS#e*JOdE:#bUFlrD/oi0!da*R)8NBNa%`TI'nl'R6q%)qp-FJpngg4,R\<8VOX(TdMO
%H4+KL].a->K:`SHj!O\(#98Xn@5_LO24J9AaQ)5s.hnbKCP;Cb_`b5+?G/KJe<$%tmhW2[g?JSFrp^8c_ZN<s-%Sb&`aX<$c^df0
%IB!E6EX8K4<J#!IbF?:H?X2I3^8_b:/&<3Rn8TPES&"Y>494t*DuFh^fjCGlj"6sN/d8Mr/L7!^Ffm:WmTD*r@A\oNNRu7QYAIF)
%CXr97'7jSlejNgD*:mBA5(8X'-XFD&[sqAuqr?1RJ"<%fXpMjOC>`/iT.mo)&ra()\d*JkY&.6<fV'%%:K&Jb_r[j8KZg5RQPWH_
%Oko%mV4F?APYG=F0%TlWMcK-&L!'tV81'TtT#4NsWNF"d&F-;*VV4@0G07&Y&m!i[_[_>dEj[TfcJ>R%Nlm/98]9&&1"<9W;r,[_
%8=Euhac<LkA!(PE#)CK<#ue;Z-O."VYllBCK_ltMV?G'E3NrCkV@tS]SbBB3ddLXZcJ?@:&V(UoKj"bS;g^Vi8Wm"p7$FV!Z\qg8
%QrQ%[l@R-/]peh9_c-dbV7G.Kj&h_`'hWqIF-u_F"UT"T1[,$GR$;JJQFgT0.Jq^f&p@KJM,c8f"&3GGOcZI&(NrL:l>.;G\@1-4
%-Ia!8Y6[>6aqYCTKH&1LZ5>pde=ip=.iOZn7!DYd@RVr7ZKY@eLcXe+\]Y'c"5aFX_k4d5R)@[^R%RREPp;pDHYe!?=``#+7/Jsn
%BkEKC0GuAiih2CdjmToW9%V]]!<\>Q`e?u<E%Pje1?(F[g073uf3O?UG:`VfPVV78l%&&]gglsW)99BLb@eciJNUQp!Mq\C";/=b
%IWE-Zmin[Yc#(aXe!'oj*h1e('P^O@g_BDWA)h=S)^Sj.<R+U(6EN&4N-%BTOKlE7L/S:'"X2@V"pp6dH4Lgi(CA$P0=2p-08[8&
%^A2Se!"*A'\Y0]b\T^Z`kbq&7ENrFi7fgU:/2!80U^uB#DDRN\RVDfWff4lD9cX]Q4<fkT-X2%D3(igT.r"5=h&!eqO&VEpH9D21
%_;R&CLkCiT3KdZH8s?.'G&NQ`"1!NE2O!Qb>Xd1O-7N;l%'lY$=GI$@`>auqE?[Ig'0$ZgGI"f!/FDmUlmLBoXa'NQkuY2).s=Lb
%gNM74@.eWHRUgCG*F?,A7eZN.f&/HeIPd4K`[:h0X$_;UG?Gbi"Bn6f&'D6q88&Z/6eZT&Fr6BFDQG%D,B&a6TjEl6*eJ)n,:nFH
%FM>>(RZ"->U,opj3#e0E;mMo2-(P@V/F2=bhHL`0duF9UeG#mM`b,VNIX9QtCUW)Sfgn[*^]$6s7'_lE_>!^aZX82169oO8'nM61
%*0'Gn?Q`$%+sJ_6R)5Ld>=3.cQ\]dS53.O9a[.X$okqoe]nA7#j*\sL\7j,$I;dF6ThDbW=MJa5`'HDDYW4K28I?8W+5"Q1aX:Tn
%qOgeJh7obMnYrS-=ElG\d'[=:.U)FDMjon/05<ehS:.]c5?L\<(!\j>VTTsLbGGqYBZl^pl&1aD+BF6C2T%#-/V4_BeAJNnpH3Yp
%P&s3qO_.Q'e/VW?dZ[h_VjcX"G>2i[SaMdNUotPbUI\&(U/+Y.Uapr.rk?!/,g^<^_2,AuQW1&V)Td_i[$'cui9!H6!=m-2V[X.-
%,RX@MVdWUoWB3h;W]I4_&b$LtfrCc.Uf\=KLSu?]qcC@8"I'BZB",%f`n=Qmqjta)ZCa+CK!CH*X%1f;k[O;2Cht9j.uX*L`LCh$
%UaRrhiCe#R,*<2rbF"qV/Lb?eaMLD@`XL,p/[2C`<Pq2L;l4-,N/k=%*GW^a"3_7?$UuZ5Z>@B8\84KEA2.hu>:O>e<ViU*2J7Rl
%j:AtD5[.h>(^!a&iRs6Yb2uUKSE]o!:DQq\l699;'1Y:lZ[6CNTl7aI\fG]OX;/4l=e%bb$1oMaJfa3;3C$X.k,E%)iMDSuHVWP?
%*V,!4<q*2eU<QcX"$n3ILe4AlVVPAJ0pCfr>JKNR[IWR3bLWG%_0ql<br><sh.kN(@Pk_]V<X5YMNo_.OJoFj4WjnN#EM)dHQZpp
%Ff*=E-tD`!Ol^f&?oPVe9Y:5%"R=<LoWF]h;Pp>_P"CrmCT\pa<9H5R6qHLY;K/r+2e[_i9IM4s8SskUmk@q*nB&k49u@`IlUOrY
%WiVbD2JWn&feBl_"l)J'YX'5r@)/I6s!1o6"UkmE[1<"Q%0tj^$9,!XW0T)Qq\K_W;pq1Xk`BTFZF>%"3TP*%SAU"!63sX).k;&'
%mlMFK*,eO+L%@@"/]qgi\XPJY72)ZZ;AtUOo:%]2DeqNF1LM2=/G,VqNVZr(+9FW\B2>9lor"&5#PS_W5Itl4'^q$@6Qm5<G2#01
%2UDa:_CbWoAb5FND'p_VWZq\'6f4\Ra7A&V?c=C!?iE[@mA:$Gm>c#1?Xd;/GeGOm6%Pn0:T&?qUTK^^K'_b#D[+SUj-odm/["VK
%>T[&+mi8JK_@E=,jq;gbU5=;#[_7OVL;7BpgC+S83.B&pd/^'9&hDcR?PVPkB1mR*UY&Ii)4J#Kp[73G'%Ke",!GP<'qNRf/+^TR
%fS6A+XOa9ZoV7.6OkjT^7:TNV+H].l"KZZBFGSs:geD$b#5nlHW0/6DAO2EGe>c-`UB\o3lliV<$Ahjd`Zl8:r>Q2:X4"FcNrjW-
%<jl3e>7#q<_#=hfX;JpHL\W0map8,V-W]n[W*fQ]4KTTOUq`]=aU`^G$d*<r)*[EnHstB)ppG&#s0-/2Pd62.]-\_`c-,qH._(#f
%A#tIL:#88f7sPBjR;S#)_]G!9d5QbL69(>/iSBP=TNR>BTA1XDdau+e(LA?=:]"\$4#JibcdI;1*M5n8%CSAe-_cGDBGh[2?mn$R
%7V&ng5@Pn7"jP(T8hmI-AAe^(3-Y>ejFt[=k9dX(&-CD9dc4188c5A308-.inZ_FO.2=H7i]28s`T4R"eTKR<pA8!b%.aWVo:$8[
%kGuEI2e!ZQ(jNfPU^Gn9()L"mXM4:",?RS\@Ll.\OL)[;&=/9[VRbQe-]):=4*S5hK^MH]54#s1>pI5<`0,G[*'s2,^IsOD_ba\O
%D'([;?9:S"@<Y/TKuB0DT5c-_]h)0lmNc%1HV!!OQ<,-cI@Y+Zd`^)ldJh\+pQeiHs,Y4R;lPhMh3(lPnTrOIY(=R0h@DK@L*tOs
%`n'&lqu0n_qX@&,3$QY^>SJF<el*8-Bl22@FeP7-^HV'$[GX;sQ'N=1omRn6n^jC-4*LOL4^[n&6Tj\P?p@(E7&$Bg;r%uK<o(+l
%:$JXf'eLj,<HDY7V.K%8WHdc'GDEd?Jm3>td>.AB\+eo8XaL0:;gi$AG@,P'idTU:dJe=VXo=PJ^XM$Ml.4^1S-;GqlgMk.hYN]r
%S"BFqTb,uGj`.cn<i6JmV0DCK?/#*c$83]S^YjP!22qEP+3+21ebJ1d*bq2dGce_/_'Ed<qGcKiH/&3X26MK"`nsmX6grPF@,,Mp
%AQ#rT(M^ZIKri_0`lli\g@!&N:Cgo5mIgF<i8f9Eiko_b6'Wf0^qJ@]\+ES59\CR6oMX-&p@pqCA,;M>?S5#_%:1-#M4WH!7;<!R
%5OQtJp[:;rq>Gok$h(pNj$&D\-AZPhXKYc[rZ\`S-C\#Dd:PPd46@>V%&Ts%m^cTVG^8"AFQrB5WHI_%Bdls9pQ'37rpk*DloBZB
%e;'`HL84Q!)t9DV#&J3IQ=*!en6O&YU$<R?'b2,$U`'sJ;rDLPg0^.a--ic\Hnc2Q)$Y=Y`3s$jSZRoiA[dl4.&F20s3\NaOsA>O
%YnSkmOojfX5f.3!mS"1P]Q"4p#:luNcM$:srYTECX@3^k>bdNVS*(P0"4an0X;4t>b4k9!63X3.mubWo'fZ\uC-b%!]Q8iK`oQ/>
%7\>q37?hRQh.X88(Xe-V>T4RkrU2ADYj2KI+qP(_7_ID%<QAGEDBlReal*0n$P\DnJX6:V?,n$m8b#C3rOZ.X<(AO:m0RP?+E63I
%[0B_/i?P9D9T84BlTi-lXlA2HG_;B#`b5,H/,o'CWK%MB&PDs+^+/^%,?h2CEuQEtAA]FoBj+E#Q,%DLZauWB^K$]gCb,da$(<<3
%aTMZHV63&\kVde93F9C/b*rLC9IfV`GFDG,8#bVIs7e.mq"aF+#QbD?^sT5&&&T!d[gmHr&iNSr-.:NEq!?gdpOnh1p*E4e$!/Au
%EEd8`f1\3/KkbhE0<9>J.)Dt!GWq-.J=+<Z9+GeR#9Zola@*X]&Yf`+Tf,'o;Jn,R(&3C?17(cC6%L5qE"uV$ec$-!WZKR&I:&@@
%-^4KR8#c;Qe6J^Z8?5ruEf83bEt<j(.X_an/V"rI#V$-:(3fILC`Fc(//UR=!":G8miY3R0fsGA8nsEm6P[c>/JNV#-0A&HU(+:s
%mH$BLm=Aa2h7e7X.6^b7o*S@U(14*Ld"fB$<-S'2aR@\H"Dko=n;h]fe:?cAHh_S0mI,IKY!(XRoc4JZH_sD.=2EZ+r%b=NOeGXL
%.+,o1j^f&k[#NL;`q)O$,Ml3^BZSC6=,sP,B$bC(VjP\Y&)WRJ<B>d97Ztf<0/<jnAORVg?\E@W`L2\leQdc`OEg76;Z`LP9U5'k
%Q:KZ0BdgadDJEN4/\fZ0r?$K"fd%,j,G6R!=$*Hs"HG3_[=_F-L9F"GFs8rTiZF`Fg%eo#=u9u,b1`+\;PSD"I7@+T2eprlX$+q^
%W*NhI,;Z)lq^8SZiu3o%8mpn-UNZ$^YlW(\;7indBC9u=G-0##(u*lFrKAJqrgg)eHSFig0/&mMO^?!5C=KC]=`jmc:Q='mH0_B_
%UF@(\32Z9X*c89M4:e$F<d4oCSAS_n$4!WVad-tOoc/$Z]</-9Qfr``K1U<kD!msk+#Z5Oh7q=[L3lgk1&;*(OYT$u$9nXB-2e22
%Nj)?9=qB[?E'cF76<^7B-sG]DF<UJ3:WE;*f4n9&566j2FYmRc%_-0hN/^)*5^k^^jn6p7$n"rOjKQmG`cfC'H#kV=EBsr4W+ohZ
%Y+\0MW%u=u<o\RsmNDgAg&9u/+tQ)=I?k4(V^-b3T9X!*/qLo!fVfk"p6qss5$>iH#PbU?P/sn<JJW8/.`?j-ej^lRAhb!2WC0cX
%cJ^Z-_o89J$*O'KTJ)ek1eHXTDg8i_H?Tpa_Qu,/hU=Thj7\+(Q&-VV.6.k%-J?%<jogd@=BcK\N+3q5,tNgDd:l(n]hq[`<b]r.
%j)q_YEd8+?R&p5K)uc>kr!/E!B>jk*-`0`D-Cd;DMH1kM;(<Vr#";r1CQFpmd\+F8>m',.,@8[+j2Q+m%>PH?9B;ENWTq(cZ[gOm
%][abnYTYBCMX7<A0Ad(Dbb1eV"9&'h"erGS=3=Lc$<l5kWb'JZ/n]Zng;c+s5;C]..s)J%UpGY(Qjm%!LY5R>fI"66U7&*)M^X9*
%g.`UPO&qRVaN]\OP8^7`HOKK"4p"^c5kS!dDDb0TXd`=shlVEXP$<pX_62DIY`dS1"^1+PTu.K&Iq@(q8g;b4Z!T?k\Kl+YqHMI9
%lk2W_hNX6aZ7-4`j9S1K&q@E!MWu#1*.O\R*NUPDR[=;Z2bG8=1]nGr^#eY;'g+G\#8\;CMaKk,/IWt?PD,-r>/u:=TI/KcWBpkX
%H'Sb;<BJo'Q?J'tV/^lb&+sCMs!KjkSt?"o!4AF@.d`Xu)]'Y(ObOUc7a6rSG6/:8!e=_3&6R-h8=*Wtni.=?\X<5.([Aid7V+CK
%'c!9T/\&6@G?jT;f"37'C2PuJE)DLW2VKhM+u-]_eqNuVC.jX*<5W%:_ID8%D6KQmK6_F99t8]Y+s_t4.BT0g/"/!IDL8d).Fd1E
%a7]IQdo*P,F\mo3='"Z#T4El.(`/(.A?X,7N!B>/&K1PS<(kS,;-dl#ne3onO?n[<?G)RHK;sae;nOip1K?D#cR;/f$#8]D+e$lb
%$Em,A;*%$LbtfMmcL\:J6h'4RGj;[P+rEc!/J-84*bR]2]`/YlXC5V3"VELC$$8tUrk(&f4I/T@q]<1H-F@4<&_Nlo4Au]<'/?Wq
%*e)NuBl5<.pMrg]U(U;m`%>4G\q(u$Mk%2lZ-jg&10K8_37Z/3S7iXu`cH:9>D.L[1"gmKp.>5r%:.JLB6s6qoB4Wp*cQraTJ(#A
%Y:2OB.+"rpb'#Wgl-U[\C$I/V;_>kQU@+aRn!oc\*(9ne;Aj%Ic'N2M"`L+D(+F[R3&kB2<FD.AC0iB]-kF`$X((Rsnp@MIiL(@5
%"8MH9Z1sJD7j"apb3eNq0AO<0[-Wn7K)J%<..a>HAFVc)`A\$&Sb7G,JU\9UP<.(-&5M!bJfam]:Z?CVVZVh,@cl=)0L=]].F61,
%[Mt9<c#\p078lWL!mPN1[a=5O.aNk/Uf'hpC@ksH3d8;0%h_]n\=1;HYdgj#6E`_1!o_KGJkf7l8ar[WC"(HOU9FQb;`==7Knf#4
%d3!aE(E)_cL$b7KMl&q^MH_8<YDQu<0RIV*[.CbgW_,aoPKrXr"d-\B"u`%\q,OdGYk=*X%]Jo?3ZR;DAP#hO1>5+f2)^+9Y:OP.
%(M_o^..2N:2NM@DW,3L.LYY[MoQL\&ce:_Q%!iikZqD*qAFShJWO5t>k"n!N?`'ZWUj9gF$ZbYQM2'>O[U#lHFmQecLns$81J3Si
%6P7@I=VQRA1`1B6EXe>U<Do>PPs/%%/1`OpYOb68\\:tlBk^/g?-.Dk7?H,>_S*3(`E,2e/\dg7`BD_1.n`k8e*7dD<+rBj`[,JN
%ku>+a"B3NcAVTF9FU:8cN4&X/9(23`f@(_c$gA/\$nGWsV)mo*V.-2;OX+fJ>q97K_)KoAc?Mh8^BY>gFYfMlc'rupMG,@WLoLfJ
%WlM=(L0)_94k5Dn0hRr5+[\JRasfoWE+$DWdZTkbWtc_-:gu$L/.ld7Td<S.h6pLRqHH82YERZ3^,0Oa`">^2m='Kq#_BRm@)QW,
%^HGS>Lq$A_$X.CO$<']'E[VH0Ib>Z.Bb0ZclB5Oc/VA[R.n6B?M2]i/:VGY3J'Gm;Ieb)bQH5O>Wg[m:Hm+1Vr=k"pPSE"]AIZ'I
%,0P^./#.pGU\R$K[5?bS@5uN)ZNCP5^$<4?#>!P>n8l*H[%*o%l@@?&$Z&ia!g[./iR8@Dk-s9IRYmKsAQgn=h\>aoQY\$d4u&J4
%L=$n'.HnXP`*FN*Nq7ma+ThTU"CZ&12E71S`m3-g?5>D#*@_%e28e\,-eWT^JQRCoFFYo\j15UXm8&AO\Y4VbXP1,a6.K\"!%cO^
%Wi2d.;'c!r<]qS[6S=jqr+-&%S,F+aC0a"oD]+,pTc07EmM)pVKsf"l#.r?Cc?/EI)ZCZa),kAi&6(`:9SPN9@0D0[bJS@<64)tX
%$5Bc@;,bXSiW%Hh@Rc[pJ)Vf\[4/t;dgi?3ll=VLZ'hs&DdoG%QY<sA?C4(snEWOJfY_g*rP_]sO6DDtIOffXcU;pCK-h!o*+es%
%[;1lc>r&t#=r,UsS]BG9i)1@Z4CoemJWQqZW-9>21BOVY2Hf]kr[DEs;.e"rqOHVCs+>Ao56Z*f?,HO$n1"X#C,YNI3OXfF@fM3B
%cI.)=eaoL2Gej5f3gh-K1%)&];4sj6D/'Y"mojFpf@i%DQe)J/DI?[LD24sJ-.F*^Z%"973.8=?'D3YEe7>hFeDH+WTMf#*8FDRR
%SoG=Gc:#--!@iNh=H&sb^-9j>0Bd?r5:<DR'_,<;@WaYNfG67K8sVeH`,&Rl[m3nC/XF%\K3d$GC,M9n*NI6o%?qbEX5(KAa6XIs
%kW*2ZPDh]h$9b?@NB!S9O>Chff8=:3W\9,>UABLuj^'cr7hG!,G`'t[mhl`DQ[Y\`@'JD8BPeGZ\;2X(?gp1(lsgktd0NtM9sU;^
%nDX%s5_7Odg<0+#i(RJE`atS^3sZU-qYRp/E2`M<ipAf&Xs8tR[[;@Y"K(X3eQ@%CG,pa?R@Bt"k(daRQPlA<l.]4Tr'JXL_90B$
%lML#K$'>&j2%8]FSr8()JWhWUmT2#>rXujM!L-"FHsJSe.W1giaL7^mR9Z6XPgL<1RmarS:fH:leqaGaV1%N(03St#Es02PX5Pd*
%>:?:o^)NS3>#id$*Rn-]+Y#d#>b!L6:e&OI0X#***W@+K_qE3*V^H;>3A8c=F/VtkEnpj`15AV;bq:3OnPjp0a!4>HhA6p,\qPe(
%*`O=2Gmg'I_DbVnmRhQ>Y?s$iX2U=_:sYkf*-g[Ja<Z8+;!IP2d+U=S>EFd473PPt,<l?c%&*.$A/R(qgKQ3h0rIT0.5k[98[b^m
%Wkhc%\FjsO\RL75e],n5mT$UI2E4%CWj<]\mM]Y=.]),rbq4%Y!so"JcOl:m?tT8(-D]8lpPd22--C]j9F/u3a]_SqQV3%`pYToC
%>mEf3P2R%&do)Rm]@esjL5LeucjW?s?,H:Y(lj*Pj4#]LLb!JnDbjLQg'EM)qESeAP31[Mea/R+Q_Iu;U<VUl`RkAKJimBC2-Q>"
%EI/MF.%asV6F\5TpdU=C=8KgD,MK'tNrcA^8I^i[B],<pmi1ZA/VqZ:onN30ShM5'hUKcQ)/j#CNI=I$$<`.2JIL?sCdLnfo='6&
%=aTmMU.Q,aVl54[Fd5eaOdF;`<R[]TjKR"7#u2>61Gp&DCHj6)<s<GmQIqt<"*[>^&^FI#WsQl^'^#a:.I(/;DD-'NZrbAL]+![3
%@RV&67kLENcl>1fA"cWt1+[4PJ1RgUrY+S;d$@L6dtr@\:?e&I&0lt=[J!eTT*Pq8qCUVBZ7U1AZ?lSgoUt7qD;5Fo'-7bM%3Igm
%pr$4`EfnYO>361JH>dP[6kdQ%7&-s466Q!-2,8j.6a;&;0\m53/"i(',!bP]RZD@Zid+<B;ecSY%AK/D+K"&q_gN8q,D8m=[b<Tr
%R%f>)(5uilFiZa4=\[dd[k*pSoI6/K2h9Pdm-UT]f9hYK(bIg9&&ip0+RgFDToC%['l#-<ZMRl#i3R`lm(hXKW5bU8\ln;IY+kLK
%l#jWU_maI#'b6O0R#Y.bM+-c]iI*Q?=%i6"87C-7]BjZ+GYY;BXAK7Dm$(=^iSt8Z!EFq,In6j:=c0Yj0Esi+/S`igfq1^8KV"Mj
%?>Z"o^_nX.apZ_(G3Ue2Ck5bHISB*Deq(t%]h"ruil2NFX$aQ;$OEjZ;QP4O65&l&64D^_C*E!4T0sY`<c!0J:L]AN%toDIFYN!G
%EN5_.MY5+^[Im:sV<XX1=QK/-kiQPcKukj8oXB$2Kt]l%$O5L^@E?(=64PNBdA+BIA9kjW6'6l?krRF,J?-JN8Me_M.:2u:2oKZ8
%>EK"i8_Si-1:^YO'!Y#2C#oEe0D2'X-eYGHKecGTkV%Xo:n2L[I$c$8P_?WN3n3ZHQSfR#YJBJMiS<7Y6/F2KU@);[Ak&0sl<Wdl
%&+qiidnm5R3Hhp<MU5ClCq4k4Xf"7Da9P`gA+s7nM"#rh_tRft/n!a6mRW?\/#b_+#qYt^,V7[]^<Dt^6cbfA4p@^FQ;$C]27=7u
%&O7cAfS*g6`+FZLPL!@U[3``<*Z`B"7R7c_"Z02V\N>>N=)qntfTV)6XPCQ=<XI!Cgl4?3\rTNX@*#p:_oD5^d6<4tjn6-B,a+Tt
%4=.\T]<A9tID0$a'\Gc>lti:>nQJ=?7R5Bk<fCIss#U9NdpO''g*K-G7te]T7n>5k#=8gg-#<[Y.Fpp`\)_*fcrgE.HMH\HY`etL
%e!+QQSAU2%Y<EL'UR8S^d[u^J%849[4WK"\br:pNju>.$=`Gi3GbnV@Nc5_2D:cq%^"^[G`'Tq]^k7(qm@d."XdC\c1RNHeRF?9r
%<E!@`mNBf4.r!;hbEbH[>?Od@dsPEH]Qui?Lq2J47+kX);@KGXF`.cApM:dI8nL-p9>l9o;E5^NcF^q[E7!k`FUVV8<92p?A2bY-
%e6i3.kHT,E6b?R0OBaEsa@]mgCh!Y'AN:r2PubM7<;<7bB-3Bsg?TS61]C_&hS^sR7\KBHS6i(?\;u1bgZ]l[N`NoCG$$jnLoU=b
%aHF&52JQP,r*Ik6r33<k179gkAp+Jc(IXeHm^M1-U7S8c;0=IMim)p"K`k@L=!Q/-G.2aIFfM*`?7,0SSob+#^Hjs6?KJ?4Be.ER
%0V`#r%j+p1[7DR^LUAA"EFT,)EPeLc#5,KL_i=L(eRUp#0[O;k33UP4-8-Z_57nBej>!`N5VUnY,m;!o@EoA@++9MS;X$2s-aQHJ
%I#9>Q^@s_JoEb*`'u*k^1s@^-65"i7M#FMoFq,oNWe:>@L<psQM7qn=$.5gC%VmQGlPD4Jr6fL:_Q^cH[YKH>jG.c5W@1LBW8_59
%&.o,_5^E,qNRR^5OmANRS9^7E7ms(Beq_n1:;Q16pctDAn.K`t'K;qnCF.@ui]<T`YucjqLsi4=9-BBZCu^fpAN_Y<On.Kl3Lf<]
%%J=mX0N=(Mck.<u.AXi-oNOl*&eX'gr'oHg(RHRJG::uE:$#!%S%MjTc5Z_UW[NV&&U<-ng_KnD9Ds..:fHJec]8T,=q^A-%b64L
%Qb(&6moN?m#bN?cpj/01#>ubc+3N7J'>jE*4s.W]iK6$>9LJM'Sg4-H7\j&iDE=pM8p@6&S(LS:XDL`=+\2('I8EUqn/fi#jXAkl
%PEn(t]Urun($@6]mZV=e>*:l(j3!_WQ6fQ-d,:29o=#NEEbsdL0WE5JP-mb=T/m20QcT`;1tnF;XLXRNqg1qic]Z1EVj9k(Y?R_?
%B0\9AbNL5`Nq6pn-3aOWo9?Qbd.rdtVDD5S(1GNiZO]BD3G>l2BgF<m1"1)`WhN54TK'oA9IgCtUZ8%EL['VsbXYce:jFs5B!p]j
%6=:bDKeb7+^UnQrEE`_1"8K=/)Q)Gir*23f@4T?E7VG>ORcZmdA_EmGA%A:+;IcGB24m?Qg(U4kn7(eM0b)8Jj+4Lq"P;@fUdB?H
%hq0)(KkNosUi9MlpPGNPb=Yic\33*NE+/<kITOU4ZK"P`%)"t>0pBL6J^78aM&(@:i?uR%\g"G&N9EKFHJRCsXc4NP&TUctHP+[1
%]:00hQPjd`$q#.P:n.06O2bBPWM[=?oueg8oTNKJ7dD.M]XK/('[,ci'fogS8.cj@dRp#m1SQP>K-IaBZ+*b[,PJ0UegFmCQpVC>
%0#b`lOis1g3)IR+`K?&2Z]Cf)!u9,!qeiD6i"9tBK`hLqWd4pq21fA;?ap`597lb6=g18#'R5qb2)nc+PKtI;L(lc8i)C*MQA!h.
%dGOQ$)@l*pZ<JmA(AGp2M#32I6-H,`=L[#MiSQdEa&Q:B:-61WOu)l\EB8:#EQ/M?:pp]Sl>Q-EWudiI3F["0]6)U4B+#CJU:*=p
%F`6nU'fDZ$1Y\BuD_#8IPVMKSn]/$rX2(&5B2\Nr/VLH`\cG.\"p,D)">G01"F=t_=^+pLjQ7Zq&I_)po?s`AnQ9k)V(9nh1/*J(
%3KtAB-I'rmolUU+4/)5&p=>:X,92P5.)8?m&Reapb8.*"JkjdcF$t%Pa7UbCGRGTr7lS">nssqt"dTQ#3?k;U,UoA`83Bcu+ZSn<
%'q7),47i4kfr<".@H8JTQ5tiuLDA+'8/o]c;IN%T8CC6tnn*44/,tF$3sl`080ios4Yi*;ADRV]'tHY3]=78JmdVmdmZE67$Bt5m
%ml[EBlA.Xa\oCeA>S2H#W0I"=MF:Rc<k!.4OuVeDaiK7u2JXu!,9?S(<'F4HS`MO@f.Ku;37G%V:.ZWl6p%VoP%m)l%X/n;[p\AE
%T<b#OFPE%!kXe7D8abP>]98>G)8"gN<`0@#2.@.Z/ZGqYas0ue032p^.4;%^We/el@M5@jXHAn"$;j<GSXOqgm,[4p)!OU;(%R;6
%+).b(;Jo(-#^JFk%&Gl9dF'T\fkD]rAS=_U`!#KJV=%:RO@PK)+^FmQSAr*EBhBsM[HVqs.4(bso1E"T,56=$3%pGcXOQiA"LPM#
%)J"L$X.'r#:i>_3:H0rH9R"3Kb!iElFtODap[ob@M9o#oF]g_6#'\?jT-Hemo*Wj1JC@k.97?g[M,bi(*g/$lq''lVM'n//H=nl'
%K-TKEe>:`di-:U3<Rc^"<ne]2q:cQaq7]Bn0ML#_cA9sW!F9Epp^eW0X[n(1KVNjUCkULo,W1,tpW^RV?)QNjr<qErj^S06o&]ki
%%2bAn?FC"/XR&n#B'k8ZK=Z\c$uq6t<cF&D)O>;lYT;*AZcUN90MEHZ(aP\V1oa$lln$0.P.FU\JJ^C*)\O)(&>DksD(moA4,;OP
%Pr0!3&\9WRgFq6VQgmU`7%eD8`R9.oFK*M2bd?q5!B1]c$'Kh'd$(fSHfDjR+p0o!'fM,qC+9J#2/RF,Mdj7#\-.=B?F;l-T5>)S
%=2Tb[h5BF7RW/1Q`';e_15B9>'Fd?0s'eu8,\)EH(8f/1NW&A]]qP'gfmc2sX;<jg3Sr:rZT]\?J<J7]pLVm_<_-a)+E9r\Xm86^
%K`m..+Sp6$_R%">TZY.7dgeLq(8:\^_d8]k_YW#[LDG32s",BHOtNhc#cl.d>S8aWQq`NFeH7WEXJcUYmZT$$Hs2F)VN*5FbN$#B
%'W$6;[ZFMLNV2crgN/Fiho]l`8dA%rC93*1YRmA:`&Z1>))Io'E-oBe]i`^Zft3,Mj!1h[;))gdm].O5TRO]<<>'8t(KmJ*M^0nD
%NGF2^W'*/B]$e0=0-/#7ND.06;&s9'5(,%eQ;/<,ZB*Q1iluWHM?37KE9GE!>2F?oEd'uGFT?EV*A#/LLOW,G*CC:>]mNg7GtI!i
%L$j=n<d22uq#!XV)H&`1)kJLP!BKpAh5+38G8XkF[LRb8_G@9.6?qcD:'[fZolgd2;\uLXD]r(<T1+Kc,Df9;`FTGg$*('s`Qgil
%q\:t;MM"0L5E_bX7e2k-5"1i,\M&T+aoPtK_s(CaE"TGsBM(iQ1FoINYKMsN^E^TJ/VctcYFRfLN?LD(!C9UPb<X>SSPhl--Ni>3
%gSGkPc7r=^rd;$=8G3l'&ogr[*j/B7I4h:H3$3e^O-^5D`@m<s7]:j;"OLlORF/`cdjSQtW<0esPUX^(:Piu5N^5f\UC:c1ZDd79
%e9tG%VDR<PU5P4XC8M=I8J^<_JLRPn+mI%4=agqiDQDsp#Tme.oN!u&1"Y2GoH5W,K\^O4(-io#(>^R78&<tJ6MbZ?>.TB3[+Q,I
%*I&i'k/B2GC7s?cc20\'an/+Gn6X*UF<0EXW'ZpQh_`PK?YD)+EA_EdX0cA)E_?3q%C]?0Zcf'54qe28*V"gtN^?(ffO&<P>I#XQ
%R*Vg0Sqlcu$`Md]Cn&$>U0X$gW]ZLh5.[mpa@6aPQp)UT+?>?!0;/jo]p;J-(rZp_0f:,2W<m!Q_Uf_i1,sP2h^B*pWXWRNe;3Sr
%m*=BdQ$MVsCi/c@S%Ygal8XR45QV:J:GpZFG+W2P!+i"gD=LIm!^09aSQFUTgT.QILl2M<el-RB,?s.B^*O[/"PMnuZFNsdaO3s4
%WI@fhhhS_h[G31[A,+'V9g$t9]L]I5Im8p%BK"JO(La,#,uOGM7+aq(ZO<RTnT^@7\?FF5M9OAr)*IlRqNMP2kk2Ma<HanW_aQ!b
%@?r99RA[>N35J<23snbg)V*gnR]BkeO[%i./[/G`W7o`$":L<g9'.?[>9W-_2ch3WXukY,LGVdl89>YrM-_GRW"EBiM@o?&gI^&'
%@*A1;1\>>+;%H3kWH-?[%I]TT:BcW#W7aG\8/om%iBTCMPF"^APXH\EN>AGdBZV^G6aq^faZOD4IpLW:..J^oCedHZ1_J75/s,,H
%f2N+EOi7(%PZ<)CX@P5+6E9lnpabee%'EP=P^[NF41$D`d6"=#SK]Ks#89JNnKd')MD?OW+aNZKFtrX4Og-fJjuP7ukZpbZI(TNL
%d,POjVqGobl9Dfd4L@WKC&:c"][JgHVjc1mC>"TX+f(>]E15djD\bf-1k\D9rJ\fd+pi'cG#,b0he:t":/---cUK%=nj2X0;_fS5
%XmcXKdoYeC6k?&.,TGjZN'r-Qa+S)M8AotJpPkM9GdD<(3qEY)&"[nhF[lc7e4No<74&``<nJ]c-5P7IK/R[;0e4W/&id:nn<>Lj
%\WUkP[6Fj^]NQRIr^m6Q1=Ke_pQk#4Zq):Jn=,+4be*;F_+B",Q/ns*fjD-Ckpi+sZasbP\G>h,IEgICPT7*^IA;Jt!$0%^E=%Qh
%Q'!&\qs)/1T)toiM=N7WMY+8bKT%d%p1<9_hB"FR?R.Uoqn=Y_oONigcu_pQ:!Z7*8le!HGqR=rN92P%lq`dTA>*s]NFR*gG\YF/
%3&Q[D+hfb)pGOt2ZV1X!Yc,913(=&DBO?E\$ph@uM^\80nIfS*qY;qa\hl_)S*$Uo2OF$@4`$Ed(i(*%U"5:,;W>9180Z=LE`fSH
%9;'qVjn\:4aI\s-c*bcA5i2-k.\BY6\YX)h.ZQn6K'%]KkaQN8K?&8"o^KkFQte17<UFcU#*+cbbn<Ob%b!AUgWs%]3YHq+1d^92
%H]?i>+pV.p]f2c\F<?jO%D8e4X`[>$Ku..tJgcL0L%mpmh!I!d?R-r-oj3:lA>pi3_[AR^]POmsi3UTuj$kDY#iGb&dBZ_f@r(ND
%lMR3]0.E8j<=eHi6O6E"#201/e$l4dk@o;f<6Q,7['i(Oe/i<OnL1\Ail-fm<OP\Y1KXp&LX.AN,*Jp)e<];f+LHDV010@Thiuof
%;JN"bG_I7[69*]'gZh/"[+J/j6rZ+.G/UY4"QUQ]'H^YBVB)L`s.*$4%WDVDd5hp^1_tH&6=`[(d65*,Y`bFuWTFSu-)VsX>.@"q
%o#Z3&^uj-SZMF_o?uX9tbN41'2;Zhr+:.aOfFS6XBu-<i)]7fN%=0:T#43uXn6^bGO<0`Vme,G5EMJ*l$6f,Q/E0!=hal`h)`'Y/
%4[LH+:4o-+0`n$X`\P+9JZ)M,EXU2\oM(hb_!HX7+E9>#bQr0D8/)S2$tqYHr$!-Q]_V7FAEJa1Q"`m[^^ZrX"FUA=;G`c+N::sG
%1(q^j-7K@T7-DT+`1X_G.c+6tRV9]hG(*(C3_r7`K]o#54B?:0DLsFkq+oldQ#;u-)G]+eJ8-?KCkB$pes*;dmKkX#'eU`0_Wj;W
%kU#<Ra0Pa=:2!S*":LS@@S&)XC]n1[,=/.S+/4<:=ob7hB`OV""U&,ef0U#u,6rO(?ZX_6fhf@+bqjQSpfOdnP6hWh:Ai."j!j-i
%:6Hi`pH^Gri#7QID0$pMfqk*?GK%51m,)-&OX?;\X@tlWS%`/71Kpcu](R*QLS1O'kk]JY)#NCQ<i7U)JK=(1PXckV`t>?Uqf<\"
%GO?sLe&Z*.&`s!A8HGr=#`GW\oPj=nW2Rl-1t;*&hg%\E,+"K6!W>+ne$3>e6-T78!^G#fIJ[s_p2Bru^\R?Qs7.93ofms'Va(1[
%hgYFd'`?eepeUqfqu>p<ronq4Qf%hthu:kbs4;bs_sbA<e%bl4XIR'*5L+cTo$@@0qu?MBrg/-3rKmQ\^\sN!)[SH/2uMLhrQ"s1
%hu2s"r'-ahf&6~>
%AI9_PrivateDataEnd
