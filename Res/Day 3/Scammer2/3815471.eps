%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Protect against cyber attacks - 2 up-02.eps
%%Creator: Adobe Illustrator(R) 24.0
%%For: Ayib Makmun B9
%%CreationDate: 4/29/2020
%%BoundingBox: 0 0 500 500
%%HiResBoundingBox: 0 0 500 500
%%CropBox: 0 0 500 500
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 24.0.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 24.0.1 x341 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c148 79.164050, 2019/10/01-18:03:16        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Protect against cyber attacks - 2 up-02</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2020-04-29T21:45:13+07:00</xmp:MetadataDate>
         <xmp:ModifyDate>2020-04-29T21:45:13+07:00</xmp:ModifyDate>
         <xmp:CreateDate>2020-04-29T21:45:13+07:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator 24.0 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEAYABgAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAAYAAAAAEA&#xA;AQBgAAAAAQAB/+ICQElDQ19QUk9GSUxFAAEBAAACMEFEQkUCEAAAbW50clJHQiBYWVogB88ABgAD&#xA;AAAAAAAAYWNzcEFQUEwAAAAAbm9uZQAAAAAAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1BREJFAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKY3BydAAAAPwAAAAy&#xA;ZGVzYwAAATAAAABrd3RwdAAAAZwAAAAUYmtwdAAAAbAAAAAUclRSQwAAAcQAAAAOZ1RSQwAAAdQA&#xA;AAAOYlRSQwAAAeQAAAAOclhZWgAAAfQAAAAUZ1hZWgAAAggAAAAUYlhZWgAAAhwAAAAUdGV4dAAA&#xA;AABDb3B5cmlnaHQgMTk5OSBBZG9iZSBTeXN0ZW1zIEluY29ycG9yYXRlZAAAAGRlc2MAAAAAAAAA&#xA;EUFkb2JlIFJHQiAoMTk5OCkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAA&#xA;ARbMWFlaIAAAAAAAAAAAAAAAAAAAAABjdXJ2AAAAAAAAAAECMwAAY3VydgAAAAAAAAABAjMAAGN1&#xA;cnYAAAAAAAAAAQIzAABYWVogAAAAAAAAnBgAAE+lAAAE/FhZWiAAAAAAAAA0jQAAoCwAAA+VWFla&#xA;IAAAAAAAACYxAAAQLwAAvpz/7gAOQWRvYmUAZMAAAAAB/9sAhAAGBAQEBQQGBQUGCQYFBgkLCAYG&#xA;CAsMCgoLCgoMEAwMDAwMDBAMDg8QDw4MExMUFBMTHBsbGxwfHx8fHx8fHx8fAQcHBw0MDRgQEBga&#xA;FREVGh8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx//wAAR&#xA;CAEAAQADAREAAhEBAxEB/8QBogAAAAcBAQEBAQAAAAAAAAAABAUDAgYBAAcICQoLAQACAgMBAQEB&#xA;AQAAAAAAAAABAAIDBAUGBwgJCgsQAAIBAwMCBAIGBwMEAgYCcwECAxEEAAUhEjFBUQYTYSJxgRQy&#xA;kaEHFbFCI8FS0eEzFmLwJHKC8SVDNFOSorJjc8I1RCeTo7M2F1RkdMPS4ggmgwkKGBmElEVGpLRW&#xA;01UoGvLj88TU5PRldYWVpbXF1eX1ZnaGlqa2xtbm9jdHV2d3h5ent8fX5/c4SFhoeIiYqLjI2Oj4&#xA;KTlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+hEAAgIBAgMFBQQFBgQIAwNtAQACEQMEIRIxQQVR&#xA;E2EiBnGBkTKhsfAUwdHhI0IVUmJy8TMkNEOCFpJTJaJjssIHc9I14kSDF1STCAkKGBkmNkUaJ2R0&#xA;VTfyo7PDKCnT4/OElKS0xNTk9GV1hZWltcXV5fVGVmZ2hpamtsbW5vZHV2d3h5ent8fX5/c4SFho&#xA;eIiYqLjI2Oj4OUlZaXmJmam5ydnp+So6SlpqeoqaqrrK2ur6/9oADAMBAAIRAxEAPwAmzsHyZ2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVVW2lPanzyXCWByBzW0o7V+WPCVGQKWRZ&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KoyCEIt&#xA;T9s/hl0Y00Tlatkmt2KqM8Idaj7Y/HIyjbZCVIPKW92KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2Kq1lbi5vLe2MgiE8iRmVuih2C8j06VwSNAlsxQ4piPKy9b/Mr&#xA;T/L3k3y1pVrpem2our69js/r89rbXU4Uqzs3K5KIWZlA+I8QCem2aTT5smWZJkeXKyB9j3Gp0WHD&#xA;iEYxjzqyBI/b/YyD8vbHyv5l8l6Trc+g6etxdw/vwLOBQZI2aNyAA1AWQkb5TqMuSEzHil8y5Ol0&#xA;2DJjEvDh/pR02Ym3nXywpugfIVrWxTlc0jh+16qWhSP9x8R+ul4e2yFvbLxDJ/qh38z7+/u3cSUs&#xA;A/yMduew93d/O2+FuTzr5bc2gH5f2wN+ga1Bih+00j2qo/7j4T9cVIu+zh/bEwyb/vDt5n39/csZ&#xA;YTX7mO/LYe7+b/O2+16YPKPk4yGP9CafzAqR9Vh6f8BmF+Zy/wA6XzLsvyOn/wBTh/pR+pQ1H8v/&#xA;ACbfWctq+kWsAkFBNbwxwyoezI6KCCD9HjtkoazLE3xE+/dhl7M084mJhEX3AAvmu9txbXlxbCQS&#xA;iCR4xKvRgjFeQ69aZ0sTYBfOssOGZjzoqOFrdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVXRRmR6Dp3OEC2MpUGVaF5E8x6vai606yL25f0xMzKgJ3qQXIqFpvTvkMurxYjUju5O&#xA;m7M1OojxQjcb933pr5i/K3zDpUUMkUR1KOTaT6uhZo2NNioqx+Y2ynB2jjyWD6fe5Ws7B1GAAgcY&#xA;P80cvgwS5twm4HwnYg9sy5Rp1WOdsl/5WV5gm06HT9Ths9XgtyDEdRt0uGFBxBJbqwH7R+LxOYJ0&#xA;WPisXH3GndjtrNwCMhGdfzhab2f5reZ7S2jtrOKxt7aMUihht+CKOtFVWAGE9l4juTL5rH2l1ERQ&#xA;EAPd+1W/5XD5y8bT/kS3/NeD+ScXmn/RPqe6Py/a2Pzh85k0Bta/8YW/5rx/krF5r/on1PdH5ftZ&#xA;vo+recNQ0RrmQxWWs82UrNAwQqv2QULBhXx/DNZmxYoToeqHkXotLqdTlw8RAhl7iD/awvzx57/M&#xA;HTH/AETdXdtC9zCJTPZIyuEcshUO+6n4TuBXwOZem0uGXqAOx6uq7R7T1eI+HIxBIu4vObe3DCp+&#xA;wNgM20Y28tOdMq0TyJ5j1a3FzaWojtG+xPMyxI1P5eRBb5gUynLrMWM0Tv5OXpeydRnHFGPp7zsg&#xA;Nd8s6tpEqRapamAygmJ6qysB14uhZTTuK5ZizQyi4m2jUaTNpyBkjw3+OmyQSxmN6Hp2OJFMYysL&#xA;cDJ2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KoqyUEHtU0rlkGnKXsHnW7vPLXlDy/ov&#xA;k+49A69fQWMOrMAxRbs19Y0A3bkN6dOmc/A+JklPIN4jl7n0Hw44cOPFhPpn/F1N+fnfy5IbynqX&#xA;mvQfzJtvKuoancaxp2p2Ml2Guy0ktvJA8kZIkZImZXMNfsgfFtWnJnLGE8RmAAY93w/WnBOeLOMd&#xA;ykJd5Jr6u/f+HyG/xMO/MXSZNO8z6lHI6v67vcpx7LKxdQ2w3GbjR5BPCPIV8nje1dOcOqkCecuL&#xA;/TG2H5Y4qvBccRxb7PY+GTjJrnC+SJVlYVUg5ZbSRTZdV3JpjagW9Z8mee9PvtHH6VvYLa8t29Jm&#xA;nlSMygAESUYg96H3zntXpTGfoBIL3fZfacZ4v3soiY23I383nn5kanFqHmu4eCaOe2hjiigliYOh&#xA;XgHNGUkGjuwzYaKBjjF83Q9r5hkzkgggAAUgtCtYbnUdPtZjxhnmijlPSiu4DHb2OZuSRjAkdA6n&#xA;BATzRieRkB9r32+rGgjiAiiioiRrRQqJsqqOgAzlAb3L6cQIihsAlXm61t73yfqKz7rFD9ZhdgKr&#xA;JGQVI8C32fpzJ0czHLGuuzr+1sUcmlnxdBxD3j9fL4vB7wDip71pnSTfPsSFypudirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdiqvayBWKno3T55OBa8kbep6F5t8oa15fs/KXmaxH1UKsf1h3&#xA;pCGQko5dmDxmncHr4DNXqNHkjM5MZ+H45/jq9N2f2tgnihgzRqv4r2Hcbuxtt9lcOyP0m9/KbyNP&#xA;djRQ0t+8ZD3CF7lmA+JYlmc8aEmvwmnjlB0+ozAcQofJzx2lodMTwHilXMb/AAB5fL4l5Pql9Pcz&#xA;TXFxIZbi4YvI7dSWNSc3lCMaDxPFKczKW5O596XZW2uxVcqPyB4nr4YQGJIcyPyJ4nr4YkKCFuBk&#xA;7FUZayVQCtGXLYnZoyR3epaT+aunSWaR67bTG7QANcW6o6yU/aZWZOLHvTb5ZqM3ZcuL0EV5vVaX&#xA;2kjwVmjIyHWNb/MjdKPOf5hLrFmdM02F7ewchriSWnqy8TVVopKqoIr1NcyNHoPDPFI3Jwe1e2/z&#xA;EfDxjhh1vmf1PP7qQMwUdF6/PM2ZdNjjShkGx2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVckbO&#xA;aKMIFoMgFcWYpu2/tk+BqOVZJauoqp5e3fAYMhkCjkGxVS5kUUPxD3yYmWBxgrmu3I2AH448aBiC&#xA;w1cc2ND0JPfBzZctltUHQV9z/TAndrm/jQeA2/Vja0GsCXYq3zfxqPA7/rw2ig3VD1FPcf0xXdcK&#xA;oOamp6Ajth5I57L1u3A3AP4YeNicQWvcyMKD4R7YmZSMYClkGatHauwqx4+3fJiDWcgXmzFNm398&#xA;PAxGVQeNkNGGQIptEgVuBLsVdirsVdirsVdirsVdirsVdirsVR0KBIwO53OXRFBxpmyz2xsF0ny9&#xA;pl1D5e/TF7qQkmuZLiKSRI4lcqiRqn2SyjlyP4jpr5z48kgZ8Ajyo9XfYcXg4ISGHxJ5LJ4gTQug&#xA;BXfzv70l87aLbaXq8YtYXtrW8t4ruK2kqXi9VfijJbc8WBzI0mUzhubIJF97gdqaaOLIOEGMZREg&#xA;DzjfQ+4sUukCuCOjfry2YcXGbCjkGxcAFFW3PZf64Uc2ixJqcUgNYFdirsVdirsVdirYYg1GFSGy&#xA;Awqux7r/AExRyW4Eq1qgZyT0X9eTgGvIaCIt/rVzJKtvGhEPPk0k0cX93E0zfbI/ZjNPHt3ozyiJ&#xA;APVyMHZ8skeIEIO01K4vLhLa0s5bi5lNI4YgXdj4Kqgk5OUgBZ2Cx0MpGgbPuRlza6jFWLULCexl&#xA;KiSJZ0ZOSnuvICoyInGY2ILXm008JHECL7xSBytXYq7FXYq7FXYq7FXYq7FXYq7FXYqmCEMgI7jL&#xA;w4pG76Gna8vNC0Y6RqSWzRy2UtyytGRJaoVM8dWV/tJXpQ175yUo1OXEO/5vqWOfFihwSH8Py6sG&#xA;/O24gkvNKSORXZY5SyqwJAZloSB40ObXsiJAl8HmPaqcTPGAeh/Q8qvP2fatT882s3mcSioAHI/7&#xA;EZBsK0kk1PXFLsCuxVD3d9aWicriQID0HUn5Ab4ktuPDKZqISmbzbbKaQwPJ7sQv/NWR43Nj2bI8&#xA;zTofNtsxpNA8fupDf8048ay7NkORtNrS+tLtOVvIHA6joR8wd8kC4WTDKBqQRGLU7FXAkGo64VXM&#xA;ARyH+yGKArWf7XvSh+WTg15VD6ppTSXL36XpmLEwC2RGjIptyZjUb+AwZPEv01Xm7PS5MPh+om/g&#xA;zz8kr3RtP1bU5Llk02Z4YhbzX5BBUOfVVZD6ABNU2709s13aWPJKIocW/T8F3XY+qwQnK5Ria2sj&#xA;477eSZfmrq9heWmjJb3sF40EUnqi3IYJyWMANR3FfhOPZuOUOMkEe/4uH7Q6iGXwhGUZUDy6fT5v&#xA;MMznRuxV2KuxV2KuxV2KuxV2KuxV2KuxVWgn4fC32f1ZOMqa5wtEiSMioYffllhq4StkuI1Gx5Hw&#xA;GAyCRAlCh3aStdz18KZXdluoALXbk1RsOw9sBKQGsCXYqhtRvUsrR523I2RfFj0GJNN2DEckhFg1&#xA;xcTXErSzMXdupOUvRQgIihyU8WbsVVLe4mt5VlhYo69CMWE4CQo8mc6depe2iTrsTs6+DDqMuBt5&#xA;3PiOORiicWl2Kto3Fqncdx7YQUELi7rJWu46eFMN0UUCEVHcRsNzxPgcsEg0mBC4yRgVLD78NhHC&#xA;UNPPz+Ffs/ryuUrbYQpRyDY7FXYq7FXYq7FXYq7FXYq7FXYq7FW2t5mQgBlJBAYdR774eEoEwC8Z&#xA;1fzR570rUJrK7vZY5ImZQWjRQ6g0DrVd1PY5zuXU54SMSS9/puz9FmgJxiCD5n5c0F/j7zf/ANXJ&#xA;/wDgY/8AmnK/z2b+c5H8jaX+YPt/WjoPPHmpNJuLqTUHaSWRLe3qse1P3krD4eoAVf8AZZZHWZRA&#xA;ni8v1/jzcafZGmOURENgCTz9w/Sfggf8feb/APq5P/wMf/NOV/ns385yf5G0v8wfb+t3+PvN/wD1&#xA;cn/4GP8A5px/PZv5y/yNpf5g+39bv8feb/8Aq5P/AMDH/wA04/ns385f5G0v8wfb+tkGj6rreo2A&#xA;m1K6acMxMKsFAAG1fhA65tNHOcocUjdur1Wmw4p1jjXejMy2hokDqaYq4EHoa4q3iqD1jVdb06wM&#xA;2m3TQBWBmVQpBB2r8QPTMTWTnGHFE1TfpdNhyzrJG+5j/wDj7zf/ANXJ/wDgY/8AmnNX+ezfznaf&#xA;yNpf5g+39bv8feb/APq5P/wMf/NOP57N/OX+RtL/ADB9v63f4+83/wDVyf8A4GP/AJpx/PZv5y/y&#xA;Npf5g+39aOn88ean0m3uo9QcSRSPb3FFTevxxMfh6kFl/wBjlktZlMAeLy/V+PJxodkaYZTEw2IB&#xA;HP3H9B+KB/x95v8A+rk//Ax/805X+ezfznJ/kbS/zB9v60bpHmjz3quoQ2VpeyySSsqkrGjBFJoX&#xA;ai7KO5yzFqc85CIJcfU9n6LDAzlEADzPy5vZlt5lQAhmIABY9T77Z0XCXgDMEtYEuxV2KuxV2Kux&#xA;V2KuxV2KuxV2Kplpum3NzNHb2sL3F1LskUalmPfYDLLERZ2ahGWSXDEEk9Ay2L8rPOLxhntooXb7&#xA;EUk0YdvkATmIe0sPffwdpH2f1RG8QPfIMU86/l7dfVTYeY9NeOOSohmNCFanWOVeS8h8/nkycOoj&#xA;V394aYx1WgyCRBgfsPltsXzTr+jXGi6vc6bcHk8DUVxsGQjkrD5qc5nPhOOZiej6NotVHUYo5I/x&#xA;fgt6hWPTNMhGweOW5Yf5UkrR/wDEYFxybRiPj9v7Fw75JnzEfkL++RS7KXKdiqpBC80yRJu8jBV+&#xA;ZNMlGJkQB1YzkIgk9HokEKQQRwoPgjUKv0CmdNGIjEDueWlIzlfUo2KyJAMhp/kj+OUyyno7LBog&#xA;N5c0QlpFUKkdSTQAVJJOVEudGAGwDLNL/K3Wr2RPrkK2VsaF3dgXp7IpO/8ArUzBydoY4/TuXMh2&#xA;fKf1Cgk/nPydJ5f1L0YZGmtpV9SB2FGIrQqabVXMrR63xI2XW9odliB9LFp4Ungkhf7EilW+kUzP&#xA;lESiR3uljIwlfUPO54XhmeJ9njYq3zBpnMyiYkg9HqYSEgCOqnkWTsVTHT6yaZqcJ3CRxXKj/Kjl&#xA;WP8A4jO2XY94yHx+39ri5tskD5mPzF/fENaBo1xrWr22m254vO1Gc7hUA5Mx+SjHBhOSYiOq63VR&#xA;0+KWSX8P4D6M8veT10vTY4NK0+X6vTeZY2YyMNizOB8RrnU4o4sI4QQHzXU5NRqpeJISlfLY18Ez&#xA;/Q2r/wDLDcf8in/plnjQ/nD5uP8AlM38yXyKEv8ATrmGnrwPDIRVRIpQkD5gYbjLkbQYTxmpAj3p&#xA;blbY7FXYq7FXYq7FXYq7FXYq2n21r4jCEHky3yx5lvdIea2gnFnBfFI7q9SMPPFGG+IxnY9D/TfI&#xA;6jTxyUSLMeQ6N2g108NxB4ROgZVcgPL8fazaDRNHv4/rVh5UvNbtGJ56rd3pgmmp1kSMspYHtQDN&#xA;ac047SyRgf5ojYDvo6TFlHFDBPLH+fKfCZedXukHmHzNFZ2c2jaPcXEunXUZW50/Uow8lnIr09ON&#xA;n3BHGlN+PUHl0y8GnMiJzA4hyMf4vx+NnW6zXCEDhxGRxyG8ZjeBvkL7vs7+Ll5t/Nqys5fM0Lte&#xA;wWzm0j5pIJixPOT4v3ccg6U75ru1YA5RuBt5+fk772ayzjpyOGUhxnlw9w75BhuvIsc9rEkiypHa&#xA;whZEDBTVeRI5hW6seozXZxRA8g7/AEZJEiRRMj+Nksyly3YqnXlW19bU/VI+GBS30nYfrzO7Px8W&#xA;S+5wO0cnDjrvZLfXbwXFuqbkMHYV41AOwqembXNKtnV6SIviPRkOiz37TGWS2tZVUVaC5WYoK9iY&#xA;pYmrjHTGY2NM8va/hS3iJfNk+jefbzTr+1uYfLukzuZljhhijuI5XcsFX05JZ51Q8iKEocw9T2ef&#xA;DJOSVfD9Qc3SduE5REY4p3J+d3ni7vriGPTNOtY4ndGt7mOad4yjcSryLLErGo7KMx8HYcJgHiLd&#xA;rPaXJikRwj3Mb8y/mL5h1awljvLLTXi5cUEMMyPz/mjZppOJ+jMiHZccPqjI7OOe355iIyhHf37M&#xA;AsLt5ri4V9iXaRRWtATuKjrmZhl0cHVxF8TGfNVr6Op+qB8M6hvpGx/Vmq7Qx8OS+92nZ2Tix13J&#xA;NmC57sVTPQkWSe6ieRYkktZg0j8io4ryBPAM3VR0GXYBZI8i4msJAiQLIkPxuzL8pbKzi8zTOt7B&#xA;cuLSTgkYmDA84/i/eRxjpXvmx7KgBlO4O3n5eToPaXLOWnA4ZRHGOfD3HukX2V5Es7afyHppl+Fx&#xA;6/Bx1/3ok298q15Pjy+H3ByuxIg6OF/0v90Udb6azT8ZjxiB3Ybk/LMYl2Ijvuwf84YYYr/TEhAV&#xA;BA9Kf6/XNx2T9Mve8n7UADJCv5p+95a/22p4nNgXQDk1gS7FXYq7FXYq7FXYq7FXYqjoZRIv+UOo&#xA;y6Jtx5xpkWj+YYrPSrq3mlvfraAHSHguGjjgctV24g9677b9NuuY+XAZSBHDX8Vjm5un1ghilEmf&#xA;F/BUiBE9fx93NIJJPtPI1STVmO5JOZPJwNyXg35mpdjzfdSXBqsyxvbnoPT4hQPoKkZy3aIPjEl9&#xA;J7AMfysRHpd+9JtV+K20yWtedrQ+xjmkSn/AqMx8vKJ8v0l2Gn2lMf0vvjEoSC1nnakSFvE9shDH&#xA;KXIN88kY800ttA6Gd/8AYr/XM7Hof5xcLJrf5rKND0+C3t3MSBeZ3Pcgf7ebTT4YwGwdPrMxlLct&#xA;alZv64lIqhAA9iMOSG9pwZRw09Ob8vfOE9gl9pNh+kLDVkW9huIZYgyC4HqGJ0kdG5JXiSKj6dsx&#xA;MPamKEeCRqUdnJ1PYefLkGWAuMhfPv6fBPfIn5WeYx5lsdT1y0Gm6bprrNHHLJEzySxmsYURs9KS&#xA;AOS1Pb2xe0e1McsZjA3ezsOx+w80MonkHLf3n9i/z1+WfmUa9qN/5fs11Cx1OQ3DelJEkkMsm8oY&#xA;SMnLkxLAr47+57O7VxwxcE9iGHbHYGXJn8TGLB3r+1jJ/LbzhBE+p6nYfozS9Iia8mkmliZn+rj1&#xA;fTRY3duUjCgJoP1ZkZ+0sUwIQNmW3zcbS9jZ8ROTIKEbPMdOjzbTLNxcGUCiAEV9z2zMxw3twtRl&#xA;HDXVdrmnwXFuhlQNwOx7gH/awajDGY3CNHmMZbFi9zoHUwP/ALFv65q8mh/ml3GPWfzkqntZ4GpK&#xA;hX37ffmFPHKPMObDJGXJGaV8NtqctacLWg9zJNGlP+BY5LFykfL9IaNRvKA/pfdGRTn8skuz5vtZ&#xA;Lc0WFZHuD1Hp8SpH0lgMyOzgfGBDr+3zH8rIS61XvfSGnecPMNlZR2tletHax19OMKhA5MWP2lJ6&#xA;k50M9LjmeIiy8Li7S1GKIhGVRHuRP+PPNv8A1cW/4CP/AJpyP5HD/N+9s/lnVfz/ALB+pKdb8wan&#xA;qRR9QuDcSxqViqFFATU/ZAyyGKGMekU42bU5dQQch4qSTArsVdirsVdirsVdirsVdirsVcCQag0P&#xA;jhVUFzNT7X4DDxFh4YWM7sasa4CbZAAMD/NfRvrGlQ6nGv72zbhKR/vqQgfg9PvzV9p4biJDo9L7&#xA;OarhynGeUvvH7GD2VotxpttFcIf3Mkroa9UkCUU+wKE/TmJgwcUBxPRZcvDkkY9QPsv9f2JnFAiK&#xA;FRQqjoBtmdGIA2cSUyeauseTprMkbZTmE8WFYz1HcfLLYSpxssOL3pqI4p4+zI2X0CHCsxL1/wDJ&#xA;bz9aWNonlXWJhCqMx0q7kICMHJYwOx+y3IkpXr08Aee7V7PlfiR37/1vXdidrRI8KZo9P1fq+Xdf&#xA;ZJIGYH4yQf2Txp+KnNBT1cZ06OBlA+IgD9kcafgoxpZTt43+dPn60vrR/KujzCZXZTqt3GQUUIQw&#xA;gRh9puQBenTp4gb/ALK7PlfiS27v1vKdt9rRA8KBs9f1fr+XfXIDHFBH2VFzoaADyPEZFKr2czHi&#xA;opGOg7n55ROVubihw+9BNHlVOSJKEsKOpV1DKex3yEog7FsjMjkll7aLb6bcxW6H99JFI5r0SMPV&#xA;R7EuD9GYOfBwwPC5eLLxZImXQH7a/V9rOPyo0b6vpU2pyL+9vG4RE/76jJH4vX7sy+zMNRMj1ed9&#xA;o9VxZRjHKP3n9jPFd1NVNM2gNPNEArzczU+1+Aw8RY+GFMkk1JqfHAzdgV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxVK/M0lsmgX31gco3iaPj4s44r+JyvMAYEFzOz4yOePDzBv5PNIkHEUFBTbMQB66RR&#xA;CJkwGolWRMkAwJVlTJgNZKIgaSNqoaeI7HJx2apgHmmMNzDKvCVQpPWu4OWg3zcSWMjcJ7p/mTzZ&#xA;p0Ih0zWrqC3UUSD1WeNR4IrEhfoyjJocUzZiHKw9q58YoSlXv/Q7UPMnmzUYTDqetXU9uwo8Hqsk&#xA;bDwdVIDfTjj0OKBsRC5u1c+QUZSr3/oSKa5hiXhEoanSmwGXk1ycWOMncpdO0kjVc18B2GVS3cuA&#xA;A5IdkyBDaCoumQIbAVB0yJDMFQlQcSCKim+QIbYl6X5Zktn0Cx+rjjGkSx8fBkHFvxGZeEAQADyP&#xA;aEZDPLi5k3800yxw3Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqw38w76iWtip+0TNIPYfCv8&#xA;cxtRLkHf9iYd5T+DErVqgr3GUxd3kCMQZYGgvSfyz/J+6866ddaidSXT7S3m+rofS9d3kCq7fDzi&#xA;4gK671ynNqRjNVbZh05mLumaj/nGUD/ppP8Apy/7OMp/lD+j9v7Gw6D+l9n7V4/5xpA/6aP/AKcv&#xA;+v8Akv5R/o/b+xiezv6X2ftXj/nG0D/pov8Apz/6/wCH+Uv6P2/sR/Jv9L7P2r0/5xzZPs+YyPlZ&#xA;/wDX/CO1P6P2/sYHsq+cvs/a5/8AnHNn+15jJ+dn/wBf8T2p/R+39ijsquUvs/asP/ONoP8A00X/&#xA;AE5/9f8AB/KX9H7f2M/5N/pfZ+1Yf+caQf8Apo/+nL/r/g/lH+j9v7GQ7O/pfZ+1Yf8AnGUH/ppP&#xA;+nL/ALOMj/KH9H7f2JGg/pfZ+1hX5mfk/deStOtdRGpLqFpcTfV3PpGB0kKs6/Dzl5Aqjb1y7DqR&#xA;kNVTXm05gLu3mzjLi1hB3TUAXucrk34wy38vL6qXVix+yRNGPY/C38Mu08uYdJ23h3jP4MyzJdA7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXlvmm9+t67dODVI29JPlH8J/GpzByyuRey7OxcGG&#xA;I79/mlsD8ZAex2OQid3LmLCYocvDil9L/wDONn/KDX3/AG05f+oeDNbrfrHuc7R/Sfe9YzDct2Ku&#xA;xV2KuxV2KuxV2KvJ/wDnJP8A5Qax/wC2nF/1Dz5maL6z7nE1n0j3vmhzmyLghLZ35SE9hsMokd3K&#xA;gKCZ+Vr36prtq5NEkb0n+Unwj8aHJ4pVIOJ2ji48Mh3b/J6lmc8a7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYqoX9yLWynuT0hjZ6ePEVpgkaFtmHHxzEe8vH2ZmYsxqzGpPuc1z3YFNYpR9vJyQHv0&#xA;OWxLizjRfTn/ADjUa+Rb7/tqS/8AUPBmv1v1j3OZpPpPves5iOU7FXYq7FXYq7FXYq7FXk3/ADkq&#xA;aeRbH/tqRf8AUPPmXovrPucXV/SPe+Y7iTihPfoM2Ei4cI2UBlTlNqzKwZTRlNQfcYoIt7BY3Iur&#xA;KC5HSaNXp4chWmbGJsW8Jmx8EzHuKvha3Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqkHne69DQZEB&#xA;o1w6RD7+R/Bcqzmouz7Jx8WcH+aLebZhPWuxVWt5OJK+OSiWuYfUX/OMpr5Dv/8AtqS/9Q9vmDrP&#xA;qHucjTD0/F65mK5DsVdiqorFIgy7FiQW8KYGXIOZi8RZtypADeNcV5hTwsXYq7FXkf8Azk0aeQ7A&#xA;/wDa0i/6h7jMrR/Ufc4+pHp+L5duJORA7DM6RceAUci2OxV6T5IuvX0GNCatbu8R+/kPwbM3Abi8&#xA;l2tj4c5P84Wn+WusdirsVdirsVdirsVdirsVdirsVdirsVdirDPzCmZmsrRKknnIyj6Av8cxtR0D&#xA;v+xIVxSPkGMRaVKwrIwT2G5ysYj1dxLUgckQul2w+0Wb5mn6smMQajqJKgsrNBy4Ci7kkk9Ppw8E&#xA;Qx8WZ6vp3/nHrSrqw/L4TTxiJdSu5Ly3jHX0mjjjUt7t6XL5EZp9TljOZrps7jDgljgOL+Lf8fJ6&#xA;blDY7FXYquV2WtOh6g7jAkFzOzUr0HQDYYqStwodirsVeZf85C6VdX/5fGaCMSrpt3HeXEZ6+ksc&#xA;kbFfdfV5fIHL9NljCYvrs15cEskDw/w7/j5vmI2Vm45cBRtwQSOv05uOCJdP4sx1U20u2P2Sy/I1&#xA;/XgOIMhqJIeXSpVFY2D+x2OQOI9G2OpB5sn/AC9mZWvbR9iOEiqfpVv4ZZp+odP23C+GQ8wzPMl0&#xA;DsVdirsVdirsVdirsVdirsVdirsVdirsVYb5nYPrDGm8Uaxj8X/42yqXN33Z4rF7zf6ErwOa7FVs&#xA;i8kZf5gR9+ApBovqL8iNfj1f8urJBGYptKY6dcKeheBEKsvzjdT865oJ4jCcvM29HLOMkY10jXye&#xA;hZFg7FXYq7FXYq7FXYq7FXnv576/HpH5dXqGMyzaqw063UdA86OWZvlGjH50yUMRnOPkbZxzjHGV&#xA;9Y183y7GvFFX+UAfdm/DzhNldhQ7FU08sME1hTTeWNoz+D/8a4Y83C7QF4vcb/QzLLXQuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxVi/mbTZ/rRvI1LxuAHpvxKim/tQZCQdxoM8eHgPMJDkHZuxVUNtc&#xA;C3e4MT+hGOTSUPGg98TsLYcceIRvcvff+cbtUtj5K1AN+7A1OQgnv/o8Hhmo1h4pWO53WljwxovS&#xA;ta82+XdE099R1S8W2s4yqvKVdgC5CrsisdyfDMaMCTQb5ZABZY1/yvP8qf8Aq/x/8ibn/qlln5ef&#xA;c1/mIefyP6nf8rz/ACp/6v8AH/yJuf8Aqlj+Xn3L+Yh5/I/qd/yvP8qf+r/H/wAibn/qlj+Xn3L+&#xA;Yh5/I/qd/wArz/Kn/q/x/wDIm5/6pY/l59y/mIefyP6nf8rz/Kn/AKv8f/Im5/6pY/l59y/mIefy&#xA;P6nf8rz/ACp/6v8AH/yJuf8Aqlj+Xn3L+Yh5/I/qZNo/mrQNZ02HUtMu1uLKfl6UwV1DcGKNsyq2&#xA;zKR0yuUCDRbIzBFvMf8AnJLWLRfJ+mxLWQvqKPUdgsEo7/62ZWjNSs9zj6qPFGg8FFtcG3S4ET+h&#xA;IOSyUPGh982w3Fum448Rje4U8WbsVT7yzps/1oXkilI0BCV25FhTb2ocnEOs1+ePDwDmWUZN07sV&#xA;dirsVdirsVdirsVdirsVbWnIV6VwhSjOVv4r+GW2HHqTuVv4r+GNhak7lb+K/hjYWpO5W/iv4Y2F&#xA;qSm8OnyGrxxOf8pVP6xjsyE8g5EuSDTkNUiiU+IVR+oY+lJnkPMldItnIhSRUdG2ZWAIPzBx2Ygz&#xA;BsWq2U6WMbR2MgtY2PJkgPpqWpSpC032yBhA9A2/mM386XzK67vGvIDBdzG4gahaKVi6Eg1FVaox&#xA;EIdwX8xm/nS+ZQH6N0T/AJZLb/kWn9MPDDuC+Pm/nS+Zd+jdE/5ZLb/kWn9MeGHcF8fN/Ol8y79G&#xA;6J/yyW3/ACLT+mPDDuC+Pm/nS+Zd+jdE/wCWS2/5Fp/THhh3BfHzfzpfMu/Ruif8slt/yLT+mPDD&#xA;uC+Pm/nS+Zd+jdE/5ZLb/kWn9MeGHcF8fN/Ol8ymFrfPaQLb2s5t4ErwhiYogqamirQCpNcHhw7g&#xA;v5jN/Ol8yp3s0V+ipfOLpENUWc+oAT3AatMRCA6BfzGb+dL5lTjWzjQJGqIi7KqgAD5AZPZqJmTZ&#xA;ta8GnOavFEx8Sqn9Yx9LITyDkS5IdPjNUjiQ/wCSqj9Qx2QZ5DzJVOVv4r+GNhjUncrfxX8MbC1J&#xA;3K38V/DGwtSdyt/FfwxsLUkG1ORp0rlRcgNYFdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVf/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:f939d75d-d1c0-fa45-ab43-94a844fc9115</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:f939d75d-d1c0-fa45-ab43-94a844fc9115</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:92d4992b-f356-499a-99e4-4c5be8eeda21</stRef:instanceID>
            <stRef:documentID>xmp.did:e57db6e0-bdf8-2440-bc10-3eb37f78f7de</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9055feea-6df3-418a-84b0-35eb367eec15</stEvt:instanceID>
                  <stEvt:when>2016-04-18T22:41:34+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:f939d75d-d1c0-fa45-ab43-94a844fc9115</stEvt:instanceID>
                  <stEvt:when>2020-04-29T21:45:13+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 24.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <illustrator:CreatorSubTool>Adobe Illustrator</illustrator:CreatorSubTool>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>500.000000</stDim:w>
            <stDim:h>500.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Farm</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=232 G=33 B=10</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>231</xmpG:red>
                           <xmpG:green>33</xmpG:green>
                           <xmpG:blue>10</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=155 G=223 B=186</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>154</xmpG:red>
                           <xmpG:green>222</xmpG:green>
                           <xmpG:blue>185</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=84 G=204 B=161</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>84</xmpG:red>
                           <xmpG:green>203</xmpG:green>
                           <xmpG:blue>160</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=38 G=114 B=178</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>38</xmpG:red>
                           <xmpG:green>114</xmpG:green>
                           <xmpG:blue>177</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=17 G=71 B=124</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>17</xmpG:red>
                           <xmpG:green>71</xmpG:green>
                           <xmpG:blue>124</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=3 G=37 B=78</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>3</xmpG:red>
                           <xmpG:green>37</xmpG:green>
                           <xmpG:blue>78</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Color Group 8</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=195 G=211 B=221</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>194</xmpG:red>
                           <xmpG:green>210</xmpG:green>
                           <xmpG:blue>220</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=220 G=232 B=239</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>219</xmpG:red>
                           <xmpG:green>231</xmpG:green>
                           <xmpG:blue>238</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=240 G=245 B=247</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>239</xmpG:red>
                           <xmpG:green>244</xmpG:green>
                           <xmpG:blue>246</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=249 G=251 B=252 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>248</xmpG:red>
                           <xmpG:green>250</xmpG:green>
                           <xmpG:blue>251</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Color Group 5</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=86 G=84 B=140</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>86</xmpG:red>
                           <xmpG:green>84</xmpG:green>
                           <xmpG:blue>139</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=244 G=178 B=152 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>243</xmpG:red>
                           <xmpG:green>177</xmpG:green>
                           <xmpG:blue>151</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Kulit orang</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>199</xmpG:green>
                           <xmpG:blue>174</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=90</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>65</xmpG:red>
                           <xmpG:green>64</xmpG:green>
                           <xmpG:blue>66</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=80</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>88</xmpG:red>
                           <xmpG:green>89</xmpG:green>
                           <xmpG:blue>91</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=70</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>109</xmpG:red>
                           <xmpG:green>110</xmpG:green>
                           <xmpG:blue>113</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=60</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>128</xmpG:red>
                           <xmpG:green>129</xmpG:green>
                           <xmpG:blue>132</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=50</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>146</xmpG:red>
                           <xmpG:green>148</xmpG:green>
                           <xmpG:blue>151</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=40</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>166</xmpG:red>
                           <xmpG:green>168</xmpG:green>
                           <xmpG:blue>171</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=30</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>187</xmpG:red>
                           <xmpG:green>189</xmpG:green>
                           <xmpG:blue>191</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=20</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>208</xmpG:red>
                           <xmpG:green>210</xmpG:green>
                           <xmpG:blue>211</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=10</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>229</xmpG:red>
                           <xmpG:green>230</xmpG:green>
                           <xmpG:blue>231</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=5</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>240</xmpG:red>
                           <xmpG:green>241</xmpG:green>
                           <xmpG:blue>241</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -500 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 500 li
500 500 li
500 0 li
cp
clp
gsave
500 500 mo
0 500 li
0 0 li
500 0 li
500 500 li
clp
500 500 mo
0 500 li
0 0 li
500 0 li
500 500 li
false sop
/0 
[/DeviceRGB] /CSA add_res
.219608 .576471 .729412 rgb
f
grestore
283.835 91.1763 mo
283.835 109.863 268.687 125.011 250 125.011 cv
231.313 125.011 216.165 109.863 216.165 91.1763 cv
216.165 72.4902 231.313 57.3418 250 57.3418 cv
268.687 57.3418 283.835 72.4902 283.835 91.1763 cv
cp
false sop
.313726 .647059 .827451 rgb
f
288.703 99.9688 mo
211.297 99.9688 li
205.496 99.9688 200.793 95.2661 200.793 89.4648 cv
200.793 83.6631 205.496 78.9604 211.297 78.9604 cv
288.703 78.9604 li
294.504 78.9604 299.207 83.6631 299.207 89.4648 cv
299.207 95.2661 294.504 99.9688 288.703 99.9688 cv
cp
.972549 .980392 .984314 rgb
f
211.297 79.4604 mo
205.78 79.4604 201.293 83.9482 201.293 89.4648 cv
201.293 94.981 205.78 99.4688 211.297 99.4688 cv
288.703 99.4688 li
294.22 99.4688 298.707 94.981 298.707 89.4648 cv
298.707 83.9482 294.22 79.4604 288.703 79.4604 cv
211.297 79.4604 li
cp
288.703 100.469 mo
211.297 100.469 li
205.229 100.469 200.293 95.5322 200.293 89.4648 cv
200.293 83.397 205.229 78.4604 211.297 78.4604 cv
288.703 78.4604 li
294.771 78.4604 299.707 83.397 299.707 89.4648 cv
299.707 95.5322 294.771 100.469 288.703 100.469 cv
cp
.14902 .447059 .694118 rgb
f
234.696 86.2026 mo
235.948 86.2026 li
237.438 92.0581 li
239.052 86.2026 li
240.376 86.2026 li
241.876 92.0269 li
243.376 86.2026 li
244.639 86.2026 li
242.508 93.3926 li
241.173 93.3926 li
239.662 87.9507 li
238.059 93.3926 li
236.734 93.4028 li
234.696 86.2026 li
cp
.0666667 .278431 .486275 rgb
f
245.027 86.2026 mo
246.279 86.2026 li
247.77 92.0581 li
249.383 86.2026 li
250.707 86.2026 li
252.207 92.0269 li
253.707 86.2026 li
254.97 86.2026 li
252.839 93.3926 li
251.504 93.3926 li
249.993 87.9507 li
248.39 93.3926 li
247.065 93.4028 li
245.027 86.2026 li
cp
f
255.358 86.2026 mo
256.61 86.2026 li
258.101 92.0581 li
259.714 86.2026 li
261.038 86.2026 li
262.538 92.0269 li
264.038 86.2026 li
265.301 86.2026 li
263.17 93.3926 li
261.835 93.3926 li
260.324 87.9507 li
258.721 93.3926 li
257.396 93.4028 li
255.358 86.2026 li
cp
f
272.231 122.651 mo
272.231 119.338 li
265.195 109.841 li
264.561 108.984 264.67 107.788 265.45 107.061 cv
266.302 106.267 267.638 106.32 268.424 107.179 cv
270.575 109.53 li
270.575 91.3384 li
270.575 90.1855 271.51 89.251 272.662 89.251 cv
273.815 89.251 274.75 90.1855 274.75 91.3384 cv
274.75 100.385 li
276.316 99.3809 278.391 100.379 278.584 102.229 cv
278.627 102.638 li
278.648 102.622 li
280.158 101.485 282.335 102.362 282.637 104.229 cv
283.371 103.417 li
284.175 102.531 285.575 102.556 286.347 103.471 cv
286.562 103.725 286.679 104.046 286.679 104.378 cv
286.679 110.026 li
286.679 111.493 286.396 112.946 285.845 114.305 cv
284.69 117.151 li
284.69 122.751 li
.858824 .905882 .933333 rgb
f
221.096 89.8818 mo
219.695 89.8818 li
219.695 86.4194 li
219.695 85.0894 218.613 84.0073 217.283 84.0073 cv
215.953 84.0073 214.871 85.0894 214.871 86.4194 cv
214.871 89.8818 li
213.471 89.8818 li
213.471 86.4194 li
213.471 84.3169 215.181 82.6069 217.283 82.6069 cv
219.385 82.6069 221.096 84.3169 221.096 86.4194 cv
221.096 89.8818 li
cp
.0666667 .278431 .486275 rgb
f
212.435 88.6782 mo
212.435 94.0732 li
212.435 94.5889 212.854 95.0073 213.369 95.0073 cv
221.197 95.0073 li
221.713 95.0073 222.131 94.5889 222.131 94.0732 cv
222.131 88.6782 li
222.131 88.1626 221.713 87.7441 221.197 87.7441 cv
213.369 87.7441 li
212.854 87.7441 212.435 88.1626 212.435 88.6782 cv
cp
f
218.096 90.5967 mo
218.096 90.1475 217.731 89.7837 217.283 89.7837 cv
216.834 89.7837 216.47 90.1475 216.47 90.5967 cv
216.47 90.9155 216.655 91.1885 216.923 91.3218 cv
216.923 92.6074 li
216.923 92.8066 217.084 92.9678 217.283 92.9678 cv
217.481 92.9678 217.644 92.8066 217.644 92.6074 cv
217.644 91.3218 li
217.91 91.1885 218.096 90.9155 218.096 90.5967 cv
cp
.972549 .980392 .984314 rgb
f
130.77 242.832 mo
130.77 257.738 118.687 269.821 103.781 269.821 cv
88.875 269.821 76.7915 257.738 76.7915 242.832 cv
76.7915 227.926 88.875 215.842 103.781 215.842 cv
118.687 215.842 130.77 227.926 130.77 242.832 cv
.313726 .647059 .827451 rgb
f
91.1372 243.282 mo
93.8564 246.123 li
96.4985 243.596 100.056 242.04 104 242.039 cv
107.945 242.04 111.502 243.596 114.144 246.123 cv
116.863 243.282 li
113.519 240.081 108.995 238.104 104 238.104 cv
99.0054 238.104 94.4809 240.081 91.1372 243.282 cv
104 229.732 mo
96.7597 229.733 90.1909 232.589 85.3443 237.229 cv
88.0649 240.072 li
92.2099 236.105 97.8095 233.669 104 233.668 cv
110.191 233.669 115.791 236.105 119.936 240.071 cv
122.656 237.229 li
117.81 232.589 111.241 229.733 104 229.732 cv
96.7808 249.179 mo
99.4999 252.02 li
100.675 250.897 102.247 250.209 104 250.208 cv
105.754 250.209 107.326 250.897 108.501 252.02 cv
111.22 249.179 li
109.343 247.383 106.804 246.272 104 246.272 cv
101.197 246.272 98.6572 247.383 96.7808 249.179 cv
104 253.633 mo
102.294 253.633 100.911 255.016 100.911 256.723 cv
100.911 258.428 102.294 259.811 104 259.811 cv
105.706 259.811 107.09 258.428 107.09 256.723 cv
107.09 255.016 105.706 253.633 104 253.633 cv
.972549 .980392 .984314 rgb
f
423.209 242.832 mo
423.209 257.738 411.125 269.821 396.219 269.821 cv
381.313 269.821 369.23 257.738 369.23 242.832 cv
369.23 227.926 381.313 215.842 396.219 215.842 cv
411.125 215.842 423.209 227.926 423.209 242.832 cv
.313726 .647059 .827451 rgb
f
413.055 252.872 mo
379.384 252.872 li
379.384 233.711 li
413.055 233.711 li
413.055 252.872 li
.937255 .956863 .964706 rgb
f
379.384 252.872 mo
396.219 239.848 li
413.055 252.872 li
379.384 252.872 li
cp
.858824 .905882 .933333 rgb
f
413.055 233.711 mo
396.219 246.817 li
379.384 233.711 li
413.055 233.711 li
.760784 .823529 .862745 rgb
f
148.418 174.676 mo
148.418 189.583 136.334 201.666 121.428 201.666 cv
106.522 201.666 94.4385 189.583 94.4385 174.676 cv
94.4385 159.771 106.522 147.687 121.428 147.687 cv
136.334 147.687 148.418 159.771 148.418 174.676 cv
cp
.313726 .647059 .827451 rgb
f
129.98 175.22 mo
126.838 175.22 li
126.838 167.453 li
126.838 164.47 124.412 162.043 121.428 162.043 cv
118.445 162.043 116.018 164.47 116.018 167.453 cv
116.018 175.22 li
112.876 175.22 li
112.876 167.453 li
112.876 162.738 116.713 158.901 121.428 158.901 cv
126.144 158.901 129.98 162.738 129.98 167.453 cv
129.98 175.22 li
cp
.972549 .980392 .984314 rgb
f
110.554 172.521 mo
110.554 184.621 li
110.554 185.778 111.492 186.716 112.649 186.716 cv
130.208 186.716 li
131.364 186.716 132.302 185.778 132.302 184.621 cv
132.302 172.521 li
132.302 171.363 131.364 170.425 130.208 170.425 cv
112.649 170.425 li
111.492 170.425 110.554 171.363 110.554 172.521 cv
cp
f
123.251 176.823 mo
123.251 175.816 122.435 175 121.428 175 cv
120.421 175 119.605 175.816 119.605 176.823 cv
119.605 177.538 120.021 178.15 120.62 178.449 cv
120.62 181.333 li
120.62 181.78 120.982 182.142 121.428 182.142 cv
121.875 182.142 122.236 181.78 122.236 181.333 cv
122.236 178.449 li
122.835 178.15 123.251 177.538 123.251 176.823 cv
cp
.0666667 .278431 .486275 rgb
f
405.562 174.676 mo
405.562 189.583 393.478 201.666 378.572 201.666 cv
363.666 201.666 351.582 189.583 351.582 174.676 cv
351.582 159.771 363.666 147.687 378.572 147.687 cv
393.478 147.687 405.562 159.771 405.562 174.676 cv
cp
.313726 .647059 .827451 rgb
f
396.403 185.299 mo
364.538 185.299 li
363.312 185.299 362.317 184.305 362.317 183.079 cv
362.317 166.859 li
362.317 165.633 363.312 164.639 364.538 164.639 cv
396.403 164.639 li
397.63 164.639 398.623 165.633 398.623 166.859 cv
398.623 183.079 li
398.623 184.305 397.63 185.299 396.403 185.299 cv
cp
.14902 .447059 .694118 rgb
f
392.64 185.299 mo
395.857 185.299 li
396.034 184.739 396.201 184.115 396.339 183.406 cv
392.64 183.406 li
392.64 185.299 li
cp
388.242 174.484 mo
391.953 174.484 li
391.953 169.695 li
391.226 169.718 390.521 169.833 389.847 170.017 cv
389.331 170.879 388.662 172.329 388.242 174.484 cv
cp
392.64 179.288 mo
392.64 182.719 li
396.458 182.719 li
396.62 181.715 396.731 180.583 396.747 179.288 cv
392.64 179.288 li
cp
396.559 185.284 mo
397.601 185.21 398.439 184.425 398.591 183.406 cv
397.033 183.406 li
396.896 184.107 396.733 184.73 396.559 185.284 cv
cp
395.605 170.315 mo
396.091 171.199 396.663 172.563 397.037 174.484 cv
398.623 174.484 li
398.623 172.253 li
397.76 171.425 396.743 170.756 395.605 170.315 cv
cp
387.843 178.601 mo
391.953 178.601 li
391.953 175.169 li
388.129 175.169 li
387.968 176.176 387.86 177.312 387.843 178.601 cv
cp
397.145 182.719 mo
398.623 182.719 li
398.623 179.288 li
397.436 179.288 li
397.418 180.583 397.305 181.713 397.145 182.719 cv
cp
397.439 178.601 mo
398.623 178.601 li
398.623 175.169 li
397.154 175.169 li
397.314 176.174 397.42 177.312 397.439 178.601 cv
cp
387.44 175.169 mo
383.802 175.169 li
383.328 176.223 383.053 177.382 383.008 178.601 cv
387.158 178.601 li
387.174 177.312 387.28 176.176 387.44 175.169 cv
cp
388.135 182.719 mo
391.953 182.719 li
391.953 179.288 li
387.847 179.288 li
387.864 180.583 387.976 181.715 388.135 182.719 cv
cp
396.466 175.169 mo
392.64 175.169 li
392.64 178.601 li
396.751 178.601 li
396.735 177.312 396.626 176.176 396.466 175.169 cv
cp
394.759 170.032 mo
394.08 169.841 393.372 169.726 392.64 169.693 cv
392.64 174.484 li
396.353 174.484 li
395.936 172.34 395.27 170.896 394.759 170.032 cv
cp
389.003 170.286 mo
386.926 171.064 385.207 172.565 384.146 174.484 cv
387.556 174.484 li
387.937 172.543 388.514 171.168 389.003 170.286 cv
cp
388.737 185.299 mo
391.953 185.299 li
391.953 183.406 li
388.256 183.406 li
388.395 184.115 388.561 184.739 388.737 185.299 cv
cp
384.155 183.406 mo
384.537 184.097 385.007 184.731 385.545 185.299 cv
388.042 185.299 li
387.864 184.741 387.699 184.113 387.562 183.406 cv
384.155 183.406 li
cp
387.16 179.288 mo
383.002 179.288 li
383.047 180.511 383.352 181.662 383.827 182.719 cv
387.448 182.719 li
387.288 181.713 387.178 180.583 387.16 179.288 cv
cp
.972549 .980392 .984314 rgb
f
370.019 169.179 mo
370.019 170.242 369.157 171.104 368.094 171.104 cv
367.03 171.104 366.168 170.242 366.168 169.179 cv
366.168 168.115 367.03 167.253 368.094 167.253 cv
369.157 167.253 370.019 168.115 370.019 169.179 cv
cp
.913725 .898039 .85098 rgb
f
371.944 169.179 mo
371.944 170.242 371.082 171.104 370.019 171.104 cv
368.955 171.104 368.094 170.242 368.094 169.179 cv
368.094 168.115 368.955 167.253 370.019 167.253 cv
371.082 167.253 371.944 168.115 371.944 169.179 cv
cp
.0666667 .278431 .486275 rgb
f
373.869 169.179 mo
373.869 170.242 373.008 171.104 371.944 171.104 cv
370.881 171.104 370.019 170.242 370.019 169.179 cv
370.019 168.115 370.881 167.253 371.944 167.253 cv
373.008 167.253 373.869 168.115 373.869 169.179 cv
cp
.972549 .980392 .984314 rgb
f
380.883 178.657 mo
366.168 178.657 li
366.168 177.832 li
380.883 177.832 li
380.883 178.657 li
cp
.913725 .898039 .85098 rgb
f
373.715 180.833 mo
366.168 180.833 li
366.168 180.009 li
373.715 180.009 li
373.715 180.833 li
cp
f
201.159 120.676 mo
201.159 135.583 189.075 147.666 174.17 147.666 cv
159.264 147.666 147.18 135.583 147.18 120.676 cv
147.18 105.771 159.264 93.687 174.17 93.687 cv
189.075 93.687 201.159 105.771 201.159 120.676 cv
cp
.313726 .647059 .827451 rgb
f
183.457 123.305 mo
182.257 127.556 178.381 130.331 174.176 130.332 cv
173.307 130.332 172.423 130.213 171.542 129.964 cv
167.29 128.764 164.516 124.888 164.515 120.682 cv
164.515 119.813 164.633 118.93 164.882 118.049 cv
166.082 113.797 169.958 111.022 174.164 111.021 cv
175.033 111.021 175.916 111.14 176.798 111.389 cv
181.049 112.589 183.823 116.465 183.824 120.671 cv
183.824 121.54 183.706 122.423 183.457 123.305 cv
cp
170.214 134.657 mo
170.214 134.657 li
170.325 134.264 li
170.214 134.657 li
cp
190.098 119.72 mo
189.953 117.302 189.258 114.98 188.104 112.91 cv
190.079 111.809 li
189.089 110.032 187.803 108.42 186.264 107.052 cv
184.76 108.744 li
183.021 107.2 180.926 106.004 178.541 105.324 cv
179.157 103.158 li
179.129 103.15 li
177.475 102.683 175.804 102.458 174.161 102.458 cv
173.804 102.458 173.447 102.469 173.093 102.49 cv
173.227 104.748 li
170.809 104.891 168.485 105.583 166.414 106.736 cv
165.314 104.76 li
163.537 105.749 161.924 107.034 160.555 108.572 cv
162.246 110.077 li
160.7 111.814 159.504 113.909 158.821 116.293 cv
156.655 115.675 li
156.644 115.717 li
156.176 117.372 155.951 119.042 155.951 120.685 cv
155.951 121.038 155.962 121.389 155.981 121.739 cv
158.24 121.607 li
158.381 124.025 159.072 126.349 160.223 128.421 cv
158.246 129.519 li
159.233 131.297 160.517 132.912 162.054 134.282 cv
163.561 132.592 li
165.297 134.139 167.391 135.337 169.774 136.021 cv
169.153 138.187 li
169.211 138.203 li
170.864 138.671 172.535 138.895 174.179 138.895 cv
174.546 138.895 174.911 138.884 175.276 138.862 cv
175.139 136.604 li
177.557 136.458 179.878 135.76 181.948 134.604 cv
183.051 136.579 li
184.826 135.587 186.438 134.3 187.804 132.759 cv
186.11 131.257 li
187.653 129.517 188.848 127.421 189.526 125.035 cv
191.691 125.65 li
191.695 125.636 li
192.164 123.982 192.389 122.311 192.388 120.668 cv
192.388 120.306 192.377 119.944 192.355 119.585 cv
190.098 119.72 li
cp
.972549 .980392 .984314 rgb
f
182.019 120.676 mo
182.019 125.011 178.504 128.525 174.17 128.525 cv
169.835 128.525 166.321 125.011 166.321 120.676 cv
166.321 116.342 169.835 112.828 174.17 112.828 cv
178.504 112.828 182.019 116.342 182.019 120.676 cv
cp
.0666667 .278431 .486275 rgb
f
177.27 120.874 mo
176.131 120.874 li
176.131 118.058 li
176.131 116.977 175.251 116.097 174.17 116.097 cv
173.088 116.097 172.208 116.977 172.208 118.058 cv
172.208 120.874 li
171.069 120.874 li
171.069 118.058 li
171.069 116.349 172.46 114.958 174.17 114.958 cv
175.879 114.958 177.27 116.349 177.27 118.058 cv
177.27 120.874 li
cp
.972549 .980392 .984314 rgb
f
170.228 119.895 mo
170.228 124.281 li
170.228 124.701 170.567 125.041 170.987 125.041 cv
177.353 125.041 li
177.771 125.041 178.111 124.701 178.111 124.281 cv
178.111 119.895 li
178.111 119.476 177.771 119.136 177.353 119.136 cv
170.987 119.136 li
170.567 119.136 170.228 119.476 170.228 119.895 cv
cp
f
174.83 121.455 mo
174.83 121.09 174.534 120.794 174.17 120.794 cv
173.805 120.794 173.509 121.09 173.509 121.455 cv
173.509 121.714 173.659 121.936 173.877 122.044 cv
173.877 123.09 li
173.877 123.251 174.008 123.383 174.17 123.383 cv
174.331 123.383 174.463 123.251 174.463 123.09 cv
174.463 122.044 li
174.68 121.936 174.83 121.714 174.83 121.455 cv
cp
.14902 .447059 .694118 rgb
f
352.82 120.676 mo
352.82 135.583 340.736 147.666 325.83 147.666 cv
310.925 147.666 298.841 135.583 298.841 120.676 cv
298.841 105.771 310.925 93.687 325.83 93.687 cv
340.736 93.687 352.82 105.771 352.82 120.676 cv
cp
.313726 .647059 .827451 rgb
f
341.058 120.01 mo
340.989 128.311 334.205 134.985 325.904 134.916 cv
317.604 134.848 310.93 128.063 310.998 119.763 cv
311.066 111.462 317.852 104.788 326.152 104.857 cv
334.453 104.925 341.126 111.71 341.058 120.01 cv
cp
.972549 .980392 .984314 rgb
f
338.215 119.987 mo
338.159 126.717 332.658 132.128 325.928 132.073 cv
319.197 132.018 313.786 126.517 313.842 119.786 cv
313.896 113.056 319.398 107.645 326.129 107.7 cv
332.859 107.755 338.271 113.256 338.215 119.987 cv
cp
.858824 .905882 .933333 rgb
f
328.907 122.804 mo
328.912 122.31 328.763 121.91 328.46 121.603 cv
328.157 121.295 327.569 120.987 326.694 120.678 cv
326.662 124.676 li
328.15 124.483 328.899 123.859 328.907 122.804 cv
cp
323.339 116.375 mo
323.334 116.896 323.485 117.315 323.791 117.632 cv
324.097 117.95 324.628 118.253 325.387 118.54 cv
325.419 114.563 li
324.74 114.667 324.225 114.876 323.872 115.192 cv
323.521 115.508 323.343 115.902 323.339 116.375 cv
cp
330.656 122.685 mo
330.648 123.616 330.293 124.382 329.589 124.983 cv
328.885 125.584 327.905 125.958 326.65 126.105 cv
326.631 128.489 li
325.305 128.479 li
325.323 126.187 li
324.556 126.18 323.813 126.114 323.095 125.988 cv
322.376 125.862 321.788 125.691 321.331 125.475 cv
321.344 123.872 li
321.911 124.13 322.565 124.343 323.308 124.51 cv
324.05 124.677 324.725 124.763 325.335 124.768 cv
325.372 120.246 li
323.972 119.789 322.991 119.264 322.431 118.669 cv
321.87 118.076 321.594 117.313 321.602 116.381 cv
321.608 115.483 321.963 114.75 322.663 114.18 cv
323.363 113.61 324.285 113.268 325.431 113.154 cv
325.446 111.284 li
326.772 111.295 li
326.757 113.145 li
328.018 113.189 329.231 113.453 330.399 113.935 cv
329.854 115.277 li
328.836 114.865 327.8 114.616 326.745 114.532 cv
326.709 118.993 li
327.781 119.344 328.584 119.685 329.116 120.015 cv
329.647 120.345 330.038 120.721 330.288 121.145 cv
330.538 121.568 330.661 122.082 330.656 122.685 cv
cp
.760784 .823529 .862745 rgb
f
250 139.855 mo
192.011 139.855 144.833 187.033 144.833 245.021 cv
144.833 303.011 192.011 350.188 250 350.188 cv
307.989 350.188 355.167 303.011 355.167 245.021 cv
355.167 187.033 307.989 139.855 250 139.855 cv
250 351.188 mo
191.459 351.188 143.833 303.562 143.833 245.021 cv
143.833 186.481 191.459 138.855 250 138.855 cv
308.541 138.855 356.167 186.481 356.167 245.021 cv
356.167 303.562 308.541 351.188 250 351.188 cv
.313726 .647059 .827451 rgb
f
250.5 139.355 mo
249.5 139.355 li
249.5 125.011 li
250.5 125.011 li
250.5 139.355 li
cp
f
196.734 153.762 mo
189.563 141.339 li
190.428 140.839 li
197.6 153.262 li
196.734 153.762 li
cp
f
158.24 192.622 mo
145.818 185.45 li
146.318 184.583 li
158.74 191.755 li
158.24 192.622 li
cp
f
144.333 245.521 mo
129.99 245.521 li
129.99 244.522 li
144.333 244.522 li
144.333 245.521 li
f
146.318 305.46 mo
145.818 304.595 li
158.24 297.423 li
158.74 298.288 li
146.318 305.46 li
f
190.428 349.204 mo
189.562 348.704 li
196.734 336.281 li
197.6 336.781 li
190.428 349.204 li
f
250.5 365.032 mo
249.5 365.032 li
249.5 350.689 li
250.5 350.689 li
250.5 365.032 li
f
309.572 349.204 mo
302.4 336.781 li
303.266 336.281 li
310.438 348.704 li
309.572 349.204 li
f
353.682 305.46 mo
341.26 298.288 li
341.76 297.423 li
354.182 304.595 li
353.682 305.46 li
f
370.011 245.521 mo
355.667 245.521 li
355.667 244.522 li
370.011 244.522 li
370.011 245.521 li
f
341.76 192.622 mo
341.26 191.755 li
353.682 184.583 li
354.182 185.45 li
341.76 192.622 li
cp
f
303.266 153.762 mo
302.4 153.262 li
309.572 140.839 li
310.438 141.339 li
303.266 153.762 li
cp
f
331.013 416.379 mo
168.987 416.379 li
168.987 299.362 li
331.013 299.362 li
331.013 416.379 li
.0117647 .145098 .305882 rgb
f
250 239.456 mo
274.74 239.456 341.487 263.128 353.905 276.321 cv
366.324 289.516 388.832 382.069 385.339 395.652 cv
381.847 409.234 347.211 410.693 316.603 396.187 cv
285.994 381.682 250 352.663 250 352.663 cv
250 239.456 li
f
250 239.456 mo
225.26 239.456 158.513 263.128 146.095 276.321 cv
133.676 289.516 111.168 382.069 114.661 395.652 cv
118.153 409.234 152.789 410.693 183.397 396.187 cv
214.006 381.682 250 352.663 250 352.663 cv
250 239.456 li
f
250 209.426 mo
250 209.415 li
249.873 209.415 249.749 209.42 249.623 209.42 cv
249.496 209.42 249.372 209.415 249.245 209.415 cv
249.245 209.426 li
205.815 209.931 195.202 253.62 199.253 259.854 cv
203.313 266.097 228.133 297.749 249.416 298.155 cv
249.416 298.174 li
249.623 298.165 li
249.829 298.174 li
249.829 298.155 li
271.112 297.749 295.933 266.097 299.992 259.854 cv
304.043 253.62 293.43 209.931 250 209.426 cv
f
217.206 229.07 mo
218.073 234.922 217.936 246.656 220.525 259.897 cv
223.114 273.139 231.503 284.173 250.433 284.173 cv
249.567 284.173 li
268.497 284.173 276.886 273.139 279.475 259.897 cv
282.063 246.656 281.927 234.922 282.794 229.07 cv
282.794 229.07 269.137 209.415 250 209.415 cv
230.863 209.415 217.206 229.07 217.206 229.07 cv
1 .780392 .682353 rgb
f
246.015 274.416 mo
246.017 274.939 247.861 275.355 250.135 275.347 cv
252.409 275.339 254.25 274.907 254.248 274.384 cv
254.246 273.861 252.401 273.444 250.128 273.453 cv
247.855 273.462 246.013 273.893 246.015 274.416 cv
.952941 .694118 .592157 rgb
f
244.643 264.257 mo
244.646 264.954 247.105 267.255 250.135 267.243 cv
253.166 267.231 255.621 264.912 255.618 264.215 cv
255.615 263.518 253.156 264.224 250.125 264.235 cv
249.108 264.239 248.156 264.164 247.34 264.09 cv
245.724 263.942 244.641 263.793 244.643 264.257 cv
.909804 .635294 .537255 rgb
f
261.948 271.623 mo
261.75 271.623 261.563 271.505 261.484 271.31 cv
261.48 271.302 261.218 270.781 260.102 270.581 cv
259.4 270.456 257.544 270.625 255.579 270.803 cv
253.742 270.97 251.661 271.158 250 271.158 cv
248.339 271.158 246.257 270.97 244.42 270.803 cv
242.455 270.625 240.598 270.457 239.897 270.581 cv
238.781 270.781 238.52 271.302 238.509 271.323 cv
238.392 271.567 238.102 271.682 237.853 271.573 cv
237.606 271.465 237.486 271.187 237.587 270.937 cv
237.629 270.832 238.049 269.896 239.722 269.597 cv
240.55 269.448 242.387 269.615 244.51 269.808 cv
246.325 269.972 248.384 270.158 250 270.158 cv
251.616 270.158 253.674 269.972 255.489 269.808 cv
257.612 269.615 259.449 269.447 260.277 269.597 cv
261.95 269.896 262.37 270.832 262.412 270.937 cv
262.515 271.193 262.391 271.484 262.134 271.588 cv
261.948 271.623 li
.886275 .603922 .505882 rgb
f
256.841 229.815 mo
254.633 230.263 252.178 230.228 250.413 231.628 cv
249.009 232.743 248.332 234.569 246.975 235.741 cv
244.833 237.589 241.675 237.352 238.846 237.394 cv
235.531 237.444 232.201 238.032 229.163 239.359 cv
225.174 241.102 220.931 241.881 218.361 245.808 cv
217.28 244.295 216.718 242.418 216.789 240.56 cv
216.815 239.872 216.926 239.18 216.831 238.498 cv
216.738 237.824 216.45 237.194 216.186 236.567 cv
215.298 234.454 214.643 232.222 214.494 229.934 cv
214.057 223.231 217.888 218.187 223.317 214.843 cv
238.985 205.192 259.68 203.719 276.069 212.086 cv
277.602 212.869 279.429 213.312 280.488 214.73 cv
281.437 216.001 281.845 217.66 282.181 219.182 cv
283.354 224.496 284.533 229.955 283.731 235.337 cv
283.531 236.68 283.209 238.004 283.047 239.352 cv
282.799 241.409 282.856 243.691 281.514 245.269 cv
281.379 244.149 280.329 243.39 279.806 242.391 cv
278.78 240.431 279.209 238.485 277.392 236.861 cv
276.162 235.762 274.574 235.171 273.498 233.871 cv
271.688 231.685 271.707 228.239 269.501 226.453 cv
268.962 226.017 267.015 224.236 266.462 224.139 cv
265.164 223.911 264.742 225.17 263.774 226.117 cv
261.879 227.972 259.442 229.288 256.841 229.815 cv
.337255 .329412 .545098 rgb
f
255.197 242.832 mo
254.576 242.832 254.003 243.115 253.624 243.607 cv
253.245 244.1 253.12 244.727 253.279 245.327 cv
255.66 254.268 li
256.446 257.222 259.131 259.284 262.187 259.284 cv
270.875 259.284 li
274.195 259.284 277.005 256.8 277.411 253.505 cv
278.453 245.06 li
278.523 244.487 278.353 243.934 277.971 243.502 cv
277.588 243.07 277.061 242.832 276.483 242.832 cv
255.197 242.832 li
.0666667 .278431 .486275 rgb
f
255.197 242.832 mo
254.576 242.832 254.003 243.115 253.624 243.607 cv
253.245 244.1 253.12 244.727 253.279 245.327 cv
255.66 254.268 li
256.446 257.222 259.131 259.284 262.187 259.284 cv
270.875 259.284 li
274.195 259.284 277.005 256.8 277.411 253.505 cv
278.453 245.06 li
278.523 244.487 278.353 243.934 277.971 243.502 cv
277.588 243.07 277.061 242.832 276.483 242.832 cv
255.197 242.832 li
270.875 261.74 mo
262.187 261.74 li
258.02 261.74 254.359 258.927 253.287 254.899 cv
250.906 245.959 li
250.549 244.615 250.83 243.213 251.677 242.111 cv
252.524 241.009 253.807 240.376 255.197 240.376 cv
276.483 240.376 li
277.755 240.376 278.968 240.923 279.81 241.876 cv
280.652 242.828 281.046 244.098 280.89 245.361 cv
279.849 253.806 li
279.29 258.329 275.433 261.74 270.875 261.74 cv
.0117647 .145098 .305882 rgb
f
223.517 242.832 mo
222.939 242.832 222.412 243.07 222.029 243.502 cv
221.647 243.934 221.477 244.487 221.547 245.06 cv
222.589 253.505 li
222.995 256.8 225.805 259.284 229.124 259.284 cv
237.813 259.284 li
240.869 259.284 243.554 257.222 244.34 254.268 cv
246.72 245.327 li
246.88 244.727 246.755 244.1 246.376 243.607 cv
245.997 243.115 245.424 242.832 244.803 242.832 cv
223.517 242.832 li
220.151 253.806 mo
219.11 245.361 li
218.954 244.098 219.348 242.828 220.189 241.876 cv
221.032 240.923 222.245 240.376 223.517 240.376 cv
244.803 240.376 li
246.193 240.376 247.476 241.009 248.323 242.111 cv
249.17 243.213 249.451 244.615 249.094 245.959 cv
246.713 254.899 li
245.641 258.927 241.98 261.74 237.813 261.74 cv
229.124 261.74 li
224.567 261.74 220.71 258.329 220.151 253.806 cv
f
223.517 242.832 mo
222.939 242.832 222.412 243.07 222.029 243.502 cv
221.647 243.934 221.477 244.487 221.547 245.06 cv
222.589 253.505 li
222.995 256.8 225.805 259.284 229.124 259.284 cv
237.813 259.284 li
240.869 259.284 243.554 257.222 244.34 254.268 cv
246.72 245.327 li
246.88 244.727 246.755 244.1 246.376 243.607 cv
245.997 243.115 245.424 242.832 244.803 242.832 cv
223.517 242.832 li
.0666667 .278431 .486275 rgb
f
252.397 245.983 mo
247.603 245.983 li
247.603 242.3 li
252.397 242.3 li
252.397 245.983 li
.0117647 .145098 .305882 rgb
f
283.794 245.983 mo
279.337 245.983 li
279.337 242.3 li
283.794 242.3 li
283.794 245.983 li
f
220.663 245.983 mo
216.206 245.983 li
216.206 242.3 li
220.663 242.3 li
220.663 245.983 li
f
261.421 258.991 mo
258.789 258.679 256.581 256.773 255.897 254.204 cv
255.622 253.17 li
260.893 243.078 li
269.733 243.078 li
261.421 258.991 li
.14902 .447059 .694118 rgb
f
270.139 242.832 mo
260.744 242.832 li
255.36 253.141 li
255.66 254.268 li
256.392 257.018 258.769 258.993 261.56 259.253 cv
270.139 242.832 li
269.328 243.323 mo
261.282 258.726 li
258.824 258.365 256.778 256.559 256.135 254.141 cv
255.884 253.198 li
261.042 243.323 li
269.328 243.323 li
.0666667 .278431 .486275 rgb
f
265.074 259.039 mo
273.412 243.078 li
276.483 243.078 li
276.881 243.078 277.249 243.209 277.559 243.46 cv
269.422 259.039 li
265.074 259.039 li
.14902 .447059 .694118 rgb
f
276.483 242.832 mo
273.263 242.832 li
264.67 259.284 li
269.57 259.284 li
277.864 243.405 li
277.493 243.04 277.012 242.832 276.483 242.832 cv
276.483 243.323 mo
276.757 243.323 277.014 243.396 277.242 243.537 cv
269.272 258.793 li
265.48 258.793 li
273.561 243.323 li
276.483 243.323 li
.0666667 .278431 .486275 rgb
f
229.125 259.039 mo
226.222 259.039 223.645 257.005 222.964 254.189 cv
228.769 243.078 li
237.608 243.078 li
229.271 259.039 li
229.125 259.039 li
.14902 .447059 .694118 rgb
f
238.014 242.832 mo
228.62 242.832 li
222.704 254.157 li
223.377 257.122 226.028 259.284 229.124 259.284 cv
229.42 259.284 li
238.014 242.832 li
237.203 243.323 mo
229.122 258.793 li
226.363 258.792 223.912 256.88 223.226 254.221 cv
228.917 243.323 li
237.203 243.323 li
.0666667 .278431 .486275 rgb
f
232.95 259.039 mo
241.287 243.078 li
244.803 243.078 li
245.054 243.078 245.306 243.138 245.542 243.254 cv
237.297 259.039 li
232.95 259.039 li
.14902 .447059 .694118 rgb
f
244.803 242.832 mo
241.139 242.832 li
232.545 259.284 li
237.445 259.284 li
245.869 243.157 li
245.555 242.954 245.191 242.832 244.803 242.832 cv
244.803 243.323 mo
244.936 243.323 245.069 243.342 245.198 243.381 cv
237.148 258.793 li
233.355 258.793 li
241.436 243.323 li
244.803 243.323 li
.0666667 .278431 .486275 rgb
f
315.989 364.257 mo
320.557 362.457 320.89 362.124 330.716 362.79 cv
340.543 363.457 368.265 365.406 379.615 375.376 cv
387.776 382.544 389.51 402.264 375.519 405.595 cv
361.528 408.926 351.139 409.865 328.653 401.038 cv
306.169 392.211 306.949 387.607 308.673 380.112 cv
310.396 372.617 315.989 364.257 315.989 364.257 cv
f
gsave
318.215 365.442 mo
326.053 364.872 329.55 371.118 329.55 376.614 cv
329.55 382.11 327.366 392.354 318.215 392.104 cv
309.064 391.854 307.065 384.397 309.813 378.757 cv
312.562 373.117 318.215 365.442 318.215 365.442 cv
clp
gsave
251.594 425.996 mo
309.193 425.996 li
309.193 368.396 li
251.594 368.396 li
251.594 425.996 li
clp
304.094 371.846 mo
307.094 371.846 li
307.094 372.146 li
304.094 372.146 li
.137255 .121569 .12549 rgb
f
289.693 371.846 mo
292.693 371.846 li
292.693 372.146 li
289.693 372.146 li
f
275.294 371.846 mo
278.294 371.846 li
278.294 372.146 li
275.294 372.146 li
f
260.893 371.846 mo
263.893 371.846 li
263.893 372.146 li
260.893 372.146 li
f
296.893 379.046 mo
299.893 379.046 li
299.893 379.346 li
296.893 379.346 li
f
282.494 379.046 mo
285.494 379.046 li
285.494 379.346 li
282.494 379.346 li
f
268.094 379.046 mo
271.094 379.046 li
271.094 379.346 li
268.094 379.346 li
f
253.693 379.046 mo
256.693 379.046 li
256.693 379.346 li
253.693 379.346 li
f
304.094 386.246 mo
307.094 386.246 li
307.094 386.546 li
304.094 386.546 li
f
289.693 386.246 mo
292.693 386.246 li
292.693 386.546 li
289.693 386.546 li
f
275.294 386.246 mo
278.294 386.246 li
278.294 386.546 li
275.294 386.546 li
f
260.893 386.246 mo
263.893 386.246 li
263.893 386.546 li
260.893 386.546 li
f
296.893 393.446 mo
299.893 393.446 li
299.893 393.746 li
296.893 393.746 li
f
282.494 393.446 mo
285.494 393.446 li
285.494 393.746 li
282.494 393.746 li
f
268.094 393.446 mo
271.094 393.446 li
271.094 393.746 li
268.094 393.746 li
f
253.693 393.446 mo
256.693 393.446 li
256.693 393.746 li
253.693 393.746 li
f
304.094 400.646 mo
307.094 400.646 li
307.094 400.946 li
304.094 400.946 li
f
289.693 400.646 mo
292.693 400.646 li
292.693 400.946 li
289.693 400.946 li
f
275.294 400.646 mo
278.294 400.646 li
278.294 400.946 li
275.294 400.946 li
f
260.893 400.646 mo
263.893 400.646 li
263.893 400.946 li
260.893 400.946 li
f
296.893 407.846 mo
299.893 407.846 li
299.893 408.146 li
296.893 408.146 li
f
282.494 407.846 mo
285.494 407.846 li
285.494 408.146 li
282.494 408.146 li
f
268.094 407.846 mo
271.094 407.846 li
271.094 408.146 li
268.094 408.146 li
f
253.693 407.846 mo
256.693 407.846 li
256.693 408.146 li
253.693 408.146 li
f
304.094 415.046 mo
307.094 415.046 li
307.094 415.346 li
304.094 415.346 li
f
289.693 415.046 mo
292.693 415.046 li
292.693 415.346 li
289.693 415.346 li
f
275.294 415.046 mo
278.294 415.046 li
278.294 415.346 li
275.294 415.346 li
f
260.893 415.046 mo
263.893 415.046 li
263.893 415.346 li
260.893 415.346 li
f
296.893 422.246 mo
299.893 422.246 li
299.893 422.546 li
296.893 422.546 li
f
282.494 422.246 mo
285.494 422.246 li
285.494 422.546 li
282.494 422.546 li
f
268.094 422.246 mo
271.094 422.246 li
271.094 422.546 li
268.094 422.546 li
f
253.693 422.246 mo
256.693 422.246 li
256.693 422.546 li
253.693 422.546 li
f
305.744 370.496 mo
305.744 373.496 li
305.444 373.496 li
305.444 370.496 li
f
291.343 370.496 mo
291.343 373.496 li
291.043 373.496 li
291.043 370.496 li
f
276.944 370.496 mo
276.944 373.496 li
276.644 373.496 li
276.644 370.496 li
f
262.543 370.496 mo
262.543 373.496 li
262.243 373.496 li
262.243 370.496 li
f
298.543 377.696 mo
298.543 380.696 li
298.243 380.696 li
298.243 377.696 li
f
284.144 377.696 mo
284.144 380.696 li
283.844 380.696 li
283.844 377.696 li
f
269.744 377.696 mo
269.744 380.696 li
269.444 380.696 li
269.444 377.696 li
f
255.343 377.696 mo
255.343 380.696 li
255.043 380.696 li
255.043 377.696 li
f
305.744 384.896 mo
305.744 387.896 li
305.444 387.896 li
305.444 384.896 li
f
291.343 384.896 mo
291.343 387.896 li
291.043 387.896 li
291.043 384.896 li
f
276.944 384.896 mo
276.944 387.896 li
276.644 387.896 li
276.644 384.896 li
f
262.543 384.896 mo
262.543 387.896 li
262.243 387.896 li
262.243 384.896 li
f
298.543 392.096 mo
298.543 395.096 li
298.243 395.096 li
298.243 392.096 li
f
284.144 392.096 mo
284.144 395.096 li
283.844 395.096 li
283.844 392.096 li
f
269.744 392.096 mo
269.744 395.096 li
269.444 395.096 li
269.444 392.096 li
f
255.343 392.096 mo
255.343 395.096 li
255.043 395.096 li
255.043 392.096 li
f
305.744 399.296 mo
305.744 402.296 li
305.444 402.296 li
305.444 399.296 li
f
291.343 399.296 mo
291.343 402.296 li
291.043 402.296 li
291.043 399.296 li
f
276.944 399.296 mo
276.944 402.296 li
276.644 402.296 li
276.644 399.296 li
f
262.543 399.296 mo
262.543 402.296 li
262.243 402.296 li
262.243 399.296 li
f
298.543 406.496 mo
298.543 409.496 li
298.243 409.496 li
298.243 406.496 li
f
284.144 406.496 mo
284.144 409.496 li
283.844 409.496 li
283.844 406.496 li
f
269.744 406.496 mo
269.744 409.496 li
269.444 409.496 li
269.444 406.496 li
f
255.343 406.496 mo
255.343 409.496 li
255.043 409.496 li
255.043 406.496 li
f
305.744 413.696 mo
305.744 416.696 li
305.444 416.696 li
305.444 413.696 li
f
291.343 413.696 mo
291.343 416.696 li
291.043 416.696 li
291.043 413.696 li
f
276.944 413.696 mo
276.944 416.696 li
276.644 416.696 li
276.644 413.696 li
f
262.543 413.696 mo
262.543 416.696 li
262.243 416.696 li
262.243 413.696 li
f
298.543 420.896 mo
298.543 423.896 li
298.243 423.896 li
298.243 420.896 li
f
284.144 420.896 mo
284.144 423.896 li
283.844 423.896 li
283.844 420.896 li
f
269.744 420.896 mo
269.744 423.896 li
269.444 423.896 li
269.444 420.896 li
f
255.343 420.896 mo
255.343 423.896 li
255.043 423.896 li
255.043 420.896 li
f
grestore
gsave
309.193 425.996 mo
366.793 425.996 li
366.793 368.396 li
309.193 368.396 li
309.193 425.996 li
clp
361.693 371.846 mo
364.693 371.846 li
364.693 372.146 li
361.693 372.146 li
.137255 .121569 .12549 rgb
f
347.293 371.846 mo
350.293 371.846 li
350.293 372.146 li
347.293 372.146 li
f
332.893 371.846 mo
335.893 371.846 li
335.893 372.146 li
332.893 372.146 li
f
318.493 371.846 mo
321.493 371.846 li
321.493 372.146 li
318.493 372.146 li
318.493 371.846 li
f
354.493 379.046 mo
357.493 379.046 li
357.493 379.346 li
354.493 379.346 li
f
340.094 379.046 mo
343.094 379.046 li
343.094 379.346 li
340.094 379.346 li
f
325.693 379.046 mo
328.693 379.046 li
328.693 379.346 li
325.693 379.346 li
f
311.293 379.046 mo
314.293 379.046 li
314.293 379.346 li
311.293 379.346 li
311.293 379.046 li
f
361.693 386.246 mo
364.693 386.246 li
364.693 386.546 li
361.693 386.546 li
f
347.293 386.246 mo
350.293 386.246 li
350.293 386.546 li
347.293 386.546 li
f
332.893 386.246 mo
335.893 386.246 li
335.893 386.546 li
332.893 386.546 li
f
318.493 386.246 mo
321.493 386.246 li
321.493 386.546 li
318.493 386.546 li
318.493 386.246 li
f
354.493 393.446 mo
357.493 393.446 li
357.493 393.746 li
354.493 393.746 li
f
340.094 393.446 mo
343.094 393.446 li
343.094 393.746 li
340.094 393.746 li
f
325.693 393.446 mo
328.693 393.446 li
328.693 393.746 li
325.693 393.746 li
f
311.293 393.446 mo
314.293 393.446 li
314.293 393.746 li
311.293 393.746 li
f
361.693 400.646 mo
364.693 400.646 li
364.693 400.946 li
361.693 400.946 li
f
347.293 400.646 mo
350.293 400.646 li
350.293 400.946 li
347.293 400.946 li
f
332.893 400.646 mo
335.893 400.646 li
335.893 400.946 li
332.893 400.946 li
f
318.493 400.646 mo
321.493 400.646 li
321.493 400.946 li
318.493 400.946 li
f
354.493 407.846 mo
357.493 407.846 li
357.493 408.146 li
354.493 408.146 li
f
340.094 407.846 mo
343.094 407.846 li
343.094 408.146 li
340.094 408.146 li
f
325.693 407.846 mo
328.693 407.846 li
328.693 408.146 li
325.693 408.146 li
f
311.293 407.846 mo
314.293 407.846 li
314.293 408.146 li
311.293 408.146 li
f
361.693 415.046 mo
364.693 415.046 li
364.693 415.346 li
361.693 415.346 li
f
347.293 415.046 mo
350.293 415.046 li
350.293 415.346 li
347.293 415.346 li
f
332.893 415.046 mo
335.893 415.046 li
335.893 415.346 li
332.893 415.346 li
f
318.493 415.046 mo
321.493 415.046 li
321.493 415.346 li
318.493 415.346 li
f
354.493 422.246 mo
357.493 422.246 li
357.493 422.546 li
354.493 422.546 li
f
340.094 422.246 mo
343.094 422.246 li
343.094 422.546 li
340.094 422.546 li
f
325.693 422.246 mo
328.693 422.246 li
328.693 422.546 li
325.693 422.546 li
f
311.293 422.246 mo
314.293 422.246 li
314.293 422.546 li
311.293 422.546 li
f
363.343 370.496 mo
363.343 373.496 li
363.043 373.496 li
363.043 370.496 li
f
348.943 370.496 mo
348.943 373.496 li
348.643 373.496 li
348.643 370.496 li
f
334.543 370.496 mo
334.543 373.496 li
334.243 373.496 li
334.243 370.496 li
f
320.143 370.496 mo
320.143 373.496 li
319.843 373.496 li
319.843 370.496 li
320.143 370.496 li
f
356.143 377.696 mo
356.143 380.696 li
355.843 380.696 li
355.843 377.696 li
f
341.744 377.696 mo
341.744 380.696 li
341.444 380.696 li
341.444 377.696 li
f
327.343 377.696 mo
327.343 380.696 li
327.043 380.696 li
327.043 377.696 li
f
312.943 377.696 mo
312.943 380.696 li
312.643 380.696 li
312.643 377.696 li
312.943 377.696 li
f
363.343 384.896 mo
363.343 387.896 li
363.043 387.896 li
363.043 384.896 li
f
348.943 384.896 mo
348.943 387.896 li
348.643 387.896 li
348.643 384.896 li
f
334.543 384.896 mo
334.543 387.896 li
334.243 387.896 li
334.243 384.896 li
f
320.143 384.896 mo
320.143 387.896 li
319.843 387.896 li
319.843 384.896 li
320.143 384.896 li
f
356.143 392.096 mo
356.143 395.096 li
355.843 395.096 li
355.843 392.096 li
f
341.744 392.096 mo
341.744 395.096 li
341.444 395.096 li
341.444 392.096 li
f
327.343 392.096 mo
327.343 395.096 li
327.043 395.096 li
327.043 392.096 li
f
312.943 392.096 mo
312.943 395.096 li
312.643 395.096 li
312.643 392.096 li
312.943 392.096 li
f
363.343 399.296 mo
363.343 402.296 li
363.043 402.296 li
363.043 399.296 li
f
348.943 399.296 mo
348.943 402.296 li
348.643 402.296 li
348.643 399.296 li
f
334.543 399.296 mo
334.543 402.296 li
334.243 402.296 li
334.243 399.296 li
f
320.143 399.296 mo
320.143 402.296 li
319.843 402.296 li
319.843 399.296 li
f
356.143 406.496 mo
356.143 409.496 li
355.843 409.496 li
355.843 406.496 li
f
341.744 406.496 mo
341.744 409.496 li
341.444 409.496 li
341.444 406.496 li
f
327.343 406.496 mo
327.343 409.496 li
327.043 409.496 li
327.043 406.496 li
f
312.943 406.496 mo
312.943 409.496 li
312.643 409.496 li
312.643 406.496 li
f
363.343 413.696 mo
363.343 416.696 li
363.043 416.696 li
363.043 413.696 li
f
348.943 413.696 mo
348.943 416.696 li
348.643 416.696 li
348.643 413.696 li
f
334.543 413.696 mo
334.543 416.696 li
334.243 416.696 li
334.243 413.696 li
f
320.143 413.696 mo
320.143 416.696 li
319.843 416.696 li
319.843 413.696 li
f
356.143 420.896 mo
356.143 423.896 li
355.843 423.896 li
355.843 420.896 li
f
341.744 420.896 mo
341.744 423.896 li
341.444 423.896 li
341.444 420.896 li
f
327.343 420.896 mo
327.343 423.896 li
327.043 423.896 li
327.043 420.896 li
f
312.943 420.896 mo
312.943 423.896 li
312.643 423.896 li
312.643 420.896 li
f
grestore
gsave
251.594 368.396 mo
309.193 368.396 li
309.193 310.797 li
251.594 310.797 li
251.594 368.396 li
clp
304.094 314.246 mo
307.094 314.246 li
307.094 314.546 li
304.094 314.546 li
.137255 .121569 .12549 rgb
f
289.693 314.246 mo
292.693 314.246 li
292.693 314.546 li
289.693 314.546 li
f
275.294 314.246 mo
278.294 314.246 li
278.294 314.546 li
275.294 314.546 li
f
260.893 314.246 mo
263.893 314.246 li
263.893 314.546 li
260.893 314.546 li
f
296.893 321.447 mo
299.893 321.447 li
299.893 321.747 li
296.893 321.747 li
f
282.494 321.447 mo
285.494 321.447 li
285.494 321.747 li
282.494 321.747 li
f
268.094 321.447 mo
271.094 321.447 li
271.094 321.747 li
268.094 321.747 li
f
253.693 321.447 mo
256.693 321.447 li
256.693 321.747 li
253.693 321.747 li
f
304.094 328.647 mo
307.094 328.647 li
307.094 328.947 li
304.094 328.947 li
f
289.693 328.647 mo
292.693 328.647 li
292.693 328.947 li
289.693 328.947 li
f
275.294 328.647 mo
278.294 328.647 li
278.294 328.947 li
275.294 328.947 li
f
260.893 328.647 mo
263.893 328.647 li
263.893 328.947 li
260.893 328.947 li
f
296.893 335.846 mo
299.893 335.846 li
299.893 336.146 li
296.893 336.146 li
f
282.494 335.846 mo
285.494 335.846 li
285.494 336.146 li
282.494 336.146 li
f
268.094 335.846 mo
271.094 335.846 li
271.094 336.146 li
268.094 336.146 li
f
253.693 335.846 mo
256.693 335.846 li
256.693 336.146 li
253.693 336.146 li
f
304.094 343.046 mo
307.094 343.046 li
307.094 343.346 li
304.094 343.346 li
f
289.693 343.046 mo
292.693 343.046 li
292.693 343.346 li
289.693 343.346 li
f
275.294 343.046 mo
278.294 343.046 li
278.294 343.346 li
275.294 343.346 li
f
260.893 343.046 mo
263.893 343.046 li
263.893 343.346 li
260.893 343.346 li
f
296.893 350.246 mo
299.893 350.246 li
299.893 350.546 li
296.893 350.546 li
f
282.494 350.246 mo
285.494 350.246 li
285.494 350.546 li
282.494 350.546 li
f
268.094 350.246 mo
271.094 350.246 li
271.094 350.546 li
268.094 350.546 li
f
253.693 350.246 mo
256.693 350.246 li
256.693 350.546 li
253.693 350.546 li
f
304.094 357.447 mo
307.094 357.447 li
307.094 357.747 li
304.094 357.747 li
f
289.693 357.447 mo
292.693 357.447 li
292.693 357.747 li
289.693 357.747 li
f
275.294 357.447 mo
278.294 357.447 li
278.294 357.747 li
275.294 357.747 li
f
260.893 357.447 mo
263.893 357.447 li
263.893 357.747 li
260.893 357.747 li
f
296.893 364.647 mo
299.893 364.647 li
299.893 364.947 li
296.893 364.947 li
f
282.494 364.647 mo
285.494 364.647 li
285.494 364.947 li
282.494 364.947 li
f
268.094 364.647 mo
271.094 364.647 li
271.094 364.947 li
268.094 364.947 li
f
253.693 364.647 mo
256.693 364.647 li
256.693 364.947 li
253.693 364.947 li
f
305.744 312.896 mo
305.744 315.896 li
305.444 315.896 li
305.444 312.896 li
f
291.343 312.896 mo
291.343 315.896 li
291.043 315.896 li
291.043 312.896 li
f
276.944 312.896 mo
276.944 315.896 li
276.644 315.896 li
276.644 312.896 li
f
262.543 312.896 mo
262.543 315.896 li
262.243 315.896 li
262.243 312.896 li
f
298.543 320.097 mo
298.543 323.097 li
298.243 323.097 li
298.243 320.097 li
f
284.144 320.097 mo
284.144 323.097 li
283.844 323.097 li
283.844 320.097 li
f
269.744 320.097 mo
269.744 323.097 li
269.444 323.097 li
269.444 320.097 li
f
255.343 320.097 mo
255.343 323.097 li
255.043 323.097 li
255.043 320.097 li
f
305.744 327.297 mo
305.744 330.297 li
305.444 330.297 li
305.444 327.297 li
f
291.343 327.297 mo
291.343 330.297 li
291.043 330.297 li
291.043 327.297 li
f
276.944 327.297 mo
276.944 330.297 li
276.644 330.297 li
276.644 327.297 li
f
262.543 327.297 mo
262.543 330.297 li
262.243 330.297 li
262.243 327.297 li
f
298.543 334.496 mo
298.543 337.496 li
298.243 337.496 li
298.243 334.496 li
f
284.144 334.496 mo
284.144 337.496 li
283.844 337.496 li
283.844 334.496 li
f
269.744 334.496 mo
269.744 337.496 li
269.444 337.496 li
269.444 334.496 li
f
255.343 334.496 mo
255.343 337.496 li
255.043 337.496 li
255.043 334.496 li
f
305.744 341.696 mo
305.744 344.696 li
305.444 344.696 li
305.444 341.696 li
f
291.343 341.696 mo
291.343 344.696 li
291.043 344.696 li
291.043 341.696 li
f
276.944 341.696 mo
276.944 344.696 li
276.644 344.696 li
276.644 341.696 li
f
262.543 341.696 mo
262.543 344.696 li
262.243 344.696 li
262.243 341.696 li
f
298.543 348.896 mo
298.543 351.896 li
298.243 351.896 li
298.243 348.896 li
f
284.144 348.896 mo
284.144 351.896 li
283.844 351.896 li
283.844 348.896 li
f
269.744 348.896 mo
269.744 351.896 li
269.444 351.896 li
269.444 348.896 li
f
255.343 348.896 mo
255.343 351.896 li
255.043 351.896 li
255.043 348.896 li
f
305.744 356.097 mo
305.744 359.097 li
305.444 359.097 li
305.444 356.097 li
f
291.343 356.097 mo
291.343 359.097 li
291.043 359.097 li
291.043 356.097 li
f
276.944 356.097 mo
276.944 359.097 li
276.644 359.097 li
276.644 356.097 li
f
262.543 356.097 mo
262.543 359.097 li
262.243 359.097 li
262.243 356.097 li
f
298.543 363.297 mo
298.543 366.297 li
298.243 366.297 li
298.243 363.297 li
f
284.144 363.297 mo
284.144 366.297 li
283.844 366.297 li
283.844 363.297 li
f
269.744 363.297 mo
269.744 366.297 li
269.444 366.297 li
269.444 363.297 li
f
255.343 363.297 mo
255.343 366.297 li
255.043 366.297 li
255.043 363.297 li
f
grestore
gsave
309.193 368.396 mo
366.793 368.396 li
366.793 310.797 li
309.193 310.797 li
309.193 368.396 li
clp
361.693 314.246 mo
364.693 314.246 li
364.693 314.546 li
361.693 314.546 li
.137255 .121569 .12549 rgb
f
347.293 314.246 mo
350.293 314.246 li
350.293 314.546 li
347.293 314.546 li
f
332.893 314.246 mo
335.893 314.246 li
335.893 314.546 li
332.893 314.546 li
f
318.493 314.246 mo
321.493 314.246 li
321.493 314.546 li
318.493 314.546 li
f
354.493 321.447 mo
357.493 321.447 li
357.493 321.747 li
354.493 321.747 li
f
340.094 321.447 mo
343.094 321.447 li
343.094 321.747 li
340.094 321.747 li
f
325.693 321.447 mo
328.693 321.447 li
328.693 321.747 li
325.693 321.747 li
f
311.293 321.447 mo
314.293 321.447 li
314.293 321.747 li
311.293 321.747 li
f
361.693 328.647 mo
364.693 328.647 li
364.693 328.947 li
361.693 328.947 li
f
347.293 328.647 mo
350.293 328.647 li
350.293 328.947 li
347.293 328.947 li
f
332.893 328.647 mo
335.893 328.647 li
335.893 328.947 li
332.893 328.947 li
f
318.493 328.647 mo
321.493 328.647 li
321.493 328.947 li
318.493 328.947 li
f
354.493 335.846 mo
357.493 335.846 li
357.493 336.146 li
354.493 336.146 li
f
340.094 335.846 mo
343.094 335.846 li
343.094 336.146 li
340.094 336.146 li
f
325.693 335.846 mo
328.693 335.846 li
328.693 336.146 li
325.693 336.146 li
f
311.293 335.846 mo
314.293 335.846 li
314.293 336.146 li
311.293 336.146 li
f
361.693 343.046 mo
364.693 343.046 li
364.693 343.346 li
361.693 343.346 li
f
347.293 343.046 mo
350.293 343.046 li
350.293 343.346 li
347.293 343.346 li
f
332.893 343.046 mo
335.893 343.046 li
335.893 343.346 li
332.893 343.346 li
f
318.493 343.046 mo
321.493 343.046 li
321.493 343.346 li
318.493 343.346 li
f
354.493 350.246 mo
357.493 350.246 li
357.493 350.546 li
354.493 350.546 li
f
340.094 350.246 mo
343.094 350.246 li
343.094 350.546 li
340.094 350.546 li
f
325.693 350.246 mo
328.693 350.246 li
328.693 350.546 li
325.693 350.546 li
f
311.293 350.246 mo
314.293 350.246 li
314.293 350.546 li
311.293 350.546 li
f
361.693 357.447 mo
364.693 357.447 li
364.693 357.747 li
361.693 357.747 li
f
347.293 357.447 mo
350.293 357.447 li
350.293 357.747 li
347.293 357.747 li
f
332.893 357.447 mo
335.893 357.447 li
335.893 357.747 li
332.893 357.747 li
f
318.493 357.447 mo
321.493 357.447 li
321.493 357.747 li
318.493 357.747 li
f
354.493 364.647 mo
357.493 364.647 li
357.493 364.947 li
354.493 364.947 li
f
340.094 364.647 mo
343.094 364.647 li
343.094 364.947 li
340.094 364.947 li
f
325.693 364.647 mo
328.693 364.647 li
328.693 364.947 li
325.693 364.947 li
f
311.293 364.647 mo
314.293 364.647 li
314.293 364.947 li
311.293 364.947 li
f
363.343 312.896 mo
363.343 315.896 li
363.043 315.896 li
363.043 312.896 li
f
348.943 312.896 mo
348.943 315.896 li
348.643 315.896 li
348.643 312.896 li
f
334.543 312.896 mo
334.543 315.896 li
334.243 315.896 li
334.243 312.896 li
f
320.143 312.896 mo
320.143 315.896 li
319.843 315.896 li
319.843 312.896 li
f
356.143 320.097 mo
356.143 323.097 li
355.843 323.097 li
355.843 320.097 li
f
341.744 320.097 mo
341.744 323.097 li
341.444 323.097 li
341.444 320.097 li
f
327.343 320.097 mo
327.343 323.097 li
327.043 323.097 li
327.043 320.097 li
f
312.943 320.097 mo
312.943 323.097 li
312.643 323.097 li
312.643 320.097 li
f
363.343 327.297 mo
363.343 330.297 li
363.043 330.297 li
363.043 327.297 li
f
348.943 327.297 mo
348.943 330.297 li
348.643 330.297 li
348.643 327.297 li
f
334.543 327.297 mo
334.543 330.297 li
334.243 330.297 li
334.243 327.297 li
f
320.143 327.297 mo
320.143 330.297 li
319.843 330.297 li
319.843 327.297 li
f
356.143 334.496 mo
356.143 337.496 li
355.843 337.496 li
355.843 334.496 li
f
341.744 334.496 mo
341.744 337.496 li
341.444 337.496 li
341.444 334.496 li
f
327.343 334.496 mo
327.343 337.496 li
327.043 337.496 li
327.043 334.496 li
f
312.943 334.496 mo
312.943 337.496 li
312.643 337.496 li
312.643 334.496 li
f
363.343 341.696 mo
363.343 344.696 li
363.043 344.696 li
363.043 341.696 li
f
348.943 341.696 mo
348.943 344.696 li
348.643 344.696 li
348.643 341.696 li
f
334.543 341.696 mo
334.543 344.696 li
334.243 344.696 li
334.243 341.696 li
f
320.143 341.696 mo
320.143 344.696 li
319.843 344.696 li
319.843 341.696 li
f
356.143 348.896 mo
356.143 351.896 li
355.843 351.896 li
355.843 348.896 li
f
341.744 348.896 mo
341.744 351.896 li
341.444 351.896 li
341.444 348.896 li
f
327.343 348.896 mo
327.343 351.896 li
327.043 351.896 li
327.043 348.896 li
f
312.943 348.896 mo
312.943 351.896 li
312.643 351.896 li
312.643 348.896 li
f
363.343 356.097 mo
363.343 359.097 li
363.043 359.097 li
363.043 356.097 li
f
348.943 356.097 mo
348.943 359.097 li
348.643 359.097 li
348.643 356.097 li
f
334.543 356.097 mo
334.543 359.097 li
334.243 359.097 li
334.243 356.097 li
f
320.143 356.097 mo
320.143 359.097 li
319.843 359.097 li
319.843 356.097 li
f
356.143 363.297 mo
356.143 366.297 li
355.843 366.297 li
355.843 363.297 li
f
341.744 363.297 mo
341.744 366.297 li
341.444 366.297 li
341.444 363.297 li
f
327.343 363.297 mo
327.343 366.297 li
327.043 366.297 li
327.043 363.297 li
f
312.943 363.297 mo
312.943 366.297 li
312.643 366.297 li
312.643 363.297 li
f
grestore
grestore
318.215 365.442 mo
326.053 364.872 329.55 371.118 329.55 376.614 cv
329.55 382.11 327.366 392.354 318.215 392.104 cv
309.064 391.854 307.065 384.397 309.813 378.757 cv
312.562 373.117 318.215 365.442 318.215 365.442 cv
.0117647 .145098 .305882 rgb
f
323.055 369.453 mo
318.732 363.525 303.734 359.46 296.739 358.46 cv
289.744 357.461 276.42 373.45 275.42 376.115 cv
274.421 378.779 283.415 387.773 287.412 388.439 cv
291.409 389.106 301.735 381.444 305.733 381.444 cv
309.73 381.444 309.397 391.438 323.055 385.108 cv
323.055 385.108 328.884 377.447 323.055 369.453 cv
1 .780392 .682353 rgb
f
184.011 364.257 mo
179.443 362.457 179.11 362.124 169.284 362.79 cv
159.457 363.457 131.736 365.406 120.385 375.376 cv
112.224 382.544 110.491 402.264 124.481 405.595 cv
138.472 408.926 148.861 409.865 171.346 401.038 cv
193.831 392.211 193.051 387.607 191.327 380.112 cv
189.604 372.617 184.011 364.257 184.011 364.257 cv
.0666667 .278431 .486275 rgb
f
181.785 365.442 mo
173.947 364.872 170.45 371.118 170.45 376.614 cv
170.45 382.11 172.634 392.354 181.785 392.104 cv
190.936 391.854 192.935 384.397 190.187 378.757 cv
187.438 373.117 181.785 365.442 181.785 365.442 cv
.0117647 .145098 .305882 rgb
f
176.945 369.453 mo
181.268 363.525 196.266 359.46 203.261 358.46 cv
210.256 357.461 223.58 373.45 224.58 376.115 cv
225.579 378.779 216.585 387.773 212.588 388.439 cv
208.591 389.106 198.265 381.444 194.267 381.444 cv
190.27 381.444 190.603 391.438 176.945 385.108 cv
176.945 385.108 171.116 377.447 176.945 369.453 cv
1 .780392 .682353 rgb
f
291.817 258.788 mo
288.451 263.965 267.753 290.365 250.141 290.365 cv
250 290.365 li
249.859 290.365 li
232.247 290.365 211.549 263.965 208.183 258.788 cv
204.825 253.621 213.687 217.224 250 217.224 cv
286.312 217.224 295.175 253.621 291.817 258.788 cv
278.791 190.749 mo
267.575 180.405 250 179.852 250 179.852 cv
250 179.852 232.425 180.405 221.209 190.749 cv
209.992 201.103 192.145 258.385 192.661 265.447 cv
193.177 272.499 236.13 299.283 250 299.283 cv
263.87 299.283 306.823 272.499 307.339 265.447 cv
307.855 258.385 290.008 201.103 278.791 190.749 cv
.0666667 .278431 .486275 rgb
f
140.009 286.941 mo
127.632 255.476 li
129.237 252.454 130.285 249.09 130.638 245.521 cv
143.834 245.521 li
143.881 255.583 145.336 265.326 148.01 274.548 cv
147.274 275.157 146.634 275.749 146.095 276.321 cv
144.249 278.282 142.181 281.994 140.009 286.941 cv
359.991 286.94 mo
357.818 281.993 355.751 278.282 353.905 276.321 cv
353.366 275.749 352.726 275.157 351.99 274.548 cv
354.664 265.326 356.119 255.583 356.166 245.521 cv
369.362 245.521 li
369.715 249.089 370.763 252.454 372.368 255.475 cv
359.991 286.94 li
148.856 273.872 mo
146.237 264.702 144.833 255.02 144.833 245.021 cv
144.833 231.476 147.409 218.517 152.093 206.615 cv
211.563 206.615 li
205.199 220.438 198.802 239.479 195.321 252.275 cv
175.814 259.076 157.291 267.351 148.856 273.872 cv
351.144 273.872 mo
342.709 267.351 324.186 259.076 304.679 252.275 cv
301.198 239.479 294.801 220.438 288.437 206.615 cv
347.907 206.615 li
352.591 218.517 355.167 231.476 355.167 245.021 cv
355.167 255.02 353.763 264.702 351.144 273.872 cv
369.282 244.522 mo
356.166 244.522 li
356.103 231.166 353.563 218.384 348.981 206.615 cv
391.587 206.615 li
387.374 217.325 li
376.813 220.987 369.23 231.024 369.23 242.832 cv
369.23 243.4 369.247 243.962 369.282 244.522 cv
143.834 244.522 mo
130.718 244.522 li
130.753 243.962 130.77 243.4 130.77 242.832 cv
130.77 231.024 123.187 220.987 112.625 217.325 cv
108.413 206.615 li
151.019 206.615 li
146.436 218.384 143.896 231.166 143.834 244.522 cv
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/0 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~7BtW:Z.h[Ng-i1!7'G93YLu=HfL2mp7'5'/Xk,qAejHOi6`\a(X49P:e3^1a6E/F"WRF/4dQsh[6)W*r
VpI`,cp=PT6)MsnV9V?&c9S2M5GZOgUWbrtbWhiF5,-4aTuoQmaZcE?4eTkZT?'0fa$$$74eBYVT#Npa
`B9^14Ij>PS&7@X_`O@)4.=#JR_h.S_)e""3gd]DR(k\K^H.^q3gRK@QG#;E]fD@j3L%0:Pe/o=]/Z"c
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~6psF26psF26pj=/6UO4.6UO4.6UO4.6UO4.6UO4.6UO4.6UO4.6UF++6:+"*6:+"*6:!n'5s[e&5s[e&
5s[e&5s[b$5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7Ou5<h@s5<h@s5<h=q5!D.o5!D.o5!D.o
5!D.n4Ztqk4Ztqk4Ztqk4Ztqj4?P_g4?P_g4?P_g4?P_g4?P_g4?P_g4?P_f4$,Mc4$,Mc4$,Mc4$,Mb
3]];_3]];_3]];_3]];_3B9)[3B9)[3B9)[3B9)[3B9)[3B9)[3B9)[3&ilW3&ilW3&ilW3&ilW2`EZS
~>
<~Yct@9Yct@9Yck76YHP.5YHG%2Y-+q1Y-"h.Xf\_-XfSV*XK8M)XK/D&X/i;%X/`2"WiE)!Wi;tsWMukr
WMuhpW2QYnW2QYnW2QVlVl-DhVP^5fVP^2dV5:#bV5:#bV59u`Unjf^Unjc\USFTZUSFQXU8"BVU8"?T
TqS0RTqS0QTV.sNTV.sNTV.sMT:_aISt;OFSt;OESXl=BSXl=BSXl=AS=H+>S=H+=S"#n9R[T\6R[T\6
R[T\6R@0J2R@0J2R$a8.R$a8.Q^=&*Q^=&*QBmi&QBmi&Q'IW"Q'IW"Q'IW"Pa%DsPEV2oPEV2oP*1uk
~>
<~gY:K;gY1B8g=b04g"G'3g"=s0f\"j/f[na,f@SX+f@JO(f%/F'f%&=$e^`4#e^W*ueC<!teC2mqe'c[m
daHRldaHRldaHOjdF$@hdF$=fd*U+bcd0q`cd0n^cHa_\cHa\Zc-=MXc-=JVbfn;Tbfn8RbKJ)PbKJ&N
b0%lLb0%lKaiVZGaN2HDaN2HCa2c6@a2c6?`l?$<`l?$;`Pog8`Pog7`5KU4`5KU3_o'C/_SX1,_SX1+
_83t(_83t(_83t(^qdb$^V@Ou^V@Ou^:q=q^:q=q]tM+m]tM+m]Y(ni]Y(ni]=Y\e]=Y\e]"5Ja]"5Ja
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
127.632 255.476 mo
121.096 238.859 li
122.656 237.229 li
121.645 236.261 120.559 235.371 119.408 234.568 cv
112.625 217.325 li
123.187 220.987 130.77 231.024 130.77 242.832 cv
130.77 243.4 130.753 243.962 130.718 244.522 cv
129.99 244.522 li
129.99 245.521 li
130.638 245.521 li
130.285 249.09 129.237 252.454 127.632 255.476 cv
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/1 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~>e]E,^?Ae7kZba`>J0-']]WJ2k$#CZ>.`p#]B*5-j]]7W>.N]s\`?o'jB9"Q=h*Ko\)UT"i`N\L=LR3k
[c(>riE3MH=LI'g[,>#mi)d8B<jU[aZJS]ghH$r=<O(C\Z/&Ebh,U]7<Nt7YYM<-]gJkB2<3FtTY1cjW
g/G--;lnYNXP$ORfi+s(;lePLX4U@Nf2AX#;Q88GWRaqGekrBs;5i#BVq"YBePW6o;5Vi?VUSG=dnlmi
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/1 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~>?b<9>?b<9>?Y36>$>*5>$>*5>$>*5>$5!2=]nm1=]nm1=]nm1=]nm1=]nm1=]nm1=]ed.=BJ[-=BJ[-
=BJ[-=BJX+='&I)='&I)='&I)='&I)='&I)='&I)='&I)='&F'<`W7%<`W7%<`W4#<E3%!<E3%!<E3%!
<E3$u<)cgr<)cgr<)cgr<)cgr<)cgr<)cgr<)cgq;c?Un;c?Un;c?Un;c?Um;GpCj;GpCj;GpCj;GpCj
;GpCj;GpCj;GpCj;GpCj;,L1f;,L1f;,L1f:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:f'tb:JXb^
~>
<~]tM+m]tM+m]tD"j]Y(ni]Xtef]=Y\e]=Y\e]=PSb]"5Ja]"5Ja]",A^\[f8]\[]/Z\@B&Y\@8rV\$riU
\$riU\$rfS[^NWQ[^NWQ[^NTO[C*EM[C*BK['[3I['[3I['[0GZa7!EZa6sCZEgdAZEga?Z*CR=Z*CR=
Z*CR<Yct@9Yct@9Yct@8YHP.5YHP.4Y-+q1Y-+q1Y-+q0Xf\_-Xf\_,XK8M)XK8M(X/i;%X/i;%X/i;$
WiE)!WiE)!WiE)!WMukrWMukrW2QYnW2QYnW2QYnVl-GjVl-GjVP^5fVP^5fVP^5fV5:#bV5:#bUnjf^
~>
<~kND$kkND$kkND$kkN:phk2tggk2tggk2k^djlPUcjlPUcjlGL`jQ,C_jQ,C_jQ#:\j5]1[j5]1[j5T(X
io8tWio8tWio8qUiSibSiSibSiSi_Qi8EPOi8EPOi8EMMhr!>Khr!>Khr!;IhVR,GhVR,GhVR)Eh;-oC
h;-oCh;-oBgt^]?gt^]>gY:K;gY:K;gY:K:g=k97g=k97g=k96g"G'3g"G'3g"G'2f\"j/f\"j/f\"j.
f@SX+f@SX+f@SX+f%/F'f%/F'f%/F'e^`4#e^`4#e^`4#eC<!teC<!teC<!te'ldpe'ldpe'ldpdaHRl
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /1 /Gradient get_res exec grestore
}if
np
121.096 238.859 mo
119.408 234.568 li
120.559 235.371 121.645 236.261 122.656 237.229 cv
121.096 238.859 li
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/2 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~q"t$bqu-<erV69gq"t$bqu-<erV69gq"t$bqu-<erV69gq"t$bqu-<erV69fq"t!aqu$6dr:p0eq"t!a
qu$6dr:p0eq"t!aqu$6dr:p0eq"t!aqu$6dr:p0eq"t!aqu$6dr:p0eq"t!aqu$6dr:p0eq"t!aqY^-b
r:p-dq"jp`qY^-br:p-cq"jm_qYU'aqtU$bq"jm_qYU'aqtU$bq"jm_qYU'aqtU$bq"jm_qYU'aqtU$b
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/2 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
247 <~qYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'b
qYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'b
qYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'aq>'j^q>'j^q>'j^q>'j^q>'j^q>'j^
q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^
~>
<~r;?Kjr;?Kjr;?Kjr;?Kjr;?Kjr;?Kjr;?Kjr;?Kjr;?Kjr;?Kjr;?Kjr;?Kjr;?Kjr;?Kjr;?Kjr;6Bg
qtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9f
qtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9fqtp9e
qYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'bqYL'b
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /2 /Gradient get_res exec grestore
}if
np
372.368 255.475 mo
370.763 252.454 369.715 249.089 369.362 245.521 cv
370.011 245.521 li
370.011 244.522 li
369.282 244.522 li
369.247 243.962 369.23 243.4 369.23 242.832 cv
369.23 231.024 376.813 220.987 387.374 217.325 cv
380.929 233.711 li
379.384 233.711 li
379.384 237.639 li
372.368 255.475 li
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
379.384 237.639 mo
379.384 233.711 li
380.929 233.711 li
379.384 233.711 li
380.566 234.632 li
379.384 237.639 li
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/3 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~nFueKp\OCRqXF7UnFueKp\OCRqXF7UnFueKp\OCRqXF7UnFl_JpA+4Oq=++RnFl\IpA+4Oq=++RnFl\I
pA+4Oq=++RnFl\IpA+4Oq=++RnFlYHpA".Nq!e"PnFlYHp%\%Lq!dtOn+HJEp%\"Kq![nNn+HJEp%\"K
p[@eLn+HGDp%RqJp[@eLn+HGDp%RqJp[@eLn+HGDo_7hHp[@bKn+?>Bo_.bGp@%YIn+?>Bo_.bGp@%YI
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/3 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6
n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6
n*f`6n*f`6n*f`6n*f`6n*f`5mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2
mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2
~>
<~p@e4Rp@e4Rp@e4Rp@e4Rp@e4Rp@e4Rp@e4Rp@e4Rp@e4Rp@e4Rp@e4Rp@e4Rp@\+Op%A"Np%A"Np%A"N
p%A"Np%A"Np%A"Np%A"Np%A"Np%A"Np%A"Np%A"Np%A"Np%A"Np%A"Np%A"Np%A"Np%A"Np%A"Np%A"N
p%A"Np%A"Mo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJ
o^qeJo^qeJo^qeJo^qeJo^qeJo^qeJoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMSF
~>
<~q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q=sa[q"XXZq"XXZ
q"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XUXp\4FVp\4FVp\4FV
p\4FVp\4FVp\4FVp\4FVp\4FVp\4FVp\4FVp\4FVp\4FVp\4FVp\4FUp@e4Rp@e4Rp@e4Rp@e4Rp@e4R
p@e4Rp@e4Rp@e4Rp@e4Rp@e4Rp@e4Rp@e4Rp@e4Rp@e4Rp%A"Np%A"Np%A"Np%A"Np%A"Np%A"Np%A"N
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /3 /Gradient get_res exec grestore
}if
np
380.566 234.632 mo
379.384 233.711 li
380.929 233.711 li
380.566 234.632 li
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/4 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~`o$1'hX/>>m)IoK`np(%h<`/;lc.cH`nft#h<W&9lG_QD`SBath!)f5l,DHB`S9XrgZZW2kf)<?`S0Op
g?6H/kJc0<`S0Lng?-?,k/>s8`7a7jg#^0*ji#g5`7X.hf]:!'jM]^3`7O%ffAjg$j29L._q3ncf&FTu
iks@+_q*eaf&=NsiPX4(_q!\_e_n?qi5=(%_pmS]eDJ-mhSRe!_UIAYe)%sjh87Xs_UI>XdbVdggqqLp
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/4 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~`Pog8`Pog8`Pog8`Pog8`Pog8`Pog8`Pog8`Pog8`Pog8`Pog8`Pf^5`5KU4`5KU4`5KU4`5KU4`5KU4
`5KU4`5KU4`5KU4`5KU4`5KU4`5KU4`5KU4`5KU4`5KU4`5KR2_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0
_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C/_SX1,_SX1,_SX1,_SX1,_SX1,_SX1,_SX1,_SX1,
_SX1,_SX1,_SX1,_SX1,_SX1,_SX1,_SX1,_83t(_83t(_83t(_83t(_83t(_83t(_83t(_83t(_83t(
~>
<~hVR,GhVI#Dh;-oCh;-oCh;-oCh;$f@gt^]?gt^]?gt^]?gt^]?gt^]?gtUT<gY:K;gY:K;gY:K;gY:K;
gY:H9g=k97g=k97g=k97g=k65g"G'3g"G'3g"G'3g"G'3g"G'3g"G$1f\"j/f\"j/f\"j/f\"j/f\"g-
f@SX+f@SX+f@SX+f@SX+f@SX*f%/F'f%/F'f%/F'f%/F'f%/F&e^`4#e^`4#e^`4#e^`4#e^`4"eC<!t
eC<!teC<!teC<!teC<!te'ldpe'ldpe'ldpe'ldpe'ldpdaHRldaHRldaHRldaHRldaHRldF$@hdF$@h
~>
<~m-O**m-O**m-F!'lg*m&lg*m&lg*m&lg!d#lK[["lK[["lK[["lKRQtl07Hsl07Hsl0.?pkih6okih6o
kih6okih3mkND$kkND$kkND$kkND!ik2tggk2tggk2tggk2tdejlPUcjlPUcjlPRajQ,C_jQ,C_jQ,C_
jQ,C^j5]1[j5]1[j5]1[j5]1Zio8tWio8tWio8tViSibSiSibSiSibSiSibRi8EPOi8EPOi8EPOi8EPN
hr!>Khr!>Khr!>Khr!>KhVR,GhVR,GhVR,Gh;-oCh;-oCh;-oCh;-oCgt^]?gt^]?gt^]?gt^]?gY:K;
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /4 /Gradient get_res exec grestore
}if
np
148.01 274.548 mo
145.336 265.326 143.881 255.583 143.834 245.521 cv
144.333 245.521 li
144.333 244.522 li
143.834 244.522 li
143.896 231.166 146.436 218.384 151.019 206.615 cv
152.093 206.615 li
147.409 218.517 144.833 231.476 144.833 245.021 cv
144.833 255.02 146.237 264.702 148.856 273.872 cv
148.562 274.099 148.279 274.325 148.01 274.548 cv
351.99 274.548 mo
351.721 274.325 351.438 274.099 351.144 273.872 cv
353.763 264.702 355.167 255.02 355.167 245.021 cv
355.167 231.476 352.591 218.517 347.907 206.615 cv
348.981 206.615 li
353.563 218.384 356.103 231.166 356.166 244.522 cv
355.667 244.522 li
355.667 245.521 li
356.166 245.521 li
356.119 255.583 354.664 265.326 351.99 274.548 cv
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
144.333 245.521 mo
143.834 245.521 li
130.638 245.521 li
129.99 245.521 li
129.99 244.522 li
130.718 244.522 li
143.834 244.522 li
144.333 244.522 li
144.333 245.521 li
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
370.011 245.521 mo
369.362 245.521 li
356.166 245.521 li
355.667 245.521 li
355.667 244.522 li
356.166 244.522 li
369.282 244.522 li
370.011 244.522 li
370.011 245.521 li
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
308.533 392.108 mo
250 392.108 li
191.467 392.108 li
195.479 389.963 199.523 387.64 203.507 385.232 cv
206.763 386.897 210.008 388.481 212.056 388.481 cv
212.243 388.481 212.421 388.467 212.588 388.439 cv
216.585 387.773 225.579 378.779 224.58 376.115 cv
224.37 375.555 223.615 374.405 222.488 372.949 cv
238.26 362.128 250 352.663 250 352.663 cv
250 352.663 li
250 352.663 261.74 362.128 277.512 372.949 cv
276.385 374.405 275.63 375.555 275.42 376.115 cv
274.421 378.779 283.415 387.773 287.412 388.439 cv
287.579 388.467 287.757 388.481 287.944 388.481 cv
289.992 388.481 293.237 386.897 296.493 385.232 cv
300.477 387.64 304.521 389.963 308.533 392.108 cv
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/5 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~'OmjP@A=KDTbCe+'4%4D?(DU5S.]%p&mC\9=dTe'Q4[2`&QY),<K[nmOUtHP&5nQ";2l)`N"8aB%o.rk
9o'9QL(6k1%SME`8qILDJIP/"$q>[S7=>S5HON;g$U].H6?`f'FpgQW$9rS=5&gomE!\XF#s2u13c#*`
C'Zh6#WHE&2J*4PAHt&&#;foq1LUMD?j8>m"ts6d/mJQ4=p6K\"Y<aZ.old&<<OaM"=R.N-W'sm:BMn<
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/5 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~',)#m',)#m'+toj&eYfi&eYfi&eYfi&eP]f&J5Te&J5Te&J5Te&J,Kb&.fBa&.fBa&.]9^%hB0]%hB0]
%hB0]%hB-[%LrsY%LrsY%LrsY%LrpW%1NaU%1NaU%1NaU%1N^S$k*OQ$k*OQ$k*LO$O[=M$O[=M$O[=M
$O[=L$47+I$47+I$47+I$47+H#mgnE#mgnE#mgnD#RC\A#RC\A#RC\A#RC\@#6tJ=#6tJ=#6tJ=#6tJ<
"pP89"pP89"pP89"pP89"U,&5"U,&5"U,&5"9\i1"9\i1"9\i1"9\i1!s8W-!s8W-!s8W-!s8W-!WiE)
~>
<~@:<SQ@:3JN?sd8J?X@&E?!LW>>[1N=>[(E:>?Y36>$5!2=]ed.=BAR*=&r@&<`N."<E)ps<)Z^o;c6Lk
;Gp@h;,L.d:f'tb:f'q`:/4MX9he;T9MA)P91qlL8kM]J8kMZH8P)HD84Z6@7Rfg877BU46psF26psC0
6UO4-6:+")5s[e%5X7S!5<h@r5!D.n4Ztqj4?P_f4$,Mb3]];^3B9)[3B9)Z3&`cS2E!HN2)R6J1c.$F
1G^gC1G^gC1,:U?0ekC;0JG.5/hSb//M/P+/M/P+/1`>'.k<,#.Olnt.4H\p-n$Jl-RU8h-71&d,pai`
~>
<~USFTZUS=KVTqJ'OTV%jKT:VXFSXc4?S=?":R[KS3R@'A/R$X/*QBd`#Q'@MsPEM)lP*(lhOcYZcO,f6\
NfK-[NK&mUN/W[QMMd7IM2@%ELkphAL5(D9KnY25K7ec-JqAQ)JUr?%It)orIXZ]nI=6KjH[C'bH?sj^
G^+IWGB\7SG'8%OF`__HF)uDCEcH)<E,]c7Df9Q3DJa6,Ci!p'CMITuBk_9pBP;'lB4baeAS#F`A7T4\
@q0"Y@U`bS?smAM?XI/I?=$oC>[1N=>?b97=]nm1=BJ[-='&F'<E3%!<)cgr;c?Rl;,L1f:f'q`:/4PZ
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /5 /Gradient get_res exec grestore
}if
np
311.514 392.108 mo
308.533 392.108 li
304.521 389.963 300.477 387.64 296.493 385.232 cv
300.1 383.388 303.72 381.444 305.733 381.444 cv
306.691 381.444 307.401 382.019 308.114 382.805 cv
307.568 386.104 307.882 388.944 311.514 392.108 cv
277.512 372.949 mo
261.74 362.128 250 352.663 250 352.663 cv
250 299.283 li
250 299.283 li
263.87 299.283 306.823 272.499 307.339 265.447 cv
307.468 263.684 306.451 258.788 304.679 252.275 cv
324.186 259.076 342.709 267.351 351.144 273.872 cv
351.438 274.099 351.721 274.325 351.99 274.548 cv
352.726 275.157 353.366 275.749 353.905 276.321 cv
355.751 278.282 357.818 281.993 359.991 286.94 cv
330.171 362.753 li
327.405 362.57 325.427 362.473 323.894 362.473 cv
320.277 362.473 319.139 363.016 315.996 364.254 cv
309.737 361.184 301.435 359.131 296.739 358.46 cv
296.528 358.43 296.311 358.415 296.088 358.415 cv
290.498 358.415 281.581 367.687 277.512 372.949 cv
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
191.467 392.108 mo
188.486 392.108 li
192.118 388.944 192.432 386.104 191.886 382.805 cv
192.599 382.019 193.309 381.444 194.267 381.444 cv
196.28 381.444 199.9 383.388 203.507 385.232 cv
199.523 387.64 195.479 389.963 191.467 392.108 cv
222.488 372.949 mo
218.419 367.687 209.502 358.415 203.912 358.415 cv
203.689 358.415 203.472 358.43 203.261 358.46 cv
198.565 359.131 190.262 361.184 184.004 364.254 cv
180.861 363.016 179.723 362.473 176.106 362.473 cv
174.573 362.473 172.595 362.57 169.829 362.753 cv
140.009 286.941 li
142.181 281.994 144.249 278.282 146.095 276.321 cv
146.634 275.749 147.274 275.157 148.01 274.548 cv
148.279 274.325 148.562 274.099 148.856 273.872 cv
157.291 267.351 175.814 259.076 195.321 252.275 cv
193.549 258.788 192.532 263.684 192.661 265.447 cv
193.177 272.499 236.13 299.283 250 299.283 cv
250 352.663 li
250 352.663 238.26 362.128 222.488 372.949 cv
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
318.624 392.108 mo
311.514 392.108 li
307.882 388.944 307.568 386.104 308.114 382.805 cv
308.299 383.008 308.484 383.226 308.674 383.452 cv
308.626 387.841 311.488 391.92 318.215 392.104 cv
318.325 392.107 318.434 392.108 318.542 392.108 cv
318.569 392.108 318.597 392.108 318.624 392.108 cv
318.624 392.108 li
327.474 369.608 mo
325.801 367.161 323.082 365.406 319.199 365.406 cv
318.88 365.406 318.553 365.418 318.218 365.442 cv
317.516 365.031 316.771 364.635 315.996 364.254 cv
319.139 363.016 320.277 362.473 323.894 362.473 cv
325.427 362.473 327.405 362.57 330.171 362.753 cv
327.474 369.608 li
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/6 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~+aUdEHFk;F\fc7.+Et=<G./Q9[NBV!+*=h2F0Zj-Yo[qi*cS;'Dlt+!XW;;\*GqktD6"XmWZ5fR*,;Dk
Br;n`VAj0E)eYrbAtp8UU)IU9).T9V@\+HHSJbk+(grgM@%%p>R2B7t(gWIF>a?42Po!Vg(L!"==csS'
OVV&\(06J3<K7hpN>5EO'iU#*;i2;fM%igC'MsQ!:PKNXKbI16'2=)m9S*mMJJ(V+&kRQc8:D.AI1\ts
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/6 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~+<VdL+<VdL+<M[I+!2RH+!2RH+!2RH+!)IE*Zc@D*Zc@D*Zc@D*ZZ7A*??.@*??.@*?6%=*#oq<*#oq<
*#oq<*#on:)]K_8)]K_8)]K_8)]K\6)B'M4)B'M4)B'M4)B'J2)&X;0)&X;0)&X8.(`4),(`4),(`4),
(`4)+(Ddl((Ddl((Ddl((Ddl((Ddl((Ddl((Ddl'()@Z$()@Z$()@Z$()@Z#'bqGu'bqGu'bqGu'bqGt
'GM5q'GM5q'GM5q'GM5q',)#m',)#m',)#m&eYfi&eYfi&eYfi&eYfi&J5Te&J5Te&J5Te&J5Te&.fBa
~>
<~H$O[\H$O[\H$FRYG^"@UGBS.QG'.qMF`__IFE;MEF)uDDF)l;AEcH)=EH,u;E,TZ5Df0H1DJj?0DJa6-
D/F**Ci!p(Ci!m&CMR["C2.HsBk_6oBP;$kB4kggAnGXeAnGUcAS#C_A7T4]@q/tW@U`bS@:<SQ@:<PO
?smAL?XI/I?XI/H?=$rD?!U`@>[1N<>?b<8>$>*4=]nm1=]nm0=BJ[,='&I)=&r@%<E3$u<)cgr<)cgq
;c?Un;GpCj;GpCj;,L1f:f'tb:JXb^:/4PZ9he>V9MA,R9MA,R91qoN8kM]J8kMZH84Z9B7n6'>7n6'>
~>
<~]=Y\e]=PSb]",A^\[]/Z\@8rV\$i`R[^ENN[C!<IZa-mBZE^[>Z*:I:Yck76YHG%2Y-"h.XfSV*XK/D&
X/i;%X/i8#WiE%tWMuhpW2QVlVl-DhVP^2dV59u`Unjc\USFQXU8"?TTV.pLT:_^HSt;LDSXl:@S=H(<
S"#n9R[T\5R@0J1R$a8-Q^=&)QBmi%Q'IW!Pa%DrPEV2nP*1ujOcbcfOH>QbO,o?^NfK-ZNK&pVN/W^R
Mi3LOMMd:KM2@(GLkpkCLPLY?L5(G;KnY57KS5#3K7ef/JqAT+JUrB'J:N0#It)rtIXZ`pI=6NlI!g<h
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /6 /Gradient get_res exec grestore
}if
np
318.542 392.108 mo
318.434 392.108 318.325 392.107 318.215 392.104 cv
311.488 391.92 308.626 387.841 308.674 383.452 cv
310.07 385.116 311.719 387.208 315.374 387.209 cv
316.88 387.209 318.729 386.853 321.041 385.965 cv
318.624 392.108 li
318.597 392.108 318.569 392.108 318.542 392.108 cv
325.434 374.796 mo
325.111 373.091 324.387 371.281 323.055 369.453 cv
321.994 367.998 320.289 366.655 318.218 365.442 cv
318.553 365.418 318.88 365.406 319.199 365.406 cv
323.082 365.406 325.801 367.161 327.474 369.608 cv
325.434 374.796 li
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
287.944 388.481 mo
287.757 388.481 287.579 388.467 287.412 388.439 cv
283.415 387.773 274.421 378.779 275.42 376.115 cv
275.63 375.555 276.385 374.405 277.512 372.949 cv
281.581 367.687 290.498 358.415 296.088 358.415 cv
296.311 358.415 296.528 358.43 296.739 358.46 cv
301.435 359.131 309.737 361.184 315.996 364.254 cv
316.771 364.635 317.516 365.031 318.218 365.442 cv
320.289 366.655 321.994 367.998 323.055 369.453 cv
324.387 371.281 325.111 373.091 325.434 374.796 cv
321.041 385.965 li
318.729 386.853 316.88 387.209 315.374 387.209 cv
311.719 387.208 310.07 385.116 308.674 383.452 cv
308.484 383.226 308.299 383.008 308.114 382.805 cv
307.401 382.019 306.691 381.444 305.733 381.444 cv
303.72 381.444 300.1 383.388 296.493 385.232 cv
293.237 386.897 289.992 388.481 287.944 388.481 cv
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/7 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~s4>g$f%'fOeGn+Ks4,Tue^FKJdf7kFs4,KreBn6Fci;M?s4#?oe'7pAbl?/9s3o3ld`_[=b5]o4s3f$h
dE)@8aT'Z.s3\jdd)Q+4`W+<(s3S^acboe/_uJ'"s3JO]cGBP+_#M]ps3ACZc+a5&^AlHks384Vbe3u"
]Dp*ds3/(SbIRYr\Gsa^s3%qPbI@Mo[f=LYs2qbLagD)i[/\7Ss2hSHag1rfZ2_nMs2_GEa05N`YQ)YG
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/7 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
255 <~f%/F'f%&=$e^`4#e^`4#e^W*ueC<!teC<!teC<!teC<!teC2mqe'ldpe'ldpe'ldpe'c[mdaHRldaHRl
daHRldaHOjdF$@hdF$@hdF$@hdF$=fd*U.dd*U.dd*U.dd*U+bcd0q`cd0q`cd0q`cd0n^cHa_\cHa_\
cHa_\cHa_[c-=MXc-=MXc-=MXc-=MWbfn;Tbfn;Tbfn;Tbfn;SbKJ)PbKJ)PbKJ)PbKJ)Ob0%lLb0%lL
b0%lLb0%lLb0%lLaiVZHaiVZHaiVZHaN2HDaN2HDaN2HDaN2HDaN2HDa2c6@a2c6@a2c6@`l?$<`l?$<
~>
<~eC<!teC<!teC2mqe'c[mdaHRlda?IidF$@hdEp7ed*L%acd0q`cd'h]cHXVYc-=MXc-4DUbfe2QbKJ)P
bKJ)PbKJ&Nb0%iJaiVZHaiVWFaN2EBa2c6@a2c3>`l?!:`Pog8`Pod6`5KU4`5KR2_o'@._SX1,_SX.*
_83t'^qdb$^qdb#^V@Ot^:q=q^:q=p]tM+m]tM+l]Y(nh]=Y\e]=Y\d]"5J`\[f8]\[f8\\@B&X\$riU
\$riU\$riU[^NWQ[C*EM[C*EM['[3IZa7!EZa7!EZEgdAZ*CR=Z*CR=Yct@9Yct@9YHP.5Y-+q1Y-+q1
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /7 /Gradient get_res exec grestore
}if
np
188.486 392.108 mo
181.376 392.108 li
181.403 392.108 181.431 392.108 181.458 392.108 cv
181.566 392.108 181.675 392.107 181.785 392.104 cv
188.512 391.92 191.374 387.841 191.326 383.452 cv
191.516 383.226 191.701 383.008 191.886 382.805 cv
192.432 386.104 192.118 388.944 188.486 392.108 cv
172.526 369.608 mo
169.829 362.753 li
172.595 362.57 174.573 362.473 176.106 362.473 cv
179.723 362.473 180.861 363.016 184.004 364.254 cv
183.229 364.635 182.484 365.031 181.782 365.442 cv
181.447 365.418 181.12 365.406 180.801 365.406 cv
176.918 365.406 174.199 367.162 172.526 369.608 cv
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
181.458 392.108 mo
181.431 392.108 181.403 392.108 181.376 392.108 cv
178.959 385.965 li
181.271 386.853 183.12 387.209 184.626 387.209 cv
188.281 387.209 189.93 385.116 191.326 383.452 cv
191.374 387.841 188.512 391.92 181.785 392.104 cv
181.675 392.107 181.566 392.108 181.458 392.108 cv
174.566 374.797 mo
172.526 369.608 li
174.199 367.162 176.918 365.406 180.801 365.406 cv
181.12 365.406 181.447 365.418 181.782 365.442 cv
179.711 366.655 178.006 367.998 176.945 369.453 cv
175.613 371.281 174.889 373.091 174.566 374.797 cv
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
212.056 388.481 mo
210.008 388.481 206.763 386.897 203.507 385.232 cv
199.9 383.388 196.28 381.444 194.267 381.444 cv
193.309 381.444 192.599 382.019 191.886 382.805 cv
191.701 383.008 191.516 383.226 191.326 383.452 cv
189.93 385.116 188.281 387.209 184.626 387.209 cv
183.12 387.209 181.271 386.853 178.959 385.965 cv
174.566 374.797 li
174.889 373.091 175.613 371.281 176.945 369.453 cv
178.006 367.998 179.711 366.655 181.782 365.442 cv
182.484 365.031 183.229 364.635 184.004 364.254 cv
190.262 361.184 198.565 359.131 203.261 358.46 cv
203.472 358.43 203.689 358.415 203.912 358.415 cv
209.502 358.415 218.419 367.687 222.488 372.949 cv
223.615 374.405 224.37 375.555 224.58 376.115 cv
225.579 378.779 216.585 387.773 212.588 388.439 cv
212.421 388.467 212.243 388.481 212.056 388.481 cv
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
250.141 290.365 mo
250 290.365 li
249.859 290.365 li
234.464 290.365 216.709 270.191 210.236 261.656 cv
211.629 259.033 214.841 253.246 218.765 247.883 cv
219.156 251.642 219.704 255.694 220.525 259.897 cv
223.094 273.038 231.374 284.004 250 284.171 cv
249.857 284.172 249.712 284.173 249.567 284.173 cv
250.433 284.173 li
250.433 284.173 li
250.288 284.173 250.143 284.172 250 284.171 cv
268.626 284.004 276.906 273.038 279.475 259.897 cv
280.164 256.371 280.66 252.951 281.033 249.721 cv
285.108 255.607 288.192 261.509 288.864 262.823 cv
281.763 271.895 264.872 290.365 250.141 290.365 cv
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
250.433 284.173 mo
249.567 284.173 li
249.712 284.173 249.857 284.172 250 284.171 cv
250.143 284.172 250.288 284.173 250.433 284.173 cv
250 284.171 mo
231.374 284.004 223.094 273.038 220.525 259.897 cv
219.704 255.694 219.156 251.642 218.765 247.883 cv
218.951 247.628 219.138 247.375 219.328 247.123 cv
220.151 253.806 li
220.71 258.329 224.567 261.74 229.124 261.74 cv
237.813 261.74 li
241.98 261.74 245.641 258.927 246.713 254.899 cv
249.087 245.983 li
250.913 245.983 li
253.287 254.899 li
254.359 258.927 258.02 261.74 262.187 261.74 cv
270.875 261.74 li
275.433 261.74 279.29 258.329 279.849 253.806 cv
280.454 248.894 li
280.649 249.17 280.842 249.446 281.033 249.721 cv
280.66 252.951 280.164 256.371 279.475 259.897 cv
276.906 273.038 268.626 284.004 250 284.171 cv
250.198 273.453 mo
250.175 273.453 250.151 273.453 250.128 273.453 cv
247.855 273.462 246.013 273.893 246.015 274.416 cv
246.017 274.934 247.823 275.347 250.064 275.347 cv
250.088 275.347 250.111 275.347 250.135 275.347 cv
252.409 275.339 254.25 274.907 254.248 274.384 cv
254.246 273.867 252.439 273.453 250.198 273.453 cv
259.409 270.538 mo
259.697 270.538 259.933 270.551 260.102 270.581 cv
261.218 270.781 261.48 271.302 261.484 271.31 cv
261.563 271.505 261.75 271.623 261.948 271.623 cv
262.134 271.588 li
262.391 271.484 262.515 271.193 262.412 270.937 cv
262.37 270.832 261.95 269.896 260.277 269.597 cv
260.055 269.556 259.759 269.539 259.405 269.539 cv
258.441 269.539 257.042 269.667 255.489 269.808 cv
253.674 269.972 251.616 270.158 250 270.158 cv
248.384 270.158 246.325 269.972 244.51 269.808 cv
242.957 269.667 241.557 269.54 240.593 269.54 cv
240.239 269.54 239.944 269.557 239.722 269.597 cv
238.049 269.896 237.629 270.832 237.587 270.937 cv
237.486 271.187 237.606 271.465 237.853 271.573 cv
237.917 271.601 237.984 271.614 238.05 271.614 cv
238.239 271.614 238.422 271.505 238.509 271.323 cv
238.52 271.302 238.781 270.781 239.897 270.581 cv
240.066 270.551 240.3 270.538 240.588 270.538 cv
241.496 270.538 242.927 270.668 244.42 270.803 cv
246.257 270.97 248.339 271.158 250 271.158 cv
251.661 271.158 253.742 270.97 255.579 270.803 cv
257.071 270.668 258.501 270.538 259.409 270.538 cv
245.407 263.944 mo
244.92 263.944 244.642 264.021 244.643 264.257 cv
244.646 264.952 247.092 267.243 250.112 267.243 cv
250.12 267.243 250.127 267.243 250.135 267.243 cv
253.166 267.231 255.621 264.912 255.618 264.215 cv
255.617 263.985 255.349 263.908 254.882 263.908 cv
253.932 263.908 252.157 264.227 250.125 264.235 cv
250.1 264.235 250.074 264.236 250.049 264.236 cv
249.061 264.236 248.136 264.163 247.34 264.09 cv
246.545 264.017 245.878 263.944 245.407 263.944 cv
251.539 242.3 mo
248.461 242.3 li
248.417 242.236 248.371 242.173 248.323 242.111 cv
247.476 241.009 246.193 240.376 244.803 240.376 cv
226.61 240.376 li
227.46 240.054 228.317 239.728 229.163 239.359 cv
232.201 238.032 235.531 237.444 238.846 237.394 cv
241.675 237.352 244.833 237.589 246.975 235.741 cv
247.508 235.28 247.937 234.719 248.345 234.139 cv
248.645 234.135 248.945 234.133 249.245 234.133 cv
256.363 234.133 263.482 235.117 268.312 237.084 cv
269.921 237.74 271.569 238.9 273.197 240.376 cv
255.197 240.376 li
253.807 240.376 252.524 241.009 251.677 242.111 cv
251.629 242.173 251.583 242.236 251.539 242.3 cv
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
250.064 275.347 mo
247.823 275.347 246.017 274.934 246.015 274.416 cv
246.013 273.893 247.855 273.462 250.128 273.453 cv
250.151 273.453 250.175 273.453 250.198 273.453 cv
252.439 273.453 254.246 273.867 254.248 274.384 cv
254.25 274.907 252.409 275.339 250.135 275.347 cv
250.111 275.347 250.088 275.347 250.064 275.347 cv
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/8 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~oZ,,H`l[kmaRmKmoYniB`PqJg`Uq*eoYeZ>`5;/a_=YX]oYSE9_S>`[^@]:UoYJ65_7]EV]C`nMoYA'1
^Ua!O\FdPFoY.d*^:*XI[I_,>o=_L%]s@7BZLb`6o=V=!]<Ch<Y4K9-o=D'q\ubM7X7Nm%o=:jl\Z,21
W:RNso=(Ug\#&]*V";'ko<tFc[\EB%U@Yddo<k7_[%HrsT(B=\o<Y"ZZ^gWnS+EtTo<OeUZC1<hR.ISL
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/8 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~oCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMSF
oCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMPDo()ABo()ABo()ABo()ABo()ABo()AB
o()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()AB
o()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()AB
~>
<~`l?$<`l5p9`Pog8`Pog8`Pf^5`5KU4`5KU4`5BL1_o'C0_o'C0_ns:-_SX1,_SO()_83t(_83t(_83t(
_83q&^qdb$^qdb$^qd_"^V@Ou^V@Ls^:q=q^:q=q^:q:o]tM+m]tM+m]tM+m]tM(k]Y(ni]Y(kg]=Y\e
]=Y\e]=Y\d]"5Ja]"5Ja]"5J`\[f8]\[f8]\[f8\\@B&Y\@B&Y\@B&X\$riU\$riT[^NWQ[^NWQ[^NWQ
[^NWQ[C*EM[C*EM[C*EM['[3I['[3IZa7!EZa7!EZa7!EZEgdAZEgdAZEgdAZEgdAZ*CR=Z*CR=Yct@9
~>
<~aiVZHaiMQEaN)?Aa2Z-=`l5p9`Pf^5`5KU4`5BL1_ns:-_SO()_8*k%^qdb$^q[Y!^V7Fr^:h4n]tD"j
]Y(ni]Y(kg]=YYc]"5G_\[f8]\[f5[\@B#W\$rfS[^NTO[C*EM[C*BK['[0GZa6sCZEga?Z*CR=Z*CO;
Yct@8YHP.4Y-+q0Xf\_,XK8M)XK8M(X/i;$WiE(uWMukqW2QYnW2QYmVl-GiVP^5eV5:#aUnjf]USFTZ
USFTZU8"BVTqS0RTqS0RTV.sNT:_aJSt;OFSXl=BSXl=BS=H+>S"#n:R[T\6R@0J2R$a8.R$a8.Q^=&*
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /8 /Gradient get_res exec grestore
}if
np
250.112 267.243 mo
247.092 267.243 244.646 264.952 244.643 264.257 cv
244.642 264.021 244.92 263.944 245.407 263.944 cv
245.878 263.944 246.545 264.017 247.34 264.09 cv
248.136 264.163 249.061 264.236 250.049 264.236 cv
250.074 264.236 250.1 264.235 250.125 264.235 cv
252.157 264.227 253.932 263.908 254.882 263.908 cv
255.349 263.908 255.617 263.985 255.618 264.215 cv
255.621 264.912 253.166 267.231 250.135 267.243 cv
250.127 267.243 250.12 267.243 250.112 267.243 cv
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/9 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~lFb"!]YWjE_<JSIl+4Xo]"[F>^$3)?l++Fj\@Uq7\`pW6l*n.d[^PG/[HY-,l*[n_[Bo,*ZK\a$l*R\Z
Z`iW"Y3E6pl*@GUZE3;qX6Hmhl*./OYc-fiVs1C^l*$rJY,(<bUZnqUl)g]EXeG!\T]rPMl)UE?X.ALU
SEQuBkc1*8WL;tLR-:N9kbsj3W0ZYFQ0>-1kbaR-VNU/?Om&X'kbX@(V2si9Np*9ukbF+#UPn?1MWgdk
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/9 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~l07Hsl07Hsl0.?pkih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6o
kih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6o
kih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6nkND$kkND$kkND$kkND$k
kND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$k
~>
<~]=Y\e]=Y\e]=PSb]"5Ja]",A^\[f8]\[]/Z\@B&Y\@B&Y\@8rV\$riU\$riU\$i`R[^ENN[C*EM[C*EM
[C*BK['[3I['[3I['[0GZa7!EZa6sCZEgdAZEga?Z*CR=Z*CR=Z*CO;Yct@9Yct=7YHP.5YHP+3Y-+q1
Y-+q1Y-+q0Xf\_-Xf\_-Xf\_,XK8M)XK8M(X/i;%X/i;$WiE)!WiE)!WiE(uWMukrWMukqW2QYnW2QYn
W2QYnVl-GjVl-GjVP^5fVP^5fV5:#bV5:#bV5:#bUnjf^Unjf^Unjf^USFTZUSFTZU8"BVU8"BVTqS0R
~>
<~_83t(_8*k%^qdb$^q[Y!^V7Fr^:h4n]tD"j]Xtef]=PSb]",A^\[]/Z\@8rV\$i`R[^ENN[C!<J['R*F
Za7!EZa6sCZEga?Z*CO;Yct=7YHP+3Y-+n/Xf\_-Xf\\+XK8J'X/i8#WiE%tWMuhpW2QVlVl-DhVP^2d
V5:#aUnjf]USFTYU8"BUTqS0RTqS0QTV.sMT:_aISt;OESXl=AS=H+=S"#n9R[T\5R@0J1R$a8-Q^=&)
QBmi&QBmi&Q'IW"Pa%DsPEV2oP*1ukOcbcgOH>QcO,o?_NfK-[NfK-[NK&pWN/W^SMi3LOMMd:KM2@(G
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /9 /Gradient get_res exec grestore
}if
np
261.948 271.623 mo
261.75 271.623 261.563 271.505 261.484 271.31 cv
261.48 271.302 261.218 270.781 260.102 270.581 cv
259.933 270.551 259.697 270.538 259.409 270.538 cv
258.501 270.538 257.071 270.668 255.579 270.803 cv
253.742 270.97 251.661 271.158 250 271.158 cv
248.339 271.158 246.257 270.97 244.42 270.803 cv
242.927 270.668 241.496 270.538 240.588 270.538 cv
240.3 270.538 240.066 270.551 239.897 270.581 cv
238.781 270.781 238.52 271.302 238.509 271.323 cv
238.422 271.505 238.239 271.614 238.05 271.614 cv
237.984 271.614 237.917 271.601 237.853 271.573 cv
237.606 271.465 237.486 271.187 237.587 270.937 cv
237.629 270.832 238.049 269.896 239.722 269.597 cv
239.944 269.557 240.239 269.54 240.593 269.54 cv
241.557 269.54 242.957 269.667 244.51 269.808 cv
246.325 269.972 248.384 270.158 250 270.158 cv
251.616 270.158 253.674 269.972 255.489 269.808 cv
257.042 269.667 258.441 269.539 259.405 269.539 cv
259.759 269.539 260.055 269.556 260.277 269.597 cv
261.95 269.896 262.37 270.832 262.412 270.937 cv
262.515 271.193 262.391 271.484 262.134 271.588 cv
261.948 271.623 li
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/10 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~jL2e`[_:b0]]?K4jKuMZ[(58(\E(!*jKl;UZF/c![,eKujKZ#NYd*5mYiDpjj0,ZHYHHogXlHRcj/oBB
XfCE_WT1(Yj/]*<X/=pXV;nSOj/Jg6WM8FPU#W)Ej/AU1Vk2qHS`?W<j//=+V4-G@RH(-2j.r%%UmC&:
Q/eX(j._atU6=Q2OlE'rih;InTTA**NoH^kih)1hSr;U"MW14aigknbSVQ3pL>n_WigYV\RtK^hK&W5M
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/10 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~j5]1[j5]1[j5]1[j5]1[j5]1[j5]1[j5]1[j5]1[j5]1[j5]1[j5]1[j5]1[j5]1[j5T(Xio8tWio8tW
io8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tW
io8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tV
iSibSiSibSiSibSiSibSiSibSiSibSiSibSiSibSiSibSiSibSiSibSiSibSiSibSiSibSiSibSiSibS
~>
<~[C*EM[C*EM[C!<J['[3I['R*FZa7!EZa-mBZEgdAZEgdAZE^[>Z*CR=Z*:I:Yct@9Yck76YHP.5YHG%2
Y-+q1Y-+q1Y-+n/Xf\_-Xf\\+XK8M)XK8J'X/i;%X/i8#WiE)!WiE)!WiE%tWMuhpW2QYnW2QYnW2QVl
Vl-GjVl-GiVP^5fVP^5fVP^5eV5:#aUnjf^Unjf^Unjf]USFTZUSFTZUSFTYU8"BUTqS0RTqS0RTqS0Q
TV.sNTV.sNT:_aJT:_aJT:_aJSt;OFSXl=BSXl=BSXl=BS=H+>S=H+>S"#n:S"#n:R[T\6R[T\6R@0J2
~>
<~]tM+m]tD"j]Xtef]=PSb]",A^\[]/Z\@8rV\$i`R[^ENN[C!<J['R*FZa-mBZE^[>Z*:I:Yck76YHG%2
Y-+q1Y-+n/Xf\\+XK8J'X/i8#WiE%tWMuhpW2QVlVl-DhVP^2dV59u`Unjc\USFQXU8"?TTqS-PTV.pL
T:_aISt;OESXl=AS=H+=S"#n9R[T\5R@0J1R$a8-Q^=&)QBmi%Q'IW!Pa%DrPEV2nP*1ujOcbcfOH>Qb
O,o?_O,o?_NfK-[NK&pWN/W^SMi3LOMMd:KM2@(GLkpkCLPLY?L5(G;KnY57KS5#3K7ef/JqAT+JUrB'
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /10 /Gradient get_res exec grestore
}if
np
226.61 240.376 mo
225.293 240.376 li
226.921 238.9 228.569 237.74 230.179 237.084 cv
234.805 235.2 241.531 234.218 248.345 234.139 cv
247.937 234.719 247.508 235.28 246.975 235.741 cv
244.833 237.589 241.675 237.352 238.846 237.394 cv
235.531 237.444 232.201 238.032 229.163 239.359 cv
228.317 239.728 227.46 240.054 226.61 240.376 cv
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/11 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~@>)O,K>M&K_I8&4@=Z.%JA5KA^0lE'@",arICij6\mKiq?[B4hHFR=-[pOBg?[/tbGI1\"ZX.g]??EJY
FKo+mY[):Q?#m)RENNMcXBfbF>]-QHD5gcWWEa8<>AL-@CSk<NV-@Z0>A0d9B;/UCTiu'$>%O=0AY3.:
SloQo=^mn(@@LD.RTX$d=^RS"?^Ou&QWROZ=Bq+n>Ei2nP?1qN=':Ye=cc]eOB5ME=&t>_<K1$ZN)io9
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/11 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~?smAM?smAM?smAM?smAM?smAM?smAM?sd8J?XI/I?XI/I?XI/I?X@&F?=$rE?=$rE?=$rE?=$rE?=$rE
?=$rE?=$oC?!U`A?!U`A?!U`A?!U]?>[1N=>[1N=>[1N=>[1N=>[1N=>[1N=>[1K;>?b<9>?b<9>?b<9
>?b<8>$>*5>$>*5>$>*5>$>*5>$>*5>$>*5>$>*4=]nm1=]nm1=]nm1=]nm0=BJ[-=BJ[-=BJ[-=BJ[-
=BJ[-=BJ[-=BJ[-=BJ[-='&I)='&I)='&I)<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<E3%!
~>
<~K7ef/K7\],Jq8K(JUrB&J:E&uIt)rtIsuiqIXQWmI=6NlI=-EiI!^3eH[C*cH?jd]H$O[\H$FRYG^"@U
GB\7TGB\4RG'8"NF`hhLFEDSFF)uDDF)uABEcQ/>EH,u<EH,r:E,]`6Df9N2DJj<.D/F**Ci!p(Ci!m&
CMR^#C2.KuC2.KtBk_9pBP;'lB4kjhAnGXeAnGXdAS#F`A7T4]A7T4\@q0"X@U`eT@:<SP?smAM?smAL
?XI/I?=$rE?=$rE?!U`A>[1N=>?b<9>$>*5>$>*5=]nm1=BJ[-=BJ[-='&I)<`W7%<E3%!<)cgr<)cgr
~>
<~_SX1,_SO()_83t(_8*k%^q[Y!^V7Fr^:h4n]tD"j]Xtef]=PSb]",A^\[]/Z\@8rV\$riU\$i`R[^ENN
[C*BK['[0GZa6sCZEgdAZEga?Z*CO;Yct=7YHP+3Y-+n/Xf\\+XK8J'X/i8#WiE%tWMuhpW2QYnW2QVl
Vl-GiVP^5eV5:#aUnjf]USFTYU8"BUTqS0QTV.sMT:_aISt;OFSt;OESXl=AS=H+=S"#n9R[T\5R@0J1
R$a8.R$a8.Q^=&*QBmi&Q'IW"Pa%DsPEV2oP*1ukOcbcgOH>QcO,o?_O,o?_NfK-[NK&pWN/W^SMi3LO
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /11 /Gradient get_res exec grestore
}if
np
270.875 259.284 mo
269.57 259.284 li
277.215 244.648 li
277.592 245.103 277.964 245.567 278.332 246.038 cv
277.411 253.505 li
277.005 256.8 274.195 259.284 270.875 259.284 cv
264.67 259.284 mo
262.187 259.284 li
259.703 259.284 257.465 257.922 256.292 255.826 cv
257.365 257.743 259.331 259.045 261.56 259.253 cv
270.139 242.832 li
260.744 242.832 li
255.36 253.141 li
255.66 254.268 li
253.279 245.327 li
253.234 245.158 253.212 244.987 253.212 244.818 cv
253.21 244.384 253.352 243.961 253.624 243.607 cv
254.003 243.115 254.576 242.832 255.197 242.832 cv
275.641 242.832 li
275.641 242.832 li
273.263 242.832 li
264.67 259.284 li
256.285 255.813 mo
256.284 255.813 256.284 255.813 256.284 255.812 cv
256.284 255.813 256.284 255.813 256.285 255.813 cv
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
270.875 261.74 mo
262.187 261.74 li
258.02 261.74 254.359 258.927 253.287 254.899 cv
250.913 245.983 li
252.397 245.983 li
252.397 242.3 li
251.539 242.3 li
251.583 242.236 251.629 242.173 251.677 242.111 cv
252.524 241.009 253.807 240.376 255.197 240.376 cv
273.197 240.376 li
274.019 241.122 274.836 241.949 275.641 242.832 cv
255.197 242.832 li
254.576 242.832 254.003 243.115 253.624 243.607 cv
253.352 243.961 253.21 244.384 253.212 244.818 cv
253.212 244.987 253.234 245.158 253.279 245.327 cv
255.66 254.268 li
255.806 254.816 256.017 255.333 256.284 255.812 cv
256.284 255.813 256.284 255.813 256.285 255.813 cv
256.287 255.818 256.289 255.822 256.292 255.826 cv
257.465 257.922 259.703 259.284 262.187 259.284 cv
264.67 259.284 li
269.57 259.284 li
270.875 259.284 li
274.195 259.284 277.005 256.8 277.411 253.505 cv
278.332 246.038 li
279.061 246.97 279.77 247.929 280.454 248.894 cv
279.849 253.806 li
279.29 258.329 275.433 261.74 270.875 261.74 cv
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
237.813 261.74 mo
229.124 261.74 li
224.567 261.74 220.71 258.329 220.151 253.806 cv
219.328 247.123 li
219.615 246.739 219.906 246.359 220.201 245.983 cv
220.663 245.983 li
220.663 245.399 li
220.977 245.007 221.294 244.621 221.614 244.242 cv
221.56 244.423 221.532 244.613 221.531 244.806 cv
221.531 244.89 221.536 244.975 221.547 245.06 cv
222.589 253.505 li
222.979 256.668 225.583 259.084 228.727 259.272 cv
228.728 259.272 li
228.739 259.273 228.751 259.274 228.763 259.274 cv
228.763 259.274 228.764 259.274 228.764 259.274 cv
228.81 259.277 228.856 259.279 228.903 259.28 cv
228.905 259.281 228.906 259.281 228.908 259.281 cv
228.912 259.281 228.916 259.281 228.92 259.281 cv
228.923 259.281 228.924 259.281 228.927 259.281 cv
228.93 259.281 228.934 259.281 228.938 259.282 cv
228.941 259.282 228.943 259.282 228.946 259.282 cv
228.949 259.282 228.953 259.282 228.956 259.282 cv
228.959 259.282 228.962 259.282 228.964 259.282 cv
228.968 259.282 228.971 259.282 228.975 259.282 cv
228.978 259.283 228.98 259.283 228.983 259.283 cv
228.987 259.283 228.99 259.283 228.993 259.283 cv
228.996 259.283 228.999 259.283 229.002 259.283 cv
229.005 259.283 229.008 259.283 229.012 259.283 cv
229.015 259.283 229.018 259.283 229.021 259.283 cv
229.024 259.283 229.027 259.283 229.03 259.283 cv
229.034 259.284 229.037 259.284 229.04 259.284 cv
229.043 259.284 229.046 259.284 229.049 259.284 cv
229.053 259.284 229.056 259.284 229.06 259.284 cv
229.063 259.284 229.065 259.284 229.067 259.284 cv
229.072 259.284 229.076 259.284 229.08 259.284 cv
229.082 259.284 229.084 259.284 229.086 259.284 cv
229.091 259.284 229.095 259.284 229.1 259.284 cv
229.102 259.284 229.103 259.284 229.105 259.284 cv
229.111 259.284 229.118 259.284 229.124 259.284 cv
229.42 259.284 li
232.545 259.284 li
237.445 259.284 li
237.813 259.284 li
240.869 259.284 243.554 257.222 244.34 254.268 cv
246.72 245.327 li
246.766 245.154 246.788 244.978 246.788 244.804 cv
246.786 244.375 246.645 243.957 246.376 243.607 cv
246.001 243.12 245.436 242.838 244.822 242.832 cv
244.822 242.832 244.821 242.832 244.82 242.832 cv
244.819 242.832 244.816 242.832 244.815 242.832 cv
244.811 242.832 244.807 242.832 244.803 242.832 cv
244.803 242.832 li
223.517 242.832 li
223.223 242.832 222.943 242.893 222.688 243.011 cv
223.545 242.06 224.416 241.172 225.293 240.376 cv
226.61 240.376 li
244.803 240.376 li
246.193 240.376 247.476 241.009 248.323 242.111 cv
248.371 242.173 248.417 242.236 248.461 242.3 cv
247.603 242.3 li
247.603 245.983 li
249.087 245.983 li
246.713 254.899 li
245.641 258.927 241.98 261.74 237.813 261.74 cv
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
237.813 259.284 mo
237.445 259.284 li
245.869 243.157 li
245.56 242.957 245.203 242.836 244.822 242.832 cv
245.436 242.838 246.001 243.12 246.376 243.607 cv
246.645 243.957 246.786 244.375 246.788 244.804 cv
246.788 244.978 246.766 245.154 246.72 245.327 cv
244.34 254.268 li
243.554 257.222 240.869 259.284 237.813 259.284 cv
232.545 259.284 mo
229.42 259.284 li
238.014 242.832 li
228.62 242.832 li
222.704 254.157 li
223.348 256.995 225.804 259.097 228.727 259.272 cv
225.583 259.084 222.979 256.668 222.589 253.505 cv
221.547 245.06 li
221.536 244.975 221.531 244.89 221.531 244.806 cv
221.532 244.613 221.56 244.423 221.614 244.242 cv
221.969 243.822 222.327 243.411 222.688 243.011 cv
222.943 242.893 223.223 242.832 223.517 242.832 cv
244.803 242.832 li
244.803 242.832 li
244.803 242.832 li
241.139 242.832 li
232.545 259.284 li
229.105 259.284 mo
229.103 259.284 229.102 259.284 229.1 259.284 cv
229.102 259.284 229.103 259.284 229.105 259.284 cv
229.086 259.284 mo
229.084 259.284 229.082 259.284 229.08 259.284 cv
229.082 259.284 229.084 259.284 229.086 259.284 cv
229.067 259.284 mo
229.065 259.284 229.063 259.284 229.06 259.284 cv
229.063 259.284 229.065 259.284 229.067 259.284 cv
229.049 259.284 mo
229.046 259.284 229.043 259.284 229.04 259.284 cv
229.043 259.284 229.046 259.284 229.049 259.284 cv
229.03 259.283 mo
229.027 259.283 229.024 259.283 229.021 259.283 cv
229.024 259.283 229.027 259.283 229.03 259.283 cv
229.012 259.283 mo
229.008 259.283 229.005 259.283 229.002 259.283 cv
229.005 259.283 229.009 259.283 229.012 259.283 cv
228.993 259.283 mo
228.99 259.283 228.987 259.283 228.983 259.283 cv
228.986 259.283 228.99 259.283 228.993 259.283 cv
228.975 259.282 mo
228.971 259.282 228.968 259.282 228.964 259.282 cv
228.968 259.282 228.971 259.282 228.975 259.282 cv
228.956 259.282 mo
228.953 259.282 228.949 259.282 228.946 259.282 cv
228.949 259.282 228.953 259.282 228.956 259.282 cv
228.938 259.282 mo
228.934 259.281 228.93 259.281 228.927 259.281 cv
228.93 259.281 228.934 259.281 228.938 259.282 cv
228.92 259.281 mo
228.916 259.281 228.912 259.281 228.908 259.281 cv
228.912 259.281 228.916 259.281 228.92 259.281 cv
228.903 259.28 mo
228.856 259.279 228.81 259.277 228.764 259.274 cv
228.81 259.277 228.856 259.279 228.903 259.28 cv
228.763 259.274 mo
228.751 259.274 228.739 259.273 228.728 259.272 cv
228.739 259.273 228.751 259.274 228.763 259.274 cv
244.82 242.832 mo
244.818 242.832 244.816 242.832 244.815 242.832 cv
244.816 242.832 244.819 242.832 244.82 242.832 cv
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
252.397 245.983 mo
250.913 245.983 li
249.087 245.983 li
247.603 245.983 li
247.603 242.3 li
248.461 242.3 li
251.539 242.3 li
252.397 242.3 li
252.397 245.983 li
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
220.663 245.983 mo
220.201 245.983 li
220.354 245.788 220.508 245.592 220.663 245.399 cv
220.663 245.983 li
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
261.282 258.726 mo
258.824 258.365 256.778 256.559 256.135 254.141 cv
255.884 253.198 li
261.042 243.323 li
269.328 243.323 li
261.282 258.726 li
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/12 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~1murPRFX3^ehicE1mZWJQII^Udkd9<1R-<DPgM7Md5$p416U!=Oj>bDc7tF+0osR5O3KA=bV5($0TF7/
N63f3atJ[p08dk)MT@H-a"N:i/r7M"LW(m#`@cn`/VV+pKu5Kq_C^GX/;(biK#'!h^ajuN.tGAbJA*O`
^++WG.Xo#[ICq%X].&-=.=8WTHb(YP\LDj7.=&EPGdf)G[jZI/.!E!HG-r]?ZmU"&-Zl[BF0[-6Z6jUs
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /12 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/12 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~1G^gC1G^gC1G^gC1G^gC1G^gC1G^gC1GU^@1,:U?1,:U?1,:U?1,1L<0ekC;0ekC;0eb:80JG170JG17
0JG170JG.50/"t30/"t30/"t30/"q1/hSb//hSb//hSb//hSb//hSb//hSb//hS_-/M/P+/M/P+/M/P+
/M/P*/1`>'/1`>'/1`>'/1`>&.k<,#.k<,#.k<,".Olnt.Olnt.Olnt.Olns.4H\p.4H\p.4H\p.4H\o
-n$Jl-n$Jl-n$Jl-n$Jl-n$Jl-n$Jl-n$Jl-RU8h-RU8h-RU8h-RU8h-71&d-71&d-71&d-71&d,pai`
~>
<~R$a8.R$a8.R$X/+Q^=&)QBd`#Q'IW"Q'@MtPa%DsP`q;pPEV2oPEM)lP*1ukP*(lhOcYZdOH5H`O,o?_
O,o<]NfK-[NfK*YNK&pWNK&mUN/W[QMi3IMMMd:KMMd7IM2@(GM2@%ELkpkCLkphALPLV=L5(D9KnY57
KnY56KS5#3KS5#2K7ef/K7ef.JqAT*JUrB&J:N0#J:N0"It)rtIt)rsIXZ`pIXZ`oI=6NkI!g<hI!g<g
H[C*dH?sm`H?sm`H$O[\H$O[\G^+IXGB\7TGB\7TG'8%PF`hhLF`hhLFEDVHFEDVHF)uDDEcQ2@EcQ2@
~>
<~f%/F'f%&=$e^`4#e^W*ueC2mqe'ldpe'c[mdaHRlda?IidEp7ed*U.dd*L%acd0q`cd'h]cHXVYc-=MX
c-=JVbfn;Tbfn8RbKJ)PbKJ&Nb0%iJaiVZHaiVWFaN2HDaN2EBa2c3>`l?$<`l?!:`Pod6`5KU4`5KR2
_o'C0_o'C/_SX1+_83t(_83t'^qdb$^qdb#^V@Ot^:q=q^:q=p]tM+m]tM+l]Y(nh]=Y\e]=Y\d]"5J`
\[f8]\[f8]\[f8]\@B&Y\$riU\$riU[^NWQ[^NWQ[C*EM['[3I['[3IZa7!EZEgdAZEgdAZ*CR=Z*CR=
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /12 /Gradient get_res exec grestore
}if
np
261.56 259.253 mo
259.331 259.045 257.365 257.743 256.292 255.826 cv
256.292 255.826 li
256.289 255.822 256.287 255.818 256.285 255.813 cv
256.285 255.813 li
256.284 255.813 256.284 255.813 256.284 255.812 cv
256.284 255.812 li
256.017 255.333 255.806 254.816 255.66 254.268 cv
255.66 254.268 li
255.36 253.141 li
260.744 242.832 li
270.139 242.832 li
261.56 259.253 li
261.042 243.323 mo
255.884 253.198 li
256.135 254.141 li
256.778 256.559 258.824 258.365 261.282 258.726 cv
269.328 243.323 li
261.042 243.323 li
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
269.272 258.793 mo
265.48 258.793 li
273.561 243.323 li
276.082 243.323 li
276.348 243.624 276.612 243.929 276.874 244.24 cv
269.272 258.793 li
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/12 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/12 /Gradient get_res exec grestore
}if
np
269.57 259.284 mo
264.67 259.284 li
273.263 242.832 li
275.641 242.832 li
275.788 242.994 275.935 243.157 276.082 243.323 cv
273.561 243.323 li
265.48 258.793 li
269.272 258.793 li
276.874 244.24 li
276.988 244.375 277.102 244.512 277.215 244.648 cv
269.57 259.284 li
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
229.122 258.793 mo
226.363 258.792 223.912 256.88 223.226 254.221 cv
228.917 243.323 li
237.203 243.323 li
229.122 258.793 li
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/12 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/12 /Gradient get_res exec grestore
}if
np
229.42 259.284 mo
229.124 259.284 li
229.118 259.284 229.111 259.284 229.105 259.284 cv
229.103 259.284 229.102 259.284 229.1 259.284 cv
229.095 259.284 229.091 259.284 229.086 259.284 cv
229.084 259.284 229.082 259.284 229.08 259.284 cv
229.076 259.284 229.072 259.284 229.067 259.284 cv
229.065 259.284 229.063 259.284 229.06 259.284 cv
229.056 259.284 229.053 259.284 229.049 259.284 cv
229.046 259.284 229.043 259.284 229.04 259.284 cv
229.037 259.284 229.034 259.284 229.03 259.283 cv
229.027 259.283 229.024 259.283 229.021 259.283 cv
229.018 259.283 229.015 259.283 229.012 259.283 cv
229.009 259.283 229.005 259.283 229.002 259.283 cv
228.999 259.283 228.996 259.283 228.993 259.283 cv
228.99 259.283 228.986 259.283 228.983 259.283 cv
228.98 259.283 228.978 259.283 228.975 259.282 cv
228.971 259.282 228.968 259.282 228.964 259.282 cv
228.962 259.282 228.959 259.282 228.956 259.282 cv
228.953 259.282 228.949 259.282 228.946 259.282 cv
228.943 259.282 228.941 259.282 228.938 259.282 cv
228.934 259.281 228.93 259.281 228.927 259.281 cv
228.924 259.281 228.923 259.281 228.92 259.281 cv
228.916 259.281 228.912 259.281 228.908 259.281 cv
228.906 259.281 228.905 259.281 228.903 259.28 cv
228.856 259.279 228.81 259.277 228.764 259.274 cv
228.764 259.274 228.763 259.274 228.763 259.274 cv
228.751 259.274 228.739 259.273 228.728 259.272 cv
228.727 259.272 li
225.804 259.097 223.348 256.995 222.704 254.157 cv
228.62 242.832 li
238.014 242.832 li
229.42 259.284 li
228.917 243.323 mo
223.226 254.221 li
223.912 256.88 226.363 258.792 229.122 258.793 cv
237.203 243.323 li
228.917 243.323 li
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
237.148 258.793 mo
233.355 258.793 li
241.436 243.323 li
244.803 243.323 li
244.936 243.323 245.069 243.342 245.198 243.381 cv
237.148 258.793 li
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/12 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/12 /Gradient get_res exec grestore
}if
np
237.445 259.284 mo
232.545 259.284 li
241.139 242.832 li
244.803 242.832 li
244.803 242.832 li
244.803 242.832 li
244.807 242.832 244.811 242.832 244.815 242.832 cv
244.815 242.832 li
244.816 242.832 244.818 242.832 244.82 242.832 cv
244.82 242.832 li
244.821 242.832 244.822 242.832 244.822 242.832 cv
244.822 242.832 li
245.203 242.836 245.56 242.957 245.869 243.157 cv
237.445 259.284 li
241.436 243.323 mo
233.355 258.793 li
237.148 258.793 li
245.198 243.381 li
245.069 243.342 244.936 243.323 244.803 243.323 cv
241.436 243.323 li
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
288.864 262.823 mo
288.192 261.509 285.108 255.607 281.033 249.721 cv
281.181 248.444 281.309 247.197 281.423 245.983 cv
283.794 245.983 li
283.794 242.3 li
282.723 242.3 li
282.881 241.331 282.93 240.317 283.047 239.352 cv
283.209 238.004 283.531 236.68 283.731 235.337 cv
283.757 235.164 283.781 234.99 283.803 234.816 cv
286.36 237.643 288.288 240.622 289.669 243.446 cv
292.62 250.568 293.072 256.858 291.817 258.788 cv
291.267 259.635 290.253 261.049 288.864 262.823 cv
210.236 261.656 mo
209.304 260.427 208.606 259.44 208.183 258.788 cv
206.928 256.857 207.38 250.565 210.332 243.442 cv
211.624 240.801 213.396 238.023 215.712 235.362 cv
215.861 235.768 216.019 236.169 216.186 236.567 cv
216.45 237.194 216.738 237.824 216.831 238.498 cv
216.926 239.18 216.815 239.872 216.789 240.56 cv
216.767 241.142 216.807 241.726 216.905 242.3 cv
216.206 242.3 li
216.206 245.983 li
218.577 245.983 li
218.635 246.608 218.698 247.241 218.765 247.883 cv
214.841 253.246 211.629 259.033 210.236 261.656 cv
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/13 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~'4%1C>b)L3RhAnn&m1P7=-jM"Q4[/^&QP#,<07_jO:Y<M&5\>s:Q#`ZM@WI<%o%ii9SO$MKap_-%S20\
7t;%=Ignkq%7PXQ7!]8/Gmm#`$UAkC5]dAuEsk0O$9`>84DkKfD$i=?#rlZ+3,&[XB*^D-#W6,u1h-eI
@0\Pq#;KNi0O4o:>6Z]`"t`s^/6E*,<WssQ"Y!@R-rL0q:]r+@"=6bF,YS:b8cp8/"!L/:+@ZDS6inDs
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /13 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/13 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~&eYfi&eYfi&eP]f&J5Te&J5Te&J5Te&J,Kb&.fBa&.fBa&.fBa&.]9^%hB0]%hB0]%h9'Z%LrsY%LrsY
%LrsY%LrpW%1NaU%1NaU%1NaU%1N^S$k*OQ$k*OQ$k*OQ$k*LO$O[=M$O[=M$O[:K$47+I$47+I$47+I
$47+H#mgnE#mgnE#mgnE#mgnD#RC\A#RC\A#RC\@#6tJ=#6tJ=#6tJ=#6tJ<"pP89"pP89"pP89"pP88
"U,&5"U,&5"U,&5"U,&5"9\i1"9\i1"9\i1!s8W-!s8W-!s8W-!s8W-!WiE)!WiE)!WiE)!WiE)!<E3%
~>
<~>[1N=>[(E:>?Y36>$5!1=BAR*=&r@&<`N."<E3%!<E)ps<)Z^o;c6Lk;Gg:f:esk_:JOY[:/4PZ:/+GW
9he;T9MA)P91qlL8kMZH84Z6@7n6$<7Rfj:7Rfg877BU46psC06UO1,6:*t(5X7Ou5<h@s5<h=q5!D+m
4Ztqj4?P_f4$,Mb3]];^3B/uW2`EZS2`EZR2E!HN2)R6J1c.$F1G^gB1,:U>0ekC:0JG160/"t2/hSb.
/M/P+/1`>'.k<,#.Olnt.4H\p-n$Jl-RU8h-71&d,pai`,U=W\,9nEX+sJ3T+X&!P+<VdL+!2RH*Zc@D
~>
<~SXl=BSXc4>S!oe7R[KS3R@'A.Q^3r'QBd`"P`q;pPEM)kOcYZdOH5H_NfB$XNJrgSMi*CLMM[1GLkgb@
LPLY?L5(D9KnY25K7ec-JqAQ)J:N-!It)orI=6KjI!g9fH?sj^H$OXZGB\4RG'8"NFEDSFF)uABEH,r:
E,]c7Df0H0D/F-+Ci!p'CMITuBk_9pBP1siAnGXdARo=]@q0"X@UW\Q?smAL?X@&E?!U`@>[(E9>$>*4
=]nm1=BJ[-='&F'<E3%!<)cdp;GpCj;,L.d:JXb^:/4MX9MA,R91qlL8P)KF84Z6@7Rfj:77BU46UO4.
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /13 /Gradient get_res exec grestore
}if
np
281.033 249.721 mo
280.842 249.446 280.649 249.17 280.454 248.894 cv
280.813 245.983 li
281.423 245.983 li
281.309 247.197 281.181 248.444 281.033 249.721 cv
218.765 247.883 mo
218.698 247.241 218.635 246.608 218.577 245.983 cv
219.187 245.983 li
219.328 247.123 li
219.138 247.375 218.951 247.628 218.765 247.883 cv
279.422 241.488 mo
278.615 240.776 277.571 240.376 276.483 240.376 cv
273.197 240.376 li
271.569 238.9 269.921 237.74 268.312 237.084 cv
263.482 235.117 256.363 234.133 249.245 234.133 cv
248.945 234.133 248.645 234.135 248.345 234.139 cv
248.976 233.243 249.561 232.305 250.413 231.628 cv
252.178 230.228 254.633 230.263 256.841 229.815 cv
259.442 229.288 261.879 227.972 263.774 226.117 cv
264.664 225.247 265.092 224.112 266.164 224.112 cv
266.258 224.112 266.357 224.121 266.462 224.139 cv
267.015 224.236 268.962 226.017 269.501 226.453 cv
271.707 228.239 271.688 231.685 273.498 233.871 cv
274.574 235.171 276.162 235.762 277.392 236.861 cv
278.929 238.235 278.859 239.839 279.422 241.488 cv
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/14 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~`kBL6]u\4,a2Yd4`k9=2]>_e%`5]C+`k'%,]#)Fs_8Wt#`ON\%\A#ql^;[Rp`OEM!\%BVf]>_4i`O37q
[CF2_\&G_``O*(lZaI`X[)B;W`3Q\eZEhERZ,EoO`3?G`YcbpKXi.EF`368\Y,fLDWl)!=_l]oUXf0.>
Vo,U5_lKWOX/*Y6Ur04-_lBHKWhRD1Tu3k&_l03FW1Ll)S\h:q_P`p@VOPH"R_kqi_PNX:V3o,qQboPa
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /14 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/14 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~`Pog8`Pog8`Pog8`Pog8`Pog8`Pog8`Pog8`Pog8`Pog8`Pog8`Pf^5`5KU4`5KU4`5KU4`5KU4`5KU4
`5KU4`5KU4`5KU4`5KU4`5KU4`5KU4`5KU4`5KU4`5KU4`5KR2_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0
_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C/_SX1,_SX1,_SX1,_SX1,_SX1,_SX1,_SX1,_SX1,
_SX1,_SX1,_SX1,_SX1,_SX1,_SX1,_SX1,_83t(_83t(_83t(_83t(_83t(_83t(_83t(_83t(_83t(
~>
<~]Y(ni]Y(ni]Y(ni]Xtef]=Y\e]=PSb]"5Ja]",A^\[f8]\[f8]\[]/Z\@B&Y\@8rV\$riU\$riU\$i`R
[^NWQ[^NWQ[^NTO[C*EM[C*BK['[3I['[0GZa7!EZa7!EZa6sCZEgdAZEgdAZEga?Z*CR=Z*CO;Yct@9
Yct@8YHP.5YHP.5YHP.4Y-+q1Y-+q0Xf\_-Xf\_-Xf\_,XK8M)XK8M)XK8M(X/i;$WiE)!WiE)!WiE(u
WMukrWMukrWMukrW2QYnW2QYnVl-GjVl-GjVl-GjVP^5fVP^5fV5:#bV5:#bV5:#bUnjf^Unjf^USFTZ
~>
<~aN2HDaN)?Aa2Z-=`l?$<`l5p9`Pf^5`5BL1_ns:-_SO()_83t(_8*k%^q[Y!^V7Fr^:h4n]tM+m]tD"j
]Y(kg]=YYc]"5Ja]"5G_\[f5[\@B#W\$rfS[^NWQ[^NTO[C*BK['[0GZa6sCZEga?Z*CR=Z*CO;Yct=7
YHP.4Y-+q0Xf\_,XK8M)XK8M(X/i;$WiE(uWMukqW2QYnW2QYmVl-GiVP^5eV5:#aUnjf]USFTZUSFTY
U8"BVTqS0RTqS0RTV.sNT:_aJSt;OFSXl=BS=H+>S=H+>S"#n:R[T\6R@0J2R$a8.Q^=&*Q^=&*QBmi&
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /14 /Gradient get_res exec grestore
}if
np
282.723 242.3 mo
280.142 242.3 li
280.04 242.153 279.93 242.011 279.81 241.876 cv
279.688 241.738 279.559 241.608 279.422 241.488 cv
278.859 239.839 278.929 238.235 277.392 236.861 cv
276.162 235.762 274.574 235.171 273.498 233.871 cv
271.688 231.685 271.707 228.239 269.501 226.453 cv
268.962 226.017 267.015 224.236 266.462 224.139 cv
266.357 224.121 266.258 224.112 266.164 224.112 cv
265.092 224.112 264.664 225.247 263.774 226.117 cv
261.879 227.972 259.442 229.288 256.841 229.815 cv
254.633 230.263 252.178 230.228 250.413 231.628 cv
249.561 232.305 248.976 233.243 248.345 234.139 cv
241.531 234.218 234.805 235.2 230.179 237.084 cv
228.569 237.74 226.921 238.9 225.293 240.376 cv
223.517 240.376 li
222.245 240.376 221.032 240.923 220.189 241.876 cv
220.07 242.011 219.959 242.153 219.858 242.3 cv
216.905 242.3 li
216.807 241.726 216.767 241.142 216.789 240.56 cv
216.815 239.872 216.926 239.18 216.831 238.498 cv
216.738 237.824 216.45 237.194 216.186 236.567 cv
216.019 236.169 215.861 235.768 215.712 235.362 cv
222.268 227.83 233.194 221.224 250 221.224 cv
266.398 221.224 277.198 227.514 283.803 234.816 cv
283.781 234.99 283.757 235.164 283.731 235.337 cv
283.531 236.68 283.209 238.004 283.047 239.352 cv
282.93 240.317 282.881 241.331 282.723 242.3 cv
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/15 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~:3jEGGe$Om\4q1U9m*j<FL4_`ZV5GG9QIC3ENi)UY=ii;95gq*DQHKJX%R9/95LS"CT'j?Vb1[#8nb%m
B;A+3UIf'l8S+SdA=uJ(T1EI`87A&[@@KeqRRgeR7phWR?C+/fQ:G2F7U)*H>*DEYP!rN979GX?=-#dO
N^[!.79#47</X1DM*t6t6rAb.;27P9L-naj6V`;%9nPc+JjN.]6;)ep8q')uI6pMQ6:ZAh7X@?iGsOlD
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /15 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/15 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~9he>V9he>V9h\5S9MA,R9MA,R9MA,R9M8#O91qoN91qoN91qoN91hfK8kM]J8kM]J8kM]J8kM]J8kM]J
8kM]J8kMZH8P)KF8P)KF8P)KF8P)HD84Z9B84Z9B84Z9B84Z6@7n6'>7n6'>7n6'>7n6'>7n6'>7n6'>
7n6'=7Rfj:7Rfj:7Rfj:7Rfj977BX677BX677BX56psF26psF26psF26psF26psF26psF26psF26psF1
6UO4.6UO4.6UO4.6UO4.6:+"*6:+"*6:+"*5s[e&5s[e&5s[e&5s[e&5s[e&5s[e&5s[e&5s[e&5X7S"
~>
<~G^+IXG^"@UGBS.QG'8%OF`__IFE;MEF)uDDF)l;AEcH)=EH#l9E,]c8E,TZ5Df0H1DJa6-D/=$)Chmg%
CMR^$CMR["C2.HsBk_6oBP;$kB4kggAnGXeAnGUcAS#C_A7T1[@q0"Y@q/tW@:<PO?smAM?sm>K?XI,G
?=$rE?=$rD?!U`@>[1N<>?b<8>$>*4=]nm0=BJ[-=BJ[,='&I(<`W7%<`W7$<E)pr;c?Un;c?Um;GpCi
;,L1f:f'tb:f'tb:JXb^:/4PZ9he>V9MA,R91qoN91qoN8kM]J8P)KF84Z9B84Z6@7Rfj:77BX677BX6
~>
<~\[f8]\[]/Z\@8rU[^ENN[C!<J['R*FZa-mBZE^[>Z*:I:Yck76YHG%2Y-"h.XfSV*XK/D&X/`2"Wi;ts
WMuhpW2QVlVl-DhVP^2dV59u`Unjc\USFQXU8"?TTqS-PTV.pLT:_^HSt;LDSXl:@S"#k8R[TY4R@0G0
R$a8-Q^=&)QBmi%Q'IW!Pa%DrPEV2nP*1ujOcbcfOH>QbO,o?^NfK-ZNK&pVN/W^RMi3LNMM[1GLkpkB
LPLY?LPLY?L5(G;KnY57KS5#3K7ef/JqAT+JUr?%It)rtIXZ`pI=6NlI!g<hH[C*dH?sm`H$O[\G^+IX
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /15 /Gradient get_res exec grestore
}if
np
278.332 246.038 mo
277.964 245.567 277.592 245.103 277.215 244.648 cv
277.864 243.405 li
277.496 243.043 277.019 242.835 276.496 242.832 cv
277.068 242.835 277.591 243.073 277.971 243.502 cv
278.296 243.87 278.468 244.326 278.469 244.806 cv
278.469 244.89 278.464 244.975 278.453 245.06 cv
278.332 246.038 li
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/16 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~*HAD+E3^I%YoI\c*,VhuConXlX;brU)euAlBrN"aV]'6G)J5f`AY^2SUD[U:).T?W@\=QHT,;"-(gidL
?CMa;RMT7t(L3=C>F-+/PnmPf(0Hb9=-=>#OVUuZ'ig8/</hVkN"o9L'N'`%:l,l_LD*I<'2F5p9nX0S
K+^k0&k[Ze8Uh@EIM#,!&P%3\7XG_:H4WMj&4:[R6?`r,FUpc[%mY1H5B75uE=P0O%QnV=4DbNhC^iF@
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /16 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/16 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~*#oq<*#oq<*#fh9)]K_8)]K_8)]K_8)]BV5)B'M4)B'M4)B'M4)AsD1)&X;0)&X;0)&O2-(`4),(`4),
(`4),(`4&*(Ddl((Ddl((Ddl((Ddi&()@Z$()@Z$()@Z$()@W"'bqGu'bqGu'bqGu'bqGu'bqGu'bqGu
'bqGt'GM5q'GM5q'GM5q'GM5p',)#m',)#m',)#l&eYfi&eYfi&eYfi&eYfh&J5Te&J5Te&J5Te&J5Td
&.fBa&.fBa&.fBa&.fBa%hB0]%hB0]%hB0]%LrsY%LrsY%LrsY%LrsY%1NaU%1NaU%1NaU%1NaU$k*OQ
~>
<~E,]c8E,TZ5Df0H1DJj?/D/=$)Chmg%CMIU!C2.KuC2%BrBkV0nBP1sjB4kjhAn>ObARo=^A7K+Z@q0"Y
@q/tW@U`bS@:<PO?smAM?XI,G?=$oC?!U`A?!U]?>[1K;>?b97>$>'3=]nm1=BJX+='&F'<`W7%<`W4#
<E3$u<)cgq;c?Um;GpCj;Gg:f:f'ta:JXb^:JXb]:/4PY9he>U9MA,R9MA,Q91hfJ8P)KE84Z9B84Z9A
7n6'>7Rfj:77BX677BX66psC06:+"*5s[e&5s[e&5X7S"5<h@s5!D.o5!D.o4Ztni4$,Mc4$,Mc3]];_
~>
<~ZEgdAZE^[>Z*:I9YHG%2Y-"h.XfSV*XK/D&X/`2"Wi;tsWMlbnVl$>gVPU,cV50o_Una][US=KWU7n9S
TqS-PTV.pLT:_^HSXl:@S=H(<S"#k8R[TY4R@0G0R$a5,Q^=#(Q'ISuPa%AqPEV/mP*1riOcb`eOH>Na
NfK-ZNK&pVN/W^RMi3LNMMd:JM2@(FLkgb?L5(G:KnY56KS5#2K7ef.JqAT*JUi9#It)rsIXZ`oI=6Nk
I!g<hH[C*dH?sm`H$O[\G^+IXGB\7TG'8"NFEDVHF)uDDEcQ2@EH,u<E,]c8Df9N2D/F-,Ci!p(CMR^$
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /16 /Gradient get_res exec grestore
}if
np
280.454 248.894 mo
279.77 247.929 279.061 246.97 278.332 246.038 cv
278.453 245.06 li
278.464 244.975 278.469 244.89 278.469 244.806 cv
278.468 244.326 278.296 243.87 277.971 243.502 cv
277.591 243.073 277.068 242.835 276.496 242.832 cv
276.492 242.832 276.488 242.832 276.483 242.832 cv
276.483 242.832 li
275.641 242.832 li
274.836 241.949 274.019 241.122 273.197 240.376 cv
276.483 240.376 li
277.571 240.376 278.615 240.776 279.422 241.488 cv
279.559 241.608 279.688 241.738 279.81 241.876 cv
279.93 242.011 280.04 242.153 280.142 242.3 cv
279.337 242.3 li
279.337 245.983 li
280.813 245.983 li
280.454 248.894 li
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/13 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/13 /Gradient get_res exec grestore
}if
np
219.328 247.123 mo
219.187 245.983 li
220.201 245.983 li
219.906 246.359 219.615 246.739 219.328 247.123 cv
220.663 245.399 mo
220.663 242.3 li
219.858 242.3 li
219.959 242.153 220.07 242.011 220.189 241.876 cv
221.032 240.923 222.245 240.376 223.517 240.376 cv
225.293 240.376 li
224.416 241.172 223.545 242.06 222.688 243.011 cv
222.441 243.124 222.218 243.289 222.029 243.502 cv
221.835 243.722 221.695 243.973 221.614 244.242 cv
221.294 244.621 220.977 245.007 220.663 245.399 cv
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/13 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/13 /Gradient get_res exec grestore
}if
np
221.614 244.242 mo
221.695 243.973 221.835 243.722 222.029 243.502 cv
222.218 243.289 222.441 243.124 222.688 243.011 cv
222.327 243.411 221.969 243.822 221.614 244.242 cv
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/16 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/16 /Gradient get_res exec grestore
}if
np
283.794 245.983 mo
281.423 245.983 li
280.813 245.983 li
279.337 245.983 li
279.337 242.3 li
280.142 242.3 li
282.723 242.3 li
283.794 242.3 li
283.794 245.983 li
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/13 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/13 /Gradient get_res exec grestore
}if
np
220.201 245.983 mo
219.187 245.983 li
218.577 245.983 li
216.206 245.983 li
216.206 242.3 li
216.905 242.3 li
219.858 242.3 li
220.663 242.3 li
220.663 245.399 li
220.508 245.592 220.354 245.788 220.201 245.983 cv
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/13 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/13 /Gradient get_res exec grestore
}if
np
276.874 244.24 mo
276.612 243.929 276.348 243.624 276.082 243.323 cv
276.483 243.323 li
276.757 243.323 277.014 243.396 277.242 243.537 cv
276.874 244.24 li
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/17 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~/;q\&MTRH,aX`4h.u;4rLW:m!`[Z_^.YYejKu5?m_^U5T.>#AbJ\W^c^F=]J.=]&[J%[7Z]dS?B."&WS
I(C\P\L2^6-[N9LH+,,G[O-7,-$QaCG-iQ<ZR'b",]p::F0R!3YU"7m,B9k2E31@(XWh\b,&XG*DQ4mt
W?H,X+`"#"CSr=jVBKZM+_dbrBVZeaUEF3E+D.>jAYC2VTH@^:+(Lob@\+WMSK;40*akHY?^i'CRN5_&
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /17 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/17 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~.k<,#.k<,#.k3"u.Olnt.Olnt.Olnt.Oceq.4H\p.4H\p.4H\p.4?Sm-n$Jl-n$Jl-n$Jl-n$Jl-n$Jl
-n$Jl-n$Gj-RU8h-RU8h-RU8h-RU5f-71&d-71&d-71&d-71#b,pai`,pai`,paf^,U=W\,U=W\,U=W\
,U=W[,9nEX,9nEX,9nEX,9nEW+sJ3T+sJ3T+sJ3S+X&!P+X&!P+X&!P+X&!O+<VdL+<VdL+<VdL+<VdL
+<VdL+<VdL+<VdL+<VdL+!2RH+!2RH+!2RH*Zc@D*Zc@D*Zc@D*Zc@D*??.@*??.@*??.@*??.@*#oq<
~>
<~MMd:KMM[1HM2@(GM26tDLkgb@LPCP<L4t>8KnY57KnP,4KS5#3KS+o0K7\],Jq8K(JUi9$J:N0#J:E&u
It)orIXZ`pIXZ]nI=6NlI!g9fH[C*dH[C'bH?sj^H$O[\H$OXZG^+IXG^+FVGB\4RG'8"NF`heJFEDVH
FEDVGF)uDCEcQ2@EcQ2?EH,u;E,]c7Df9Q4Df9Q3DJj?/D/F-,D/F-+Ci!p(Chmg$C2.KuC2.KtBk_9p
BP;'mBP;'mB4kjiAnGXeAnGXeAS#FaA7T4]@q0"Y@q0"Y@U`eU@:<SQ@:<SQ?smAM?XI/I?=$rE?=$rE
~>
<~b0%lLb/qcIaiMQEaN)?Aa2Z-=`l?$<`l5p9`Pf^5`5BL1_ns:-_SX1,_SO()_8*k%^q[Y!^V7Fr^:q=q
^:q:o]tM(k]Y(ni]Y(kg]=YYc]"5G_\[f5[\@B&Y\@B#W\$rfS[^NTO[C*BK['[3I['[0GZa6sCZEga?
Z*CR<Yct@9Yct@8YHP.4Y-+q0Xf\_,XK8M)XK8M(X/i;$WiE(uWMukqW2QYnW2QYmVl-GiVP^5eV5:#a
Unjf^Unjf^USFTZU8"BVU8"BVTqS0RTV.sNT:_aJSt;OFSt;OFSXl=BS=H+>S"#n:R[T\6R[T\6R@0J2
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /17 /Gradient get_res exec grestore
}if
np
277.215 244.648 mo
277.102 244.512 276.988 244.375 276.874 244.24 cv
277.242 243.537 li
277.014 243.396 276.757 243.323 276.483 243.323 cv
276.082 243.323 li
275.935 243.157 275.788 242.994 275.641 242.832 cv
276.483 242.832 li
276.483 242.832 li
276.488 242.832 276.492 242.832 276.496 242.832 cv
277.019 242.835 277.496 243.043 277.864 243.405 cv
277.215 244.648 li
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/16 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/16 /Gradient get_res exec grestore
}if
np
289.669 243.446 mo
288.288 240.622 286.36 237.643 283.803 234.816 cv
283.861 234.357 283.904 233.896 283.935 233.436 cv
286.427 236.721 288.312 240.171 289.669 243.446 cv
210.332 243.442 mo
211.561 240.478 213.221 237.372 215.372 234.374 cv
215.478 234.706 215.592 235.035 215.712 235.362 cv
213.396 238.023 211.624 240.801 210.332 243.442 cv
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/18 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~'3Ub;=I9_&QP*>a&lk//<0@hlOV(KP&Q+N":lGr]M@`O>&57ii9SO'NKF^\-%nV?_8:V1?Ih"qr%Rb[R
6[B2.Gn!)a%7,+F5]dE!EXY-O$Tr>84)PEeC^W7=$9;f-3+rXXAdUG,#rH,u1LUSF?jJJn#V]Ni0O"f9
=pHZ^#:rp].ocg(;[+[K"t3=Q-Vt!p:'Dt="XH_E,=r"^8-C)*"<^,9+%$,O63A8o!usN-)a+6@49?B]
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /18 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/18 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~&eYfi&eYfi&eP]f&J5Te&J5Te&J5Te&J,Kb&.fBa&.fBa&.fBa&.]9^%hB0]%hB0]%h9'Z%LrsY%LrsY
%LrsY%LrpW%1NaU%1NaU%1NaU%1N^S$k*OQ$k*OQ$k*OQ$k*LO$O[=M$O[=M$O[:K$47+I$47+I$47+I
$47+H#mgnE#mgnE#mgnE#mgnD#RC\A#RC\A#RC\@#6tJ=#6tJ=#6tJ=#6tJ<"pP89"pP89"pP89"pP88
"U,&5"U,&5"U,&5"U,&5"9\i1"9\i1"9\i1!s8W-!s8W-!s8W-!s8W-!WiE)!WiE)!WiE)!WiE)!<E3%
~>
<~=BJ[-=BAR*=&r@&<`N."<E)ps<)Z^o;c6Lk;Gg:g;,C(c:esk_:JOY[:/+GV9M8#O91qoN91hfK8kDTG
8P)HD84Z6@7n6$<7Rfg86psC06UO1,6:*t(5s[e&5s[b$5X7Ou5<h=q5!D+m4?P\e4$,Ja3]]8]3B9&Y
3&ilW3&ilV2`EZR2E!HN2)I-G1G^gB1,:U>0ekC:0JG160/"t30/"t2/hSb./M&G'.k<,".Olns.4H\o
-n$Jl-RU8h-71&d-71&d,paf^,9nEX+sJ3T+X&!P+<VdL+!2RH*Zc@D*??.@*??+>)]K_8)B'M4)&X;0
~>
<~R@0J1R$X/+Q^3r&Q'@MtP`q;oP*(lhOcYZcO,f6[NJrgTN/NUOMM[1HM26tCLPCP<L4t>7KS+o0K7\],
JqAQ)J:N-!It)orI=6KjI!g9fH?sj^H$OXZGB\4RF`heJFEDSFEcQ/>EH,r:Df9N2DJj<.Ci!m&CMR["
Bk_9pBP;'lB4baeARo=]@q0"X@UW\Q?smAL?X@&E?!U`@>[(E9>$>*4=]ed-='&I(<`N.!<)Z^n;GpCi
;,L1f:f'tb:JX_\9he>V9MA)P8kMZH84Z9B7n6$<77BX66psC06:+"*5s[b$5<h@s5!D+m4?P_g4$,Ja
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /18 /Gradient get_res exec grestore
}if
np
215.712 235.362 mo
215.592 235.035 215.478 234.706 215.372 234.374 cv
221.888 225.294 232.901 217.224 250 217.224 cv
266.507 217.224 277.342 224.746 283.935 233.436 cv
283.904 233.896 283.861 234.357 283.803 234.816 cv
277.198 227.514 266.398 221.224 250 221.224 cv
233.194 221.224 222.268 227.83 215.712 235.362 cv
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/19 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~5B*klDm2EDY<Hj,5&@>bCTK[7W]b*r4_^iXBW!t+VEALe4Ct9MA>21sTfchX4CXpE@@fPhSNC5L4'n@:
?(!`ZQo\K=3a7n1>*M$NP;ud/3*25%=-,CBN]:$u2cP_p;i<S5MDnFi2c,8g:kgo)Kf2\Z2GJf^9S#)q
J2KuL2+`6S8UWHeHo+?>1e)dJ7<p^YG;DX11I?4?6?G"LF#-($1I#h75&W2?DDF@l1-9;-4)-K2Be_V]
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /19 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/19 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~5!D.o5!D.o5!;%l4Ztqk4Ztqk4Ztqk4Zkhh4?P_g4?P_g4?P_g4?GVd4$,Mc4$,Mc4$,Mc4$,Mc4$,Mc
4$,Mc4$,Ja3]];_3]];_3]];_3]]8]3B9)[3B9)[3B9)[3B9&Y3&ilW3&ilW3&iiU2`EZS2`EZS2`EZS
2`EZR2E!HO2E!HO2E!HO2E!HO2E!HO2E!HO2E!HN2)R6K2)R6K2)R6K2)R6J1c.$G1c.$G1c.$G1c.$F
1G^gC1G^gC1G^gC1G^gC1,:U?1,:U?1,:U?1,:U?1,:U?1,:U?1,:U?0ekC;0ekC;0ekC;0ekC;0JG17
~>
<~Df9Q4Df0H1DJj?0DJa6,Chmg%CMIU!C2.KuC2%BrBkV0nBP1sjB4kjiB4baeARo=^A7K+Z@q0"Y@q&nV
@U`bS@:<PO?smAM?sm>K?=$oC?!U]?>[1N=>[1K;>?b97>$>'3=]nm1=]nj/='&F'<`W7%<`W4#<E3!t
<)cgq;c?Um;GpCj;GpCi;,C(b:JXb^:JXb]:/4PY9he>U9MA,Q91qoN91qoM8kDTF84Z9B84Z9A7n6'=
7Rfj:77BX66psF26psF26UO1,5s[e&5s[e&5X7S"5<h@s5!D.o4Ztqk4Ztqk4?P\e3]];_3]];_3B9)[
~>
<~Yct@9Yck76YHG%2Y-"h.XfSV*XK/D%Wi;tsWMlboW2HPkVl$>gVPU,bUna][US=KWU7n9STqJ'OTV%jK
T:_^HSt;LDSXl:@S=H(<R[TY4R@0G0R$a5,Q^=#(QBmf$Pa%AqPEV/mP*1riOcb`eOH>NaNfK*YNK&mU
N/W^RMi3LNMMd:JM2@(FLkgb?L5(G:KnY56KS5#2K7ef.Jq8K'J:N0"It)rsIXZ`oI=6NkI!g<gH[:!`
H$O[\H$O[\G^+FVG'8%PF`hhLFEDVHF)uDDEcQ/>E,]c8Df9Q4DJj?0D/F-,Ci!p(CMR["Bk_9qBP;'m
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /19 /Gradient get_res exec grestore
}if
np
250 299.283 mo
250 299.283 li
236.13 299.283 193.177 272.499 192.661 265.447 cv
192.532 263.684 193.549 258.788 195.321 252.275 cv
198.802 239.479 205.199 220.438 211.563 206.615 cv
250 206.615 li
288.437 206.615 li
294.801 220.438 301.198 239.479 304.679 252.275 cv
306.451 258.788 307.468 263.684 307.339 265.447 cv
306.823 272.499 263.87 299.283 250 299.283 cv
210.236 261.656 mo
216.709 270.191 234.464 290.365 249.859 290.365 cv
250 290.365 li
250.141 290.365 li
264.872 290.365 281.763 271.895 288.864 262.823 cv
290.253 261.049 291.267 259.635 291.817 258.788 cv
293.072 256.858 292.62 250.568 289.669 243.446 cv
288.312 240.171 286.427 236.721 283.935 233.436 cv
277.342 224.746 266.507 217.224 250 217.224 cv
232.901 217.224 221.888 225.294 215.372 234.374 cv
213.221 237.372 211.561 240.478 210.332 243.442 cv
207.38 250.565 206.928 256.857 208.183 258.788 cv
208.606 259.44 209.304 260.427 210.236 261.656 cv
level3{
gsave
clp
[132.401 0 0 74.9909 248.896 313.302 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[132.401 0 0 74.9909 248.896 313.302 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
179.443 407.98 mo
320.11 407.98 li
320.813 407.98 321.382 407.411 321.382 406.709 cv
321.382 401.142 li
321.382 400.439 320.813 399.87 320.11 399.87 cv
179.443 399.87 li
178.741 399.87 178.172 400.439 178.172 401.142 cv
178.172 406.709 li
178.172 407.411 178.741 407.98 179.443 407.98 cv
cp
.72549 .796078 .843137 rgb
f
198.915 407.98 mo
300.639 407.98 li
300.639 399.87 li
198.915 399.87 li
198.915 407.98 li
cp
.0117647 .145098 .305882 rgb
f
317.299 402.554 mo
182.701 402.554 li
180.199 402.554 178.172 400.525 178.172 398.024 cv
178.172 309.599 li
178.172 307.097 180.199 305.069 182.701 305.069 cv
317.299 305.069 li
319.8 305.069 321.828 307.097 321.828 309.599 cv
321.828 398.024 li
321.828 400.525 319.8 402.554 317.299 402.554 cv
cp
.858824 .905882 .933333 rgb
f
438.124 419.208 mo
61.8765 419.208 li
61.8765 407.974 li
438.124 407.974 li
438.124 419.208 li
cp
.313726 .647059 .827451 rgb
f
250 345.655 mo
245.503 345.655 241.844 349.314 241.844 353.812 cv
241.844 358.309 245.503 361.967 250 361.967 cv
254.497 361.967 258.156 358.309 258.156 353.812 cv
258.156 349.314 254.497 345.655 250 345.655 cv
cp
250 363.967 mo
244.399 363.967 239.844 359.411 239.844 353.812 cv
239.844 348.211 244.399 343.655 250 343.655 cv
255.601 343.655 260.156 348.211 260.156 353.812 cv
260.156 359.411 255.601 363.967 250 363.967 cv
cp
.937255 .956863 .964706 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 /1 /2 /3 /4 /5 /6 /7 /8 /9 
/10 /11 /12 /13 /14 /15 /16 /17 /18 /19 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 16.0
%%AI8_CreatorVersion: 24.0.1
%%For: (Ayib Makmun B9) ()
%%Title: (Protect against cyber attacks - 2 up-02.eps)
%%CreationDate: 4/29/2020 9:45 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"+`Bm\PpZhJO5-i\baA-'?KA7s08C^o(HKGneB)M4r>p@N`WJ,:8.Rr#aY5Yj^=3T1fZ*_E,pdEH8nR\.nT]iMhoHHI]:X@8:$
%-5&t/9S@!)'e;%<TB>>2)J=)GU0L!`oj6`\pJb.-Ei5+&RYog%Mr]@\XiQXs"Abi7NSJ>"^EU4c<-s1?ZMS+-e7cuN7=CH4&XJ>2
%pb'`iEkOrKIb]:Pb3E/`(Kc'WY@+:F*<6>+d5AY1WpIL;Xg6aL65uUrgn;"0*8)+;Ma,V$1\n#tl)IXjTsX6S%*5HsI[/ELN^s+G
%R</23h3>K+`^6,*iaO/[0^+#I&#1h#9LBWB`\U2HMo=%;1+oFl(4+-![!U/4;%PMZ3u/=fT+1VJ>%CEplE[Fb.][a9NIRYbX8iuL
%htj+S?;jlX>)b.L5/*B2E-7u+jX.WKJLEB%N$A1.X`(nk\YMF2>o7UYfg?$sNgdAkGT9>jAMgKY?HGcCDOi;E\?TKu($F%T&l9qE
%E?Qbr8)kd8@@;3eOoeUgBj;Z$+N'WW@'+@\)?^^>2!R^'BK/drKMU+;;kp`I1.!7Pas?Yrhc1V<C[=u),cuLR3oXl504XqEXTr*Q
%]5l*1&("V]LnGq=IT/d:(L-RFnqmXKK7;s5ITf!?:$"rrCAkro!(=#mG6Zs'*%UMFUP/\DI6,rNV(8Ig*^&4XQ!SgPor(Q4MIu0H
%<K:>,[B?7@:tHp>eaN!;.2'T6*][;u)Sgm\Asp0YBJ0MhKRTqA7!f:0ih+6jC#1MaO2.J*!:=[/oi#`XD$$qBNX"KW;eem="@"R@
%*]AJa'++/=JOB\'mPP_QTU%L/"[g+;*:S@`&<Eci6?K!2,/nj17_tiXh_O;#;Rc@IfVit,lH;iFB&cIJg<Ya^,cC>sc]N9;Bps1T
%4?"uc5/WH.S,S[>e"7^$/J((-Ej*lUXa65`2OXssj_(QPDHeF1+n0['6LVI-`'Bcd%j8?gG:5QB(:BQK\^^fna/PAF%:dD[%f7KW
%*rYdoX@5KW;f:,I-@"pU"W'`Om2f9>J%o$LAu"s424(go.]M5nXXTTdGIfOQ%)iRt']_q!MbSV/,InRM;s^M^]`Aek=sSFAC.YT_
%"[)%Y,&@Sd\_`(?Nf2u`;kNKT5&EuA.ZO5\IgE;].[4tMCai@VQ@olP@S9D"<%JaTnAuEO`=2aAq`e#OXK*q3Kj6C"L//";=nq&u
%"o&ejYEW\k9V-lT*kqH_Ql#<bpeJ[RPu#:F".q.DbNEsAYE1D4I=go#1o-?h'po&<qr8'Sq'Ql>"VEp"r$?30ks>aWA`,4GaA%(L
%hsctd],>uT%Af6_>lgV(W%P#'O5#c6D9CcPp4(G;ctdTW%(alk+:*Q)W`Vm7#[&;ujFs=)&fHfHGu5,A0a[\i>0Me*&J0I2/Jc<'
%P"B]`&X$T9rCasSS]nksRtN[IF+>[gbTd&%5c#=mYkZ,PLPHC>QkJAs<%<kl)>Ib$P>C;u"!()N;oLQq+&KZ!>T36(ph5@;n3KF.
%a2;'&0GuddAb_4G&Q'e"j%Le`Kb#),eCfHL_;m?D.8r(+1b>k"[`#Ej`sJ7A9h]UG0#n^:'$p%e0CVOsc"Hek?f6hD"!::r!Ga,-
%%62N5^(@_@^f3eI!JX3<BJX$D$!>:N/kXK/*r;>Fr@=^Ik`([!ih#4=?l<X%$<itG'XLK!c\d7/Cc7n;k1CZG'*08E*8jhp9HI,@
%#14De('d3YkTs:Y'M:fs-ko*8)up%h-ko<#"ulas!PBVn#7h#ddc^cqQ8Ymf//\C(o#$\3T;(^OY^Q*'BBg.oF*t:%:WE*"gHI(@
%-`MLoU41(;[Z=hnn?rkjpt3._&G:N"8#1YWOtaUXGelTc7[k&npb4fQOtXZWfU0te4lgi)/te.3cj(c\,^b+VJ7?ki%R)ESE1mRl
%#TO6`ckM9MTWK3#Khhn$/WEj6YnKqTWX?GZ!A1UeWA&]bS!_ab!sHGP=l<RD_ZC]aQ:eGJI].NCO'XT]:ELro9QDJo2;B)ee8PTB
%RZ80t$^_U6^m/Wld3S4]!$1-n63`7E#i(sU50j;BV1JN-+:/274I9RZC^FW?!Mi-oUdbR@2?ct]XBn.?065EA7OWhP.0/PlJ:B>i
%74F16%G)Mi2>h'/bU.J&@XMWY!Zn7'@4Z"E"uYa]Qt(6.jY^j_4=)_BG`3^R2[(3P)''gG/AM=JnXs;VLs/q@.\8K5</d_WO^jPn
%_'RR#.)6#0-:MIO`Yg<3dA'ZEi)*q@D_<?QXNO(r&J80O!"0[&PnAPhJXHg6.LZ3lcp3mB3OhVc)3IE*R?ShE9s'i1k)7S>ZP<SV
%NbZiS/9Sp.7s+caB)-161MA1^<U"Vd%amt.9?k7J`PkLtC&B'^-^*$ZGPqpJ^PBOJW%b8e[gdi&ol'6l!F1,0]>("AOe^"R4VOej
%iV1[*!_+36kbk2ma<>hmd=*k%Krl1i^FBOdP7*?gEd1.?n&UqUOGOsUR%WI+lWpZ,VHbDpeQtLj__.P')7Ijmd2VE8$iQoYSn[Qq
%P"5WFT]'8qJJ[93b[;&TErqQA,QdlkU'Es%@PWQh6m35Seh@p'!?"5b#d>FlEA7N*V=e-DIPfF_4SF.`c<tJP,m;fsD&)&Te.U%X
%`$N[c<hW3Wb@K%5)4!(.>@dq7].!^[oRF!c[/D?!3$:H$JA!qggM^97fd-48<gLuAGDQ7V5-jmfU>r+N*2AVAO>J3qGP[G9.r/P"
%^UShq>B'bSrP`m^gI`DemOrFMRciZ36C//3`m&s3gPQrKmOsStD(CNAh-\Mo[B6Oo\EQ79#>I]:YY]2lksr.`XF][9iWcE"`=5f@
%(Y;N$.rCrj^U/Q,ej7Za)_JB+11pD3QmITUFe`0l6*b;K[B^34fckF6+,.//"q(6c)^r'.2c/.6>XtKi["6*ndO)A211hQVWo%ol
%<jK5,XaS/GC*h&<eCn!NUfOe&kdX3W>)6SA^)B3IlA8R,9PKbHn(8!d,\7]In(8!dLpIGWGO,JB+_ID:eTOk]2UPEn&T,M3Rsi7Y
%#@Q*tVN*8j9]K_lEBp-^HNlM?!q"%,Xe]sC^USh`>B/\8IrPRW[c5<Oro+,C%D&n)fV$T?*8?@?2uAK=%`#.r9HB[IR)[Cbidas[
%@1=1q>htHN>=nEu?Z?1=[c6Go^>]>XD8jbhIDlY;@Xb^.)"Vi6G--AY*IC)<"NL/Qd?-r71%*[%!q$J:B&GGn`r\<QC^#ffIAICK
%fh*2BqaqeeZ^!Fdp6@P?B#l_H.LiB/O%ihuj(<d\ecD.\KrO+[%TC-q?i0tR\Z+:L,dH7l\nKg]Io7#gm(CdG>rbl!Q-]#>?/#RI
%-#k8)D@1]`nQIr<eJ_OB`!bE/rLs/AXYa4HP,bktAR>"DPJ0#7elOq&=l#b?C(E3:p>j6B1H"e\j]<h6h<.DBYLta,\SBX+c[jFT
%('3k5\O.LeZuIj`kYgL<C?e`;8i$t)3iE6j.VS(1A[I6SbM?'kfgRFH$1f't7,n(,n5u[5ptAIp5*+8>d=5Jl/U/+bL8^)HY:FBZ
%"JSg@B:7IpUKL[[(,!Gf"(FA\?esUQN=-dsRJE[MihFu%_;-k3DEZZGrfij7^$'D7P/qp0$UR3;SA%RMZMTo'Zi)FT=R(o(l;0=9
%9;p3Aond6H%+DQ.NO33gCiSp5FABZ'!(7e:F\a)6=5i'KqX3'D)N+XpV9(RJ%fS4Pi-Q7g!@(<^l6#UAW7C?2^ik'>Po:mIh!$[`
%n?,XfXTlD6Pe2om/V#m=%X)f21f]<==kcSfeQ"Gd]r'Sbajcm3?Dd+d=k292D4D3;4'%V-E_2OGoDfmTZi\9`Dq.jJ\t?+]lUe3/
%r<u&pj?&SMbGuS`?T6at(34S_cRDGOBYOM6]ZG,d0G_h$;VJE+JV$Z^>1OX2.9G^jeQ)\?g,)i0poV,-<dJ/MmV9R`+o3"PHZ.2;
%3,#OK_[,N&lOPiWX0pIE8/1.*aSNh7I4O>WQl)_7j)eb#^12^L0hs+9l.?iNO/`=@8+ThsF?Z^M9(1%GDsNWo1RM:Bmm)J"XOE#K
%lJB35B<[58qIbX5`dL8P1ai<fS)n:^Y5J,m9;o]4[SfJ8DS.O/:e^RafPK9sL##:LEoq]2b&=1^0???sGcQ`V`Z"[(>P5;UlikUe
%UTqDf;Yet1HC[euC?5NoqS)WLHA\eZO?W>e`du1q+dA;h)epsuph<u$U%8!2Oh8Hr1]F-."S[#.KgZTRIq[_l)W$P>f5mV4AXgej
%2adB!o\sdXQLmHeSY#[+e`:aF$Iq;o>8)iK_G6eAJ51CkN&J]TIX5cE@A;A<e@a5pFJW#o55)beB"_bBGIR?C>A;33FOth[9T:AQ
%,N0_%`r;f)dD'U5)mc5!2'+BKQl)\rJ&L@H;i8l"dV*b66b/L`s'0?^3c?,*b0)ap?lsb2Ah]Rt\1GXQeOq7cf"3]p#$PVbDZYT@
%`d%ke1W^4qA`(6\r5+6Q&c[#;$8G!N4t^'#KWuAh&AnA,%;!)G2S.5<E]:q:qD_6kiMWbsR>h0PaG;cqe91:6b`b%IgmgKe-N=&U
%oJ$aC3Kho?)<#_.26Y@Xq)8`1+)T4`BZPr;#7D2u1EO9?m!^7a.*\83bQ$!DBMDsP-5fJVnURne2uZOIn(D%[rl2tBoCpWR^V(2s
%Cm9FM_6,`D+\X!3ErO/-MtB.N\#&a/@oX$o<qWrRc5!bcN/kEB=306l%5j9)@kA?YSg=6D8];jYi?j`W/WB1[(Z##ZU]^S,f@Yq8
%O=>82,9Ooi8it8LN!h"ed/1hAP:!ncpigqpG42*%e+);.K0DG-"M8ljGEF[n1Yg%'O<bs9M\MO%1NVD4,priOND6e)7oW(D$#n[!
%Oq:n<5kM`]Qd4e2Qh&I#X!K^JE`9,pEj55Oq,Y2Rd]^t-gtVfehfr<T1ck$$<0L\N<qf."O7V/H7#Xp;muk(a;@bUu%&&7jji9Xk
%NQ[8Hn$<tB)<4]uE:a_Zj(-Vm(pu*)"7djss+k.FhRB]t1I,Fo.7.QiO7W'1oM1'ZPD:<mp4n=@HfJ"(`l]/V>,6JXd;Adi0hkbg
%][`r>)_G3eO2A(lc.\9m,%-jaj/ooF;Hb6`YZC)'p4C1#CnjP6o2_EHR_PZU!P5RB3-?N)S931cGcM<<L'r*PCc%WT,%[6^f/7lj
%gJpS=TZZ$^LnU`b.QW_K`*.anr69tR^16gIS*OdBhl9WI$5k9@NA_d:DG\MKqePY->CBJ9f+<N:Q[VjX8SU+h_b=F<J#XY6B;<RN
%H4md\mL@Osa,O=2dBt_#kDXoO;OF^,(J^De/kmOVhS5ES000k-`.jH8)S6\Mk`"17pG$-DkZ-R2MHpQVG@M;uoF[@ONuP\FU2,tF
%V+L%%,^/F5a"FWH?0kH+))Ns%`[#_A%'@)PUGc_-^^#^%$8XqW+t<MOfVR<BNEln=[4r=5Ip`S"*(.!J$ugHbo9KLV+Z9Z:'0A/k
%T)X1_rob[e@lHGuZn_$B+Wk\+fBds_J2`stK_1OXi:,e=%aiD4@de/@Z2\Vns#1\="79;M&W6aI`T0E<lM[Ku`'c.O`8X09IS@"K
%<8l+j=o8Yl72_*W6mtf`i^>3C$,qb$q!hA'M,9]J`JIEe&rP`W>:!hL_$?9coU$KCReSkFZ;*Ar?qs?h3)/i`4XMMG2W;#NH4lX%
%80=e1U#7IqX=Eb_>A8R09hlZ-aN`22oXb_k48(hXc+icTJ`A.B)m-^LfOtF0W,)i[CWfVb&8$P)ig%!INPAm`W_OLM84D@Ra`^X$
%UH$qelG$`H=!`[1`cO;B&%d*#)kq!*Z[3@^!r$]CDMk[a*"uaLpgt`>[gq$Zs)iPtq(M<FhTgKe?u)\7VQG:-1M6Z.6iLq3]`Tk\
%0hru#e[\7$aVu+FPD(S))*'<r;hSYc0bO@AjgD44)I<07(Ei*7,95T=NoZ26NjB:jGEBNA\/37!6=o%J0;e285VSS-8,O;EU@^SU
%=KSt'8/R7>$6d]%hGBY6C8:\(.X+6R<T?.iLG`;UAP+"Wp):uNq*3OVp*7i,j1$3gfRT#eACr1!Fg@J)Kn?R9bn%>qk[ZR.0p7aN
%r5i^Q4'Bh#*%p=i_oZZ-Qh!7Ac2U^;Pf[\>A2W7=Y.ThGI&u2!omDd&&#\\f<q+/O'fI,IU<*cAA-G35OIWE1%mNOuj^qHe76O8f
%`m\uF$H-[m#@70<F2%B\RS$+_.u-2O_tMOUmpj'$pt4oRH)1[:Ik-1_l$MsFF;F^UU8L2,OWSU/m;Iu>+<?XP?DjJ-48Xa!hd:De
%qo#NpnL@;HMA*2Q`2blf.L,+A+7b*Z0G`/nE@kp+k5(8kbH5p6B'"/3!uatXqTjoEPe67]>[LQ3W>-,Y0_%0;\c.njG72Sgp_D()
%8%eD)@OFn-6g<LJCTe[rKX$LYN>LI(I8srg_u1,QUN[8$"RX%Fd\/95a-f4YQMiu7[#+foD#H#X[Tip@6iE(oADV!.R[u]cFG+jm
%p:iTtm&2kSpeMh;gd/Me]fGUN9fu8d:Xm;r2=X(/4AcbfeAN$^/mR7g-VF+pBq?a//VP3C'2R,f);5a"e>PK,D^U"jH?K.(nZS4#
%U[99cf`$b&B0L'Zq]K4CM+?sN-b$k^5fn$!GUC?e/X)0,hLCS5)pc0pM)fZCkL`JNs4IEJDe*O':SgP-'$"NXIM[(rA2Ca;SG]P1
%BJLsMV`B#VF)kOJjj5g8\4t)/:#J@`al=4N&Upr3)o)p9R!6o=O153qG/$q(QKlVraZ4"b(gm2h4/75bI5gBar1!&bn\0.,O0V1X
%rUIr$!81ok^%pjYW%UQ"kYE/<A]KCp`^LRkO,k<lMqCOblf"Z<R#6h9guH0%<Z,Afrs#7[]a`SC[W!sE,;h2/a3VDWZ/Rl'&Vj0k
%hG>l0/ERJMQT3/Eo],QpLPc*hbQ"F,J@?Cm+iJp1C=L/>g$6Q6Wb\;=8dP%QT8E1%*Ek#9M=]k^=CNAkH'A5HcC5A.RQ,44cC9[^
%AfQR'Df?#q\)Ec8D^Nc!O5ml=SrTrf-Jn1Hq`-!c!MN@kqkHGPDpp"YceZ*J&(OS#h+"jhi6AN0c)CD_UDYE9htGK&FnJUsC0dfa
%X>E7SY\:5hp=$,0D1^3roUB2fV2eeYjW?Xr<=<613F7'5SqbnIXOVY\JRSQrL0ViE`^&Z[[a"Q4`fnZigc@IKXDG1FfjqFp^OEMp
%3;j/)>pY.>UqC!*53+V5+dBAFZV+F<AbJu$?:-Ce/kr;Jr>G@U!*bN_.>QQ$:Ta>Z5ZhO`8=aRQjPjD^QQ4=*VTsFs^'Df/S9URg
%-].Y[(G'5+j@[4"#iju:B:2?,TI3g$A\_]@!?J@o_%7Xa/&DJ%+H[uY+QL3:d\Tq9a*.92q-2E7kQC<DYl+$W$M;7tSQMe.Cn6<L
%r?h7&`'4-Hlr3cFG%.(=m*g/@TG.3E@\6E^e$lb]s+156qJC/jgH_V(kJTW6#82,fTM>pFM1PL>)Q5Ca,FYQ4MGeq%V%?PlrS+70
%`'3j)b-A<L_[PaRfr(Nsb$SSNIdGNpk`u+gQ7MFRb7JRkMt&iaoV:at1YDnuZ:C+,ADYS.,3(!T'oEH2``Ee5FF0OeE=k.G[#<J!
%VP:4nRo8Wb4egb1g/>'#rOiud`S0SUDMIX$lc%b=1i]EX/E;HMh3d_<$'FF2ZeYl\%hH'`f!r5H6ZUgI2gK<cZ@d@`c@9@jq'"%%
%rUh.BMi&j%]g@8e"b2]1ja?O!W&!`8L#na;7d74lo`"`d+-<$p>+Mf1FD@YsBQ_&a<dgg*l0Iuk8#[hj*)QN:'0CVqSI0^)qm]@N
%Thh<\48)*8dVjjd2rRgtk<&4VRu(LD?78DF2I:`=f#l2QhPtdE,(K4/^Aa?d=(pOflnHq@o]i&b&!eAo](Ru.1WMr1SEM8/X-X68
%6N+FY-M/X:JW9.W6N<Nnem!Hc_e=/^T=312#O/Dak!VM)-tmOpTM>'bs$f4'lV.<j'XSCbC@\X)l3C0i-48G<3t^[DX=2FGQS/A.
%aUpjNhhhL"256Ff:!d]>il@c`!>-fi*XQ?(UC]cjjUGe4Uc,g1YB$!DC;t7&%dbVcRn<Eca3cgbh,C9bA0Oh3jEE=+LQIO+1+.k(
%1+%)5q]DTTSG\u@jMB'^ELE.\cWlY_q.!4Bj63A4S=M`B$J9hOF2i*Zrb,f]R9Bf9<fb9H7CrfP(b`'gG!Y`gmPsTcp@iCPrSJYp
%qNd>qa4LTUNA14LmE3(/4fJ-2`./cfa(QY7QT9(&hX1M:"HN!dq'lD)qONfSS2&mO88TjA&OeY9\!6^0Wp&?F(!qH$DYfYmpJH+[
%M1*&(F(4cfoXO7[o3Ze#hP>3?Dj%1#QGR/02k9^%0q:UmjS5fOL"H:D7A?Gd)`2g&s3V,Y+)-RHHj4ClW0%O/AG\?es5Y<N-gm!D
%gO0e7s'nh+f8m4@C8h/hGAA2Mp:1IB/&!N6S+:,]f<+G:\"X#\Ll^m'/G32SZZ29tnPk0u9ITF@:u^nF;^+:8M'%E_F718?#hru?
%:]F[b>+N\F8*.BNmeG^XT0`'^`l6soO@hW1qS"k<mn)Q3\:&aZ%#7VjS'C[_=RQ\`"-W:%U3F\u]RtqIG,jDHG+W=q`E(eW>n>g+
%dB1QrdQ.O[Gh96gIQo2E2-T()WDCQOr%+s54)O]LqZNNZ#49RaQ)YhGWP-Suj@F#W:U1m!;<uTYTSF-HBjPO4)c,/rWu!p#P\(!2
%HaRLQa,-W`>]10q_VUeIco$mXTcSHdE(LS&j+I]]0_c0,3%Zb#oZb]qca%;pN/h6.!0;SH.DK'](Lkm-[\^>TCbhOa!]gN8dJ+Ph
%ekasMPe](GY>r&,@>s?@V+)u0'e/A]LcU[Fb@kF7g#t9.HGDdOJ<[ZDm:BBBiEMJ/3fTT1)636OLB56M8'M]IIs'9bklI,CpIq_=
%5gjfQ<%FoBPR*/Zr]Tq2M&a=]GI[AT80W'g\[uJuodP-1L*"53lNf]6gB\(<-iqM%C8`+lFX1rVWEn+^k*g=k*XY^B4i6^T*TC`n
%7!-?KiS>%E:?@aA^";JrFiY'XO,t!KM@nhbJ[81#!gntFe%@*u&LPdM;b9000%*uc,JjW%nu8Db(EAo912460iHGVu-D'3P!m=$8
%,r@S)BTI;aT%P;M@aMG$LqH:NU*CJ(b,pkRr@aqeO4lsGVtc<Xl_2=3%uo%_*>?L7gm:9I^*b:iEoXR`ZmH?DFNncDo[,'!d9&NM
%VNNJSj:oK;4<e;j_k>n$:1,i5Sq4%)&NsM^<_R,pKd^IUf@a!]bSoQ$ZefN3_K.$IYJa*P4QW/,9tB#D[B?'$;-u(0Rpn+iV.!,Q
%Z&'j]N6%cP9M,lE.D;k2]/+ual)JtOp3m>.jn`>;:]#dD:T$'/gdSF9hR32il?`!$3HXVOrb=9n.\.&Ii!oH^R/S+A`UD\Sg-fB:
%>o(A0UqSHIM:3j-aEWG2EG7OY.A"fB>2c'?:31[,YRgk%`Fh.IESQqf9b*W&]?0Z,ga:434bC\[>T*]pdQE`0QV$g!LZ'JV=L)@-
%cp4j$-+fWdLLGa/@fT/uJUTE],+$FpC-us"p7srYV@]sWQP)^;J<gr^0Le=CP,s@Q;.*4AiW>`EV%M.L.6ti8JmjgEhQfJ&6')6N
%g53s!Tdhs;5j$MqR:S,6<8'_fiWYI^[*L%ladDeTUr]:=0hM.q.cF9>JObCt)!R8up,rR5TlL.T#mA>V#i(+6#g`lD^l8sE6(9QY
%oe9ahSI@!cCL^p4'9,Wl+;/OMiY_7-Y,_-JOgI.Bn7F/(Tei*q+Js/%TaMbFU_%tYbgO/F+ag(?Wm.tbn@5a%oc.V<RS@GC,*+0"
%`<[??"bo\?(hagF<?MT!_kV].?#^8S$If5Eq2>WE8]/3/`8+5\!inU'1E*B,$rN3#JWWdZ)43`.Mc^,k'UfLsKp2b*#FH>DPN#"?
%\O$Mn)7(G4;Rf7BqSa7)KRs@aK7Jihq]Zhbh6AP8fM89q,SlBTodglMCm#C<H9%S;GBfl5-Cp(K0H9)DKM'^\"pN!Z1i\'YGtc/,
%'c6qQ#9nb.d4pg3+H'0!%hPoE/L+ps%ksJ="&\G.(m:Df#o);g*>;"4')IuDmPR:s;cKahA75In*=t@UI'u:?j>ULJJA3&uq[E&8
%&ib]\37Kc>%31,7#ZS^9pVgYuK0,(N@(tcFIc3+%F9.pU+<ub2S1A,J=Nh$n,QpiGV)cbC-NE?"H&_Z*i2-em$*?K!"[SC3FV\W_
%p*DM`6k_D6L<9L&Gg--MapiI8!\Ip_,&/kDi^:X#8Nr+:3`7m?gfBO<2%q4Yi'3>mqPG4q,QV(V3%PGf/CR]ojl&'j+Y:e:$Y-kM
%B,K#='9_/;TLB5F&?LCRJ:h!\@5/g$acrI?%3CG=UlO]8+[)"B9]?+V+<WJAVHG\m(@qaNnmVe2&Pca(Clm(u%pTB2XPsUE(bU>a
%$S]Vu(eb=QK,H4Y=A\IkaC@IpTpDQY6ju!48PE'+aIEDO83tTLV3K&72uoY9jttbJ,nZH6qB0AUamWaQ9?O(rA7@90$mGd/-)jV:
%)5H(,K:4TL]Q"@K%e;Gh.9`T0(!`du#hkG9&+/!2Zm#VK:fp26=T88&<LO3Cs,l.oa'GkeoL9X]>45I/FUM(`O>:07(cRPFN.0L9
%`GgJ!-+c;5p;K@,di80kJJh<:?>e3eMQ[D8^(O^bFXfU%[BmR]j>DY.kX!7aT]n*e>LTkW*.(Xb)m)/CS#*q8TX67oO"jBXcp\^W
%I2AGk.4qa#gH+%fC+jUuWfop";%gk;M""\AR'4krFTVep:iQ]ake?lN,G@s"Fh5`]*u#+OU6jh,hqCm&?D=a!./f3ikZUJCmNj]F
%JtSg8eGk,=auEPi?+&j*Z#]$tfDD2shZK?iRZ6%A&`YUMgEMJ1=_deTq)?iKs*c=N>@`>4oIT=KM?J.H-os87qphY*;f%&tVO)ZH
%4\MZ(HhIu@gj(81@Z<f=ci-n//uVR$nmhD^D*6dEU#>A3^[uD##V6n%BW2tT!e)4@"O(]NU)gFX=/pmj21ihYL2P4O?$DB,d2Z"%
%h_J=lf9GCn\^J2;@#N%Bh54)8RV-ZQfBa>gOj80sODlN'[V5iSL9Y3W/a)m&dpbU4Tiehc^]2#K'";r2khlEKltFSBh8mRSINe8b
%rbYYn;3k:KG#jkS/JcC/;Q$0Y1Emc0+ZDQ%po2\TFYT2WB>(1Dg:5M.V9nG5S'paM8UW<I%W/3qP$3oWqI@YRURj?iF.,6:6t;05
%k%S*#RG9o+cEsUZ[[a'g<+n1=bSn9!oP-/*X.3+7m<=MTQfY)Ll^HD89*sEUGjIoB7N%/"='@jEbsi&cOl.)Z^\)apDSa\g+Z12Z
%B@AnY`Lp?tBiNZLl?2:5Y>WCX.7(/4VDM;2"g\#fCp0m-cD43:<ZD(]:'fO$QAl`/&nuHPVUUkU<>64q5c9<M6Rdo*W5HsLB-NL)
%'_i*c#THW8oST0SV7he-7+"8u:T>tTqAYr][&(447QQO\?IMMP[UqEsUl1B_g6.=O/-J4t3YW+irC]e_]dUQHPZN0Jg(%,bTb$K%
%;)St<fmD;VTTaI+6*]>$K/.^@XnP[/me!J.G@^BE*''AcksgR'7TZTJRZ4I9j(slSo4G+Z?TKjJIS-0:KurQ7O^)hs?6a)<OA8R^
%?Z6>Z>bgQ<"s^M,Ng*r8\oJ1u&N?O*+f1$lh4l#5adm(.K(4@)eJWbOfNpT&Fk\U3!A?0>#Q*8".(,XmdZYY2<SAcSE(Q'I)!t:'
%d3eKV*q'/Y<KJ3Q-,rVPB@<kWfpkJ=0r*O,.b,J\e-MG4,3R:cf4nj2<L<`:n&XprM&oUL3oK/^AhsrY9](fl/6HX:MJDK)U[.,M
%A[0\7Q>.1T+?K8]fpTtA]I-P*;M'ogn*9W](dOq*7iF3"5HnCh%+8&.b"eqJEB"VW1hdE/]@gl>OY0JD$X^CYmGRc^NXObj;-I^W
%)\J1nP#3pU$?7E<&;nV'G/)OB2@V^ZKRNtO_Gc3m8+`j'#C>i3:I9FH3L#$9:"L72LNRBQ%UqOi#O<rEiUL/&RIVk$'"$RgG.;3W
%Wl`rF;puG"C!RsAjbs.\/_,fES?A\?Re!<i>gQ6FIN??h5gX7Bd@AN&n$#eWkLc!00[b_K9kkloefbb6YL67VXR6m@A]a,uaG5PN
%G"d/+k+36`\+_9n<j`Bgi*H&^+o_UQe4qs))8O]`_a`(+MiR%L^YG)J>qLRr@IC@%P6/%8^pkJ?U:rYp<"RM-04BkGI+LOaRs^ic
%P^DdUbZ^PCNk:4>r05a?C3@dj6oDMj,>jU@FIX0MO/E(s9%%h68@]-"Ji4iU7KWNB+>fTHV3\3>%!"<]&6F4p'*ufZ1]qKYa-!K+
%a["nu,c`W!#'c1_D_RnX%CK\h;M>%G;*\)W-a>5=[A0/4`[8&-Qbhs&):BhU,UmLedFD<<)T<MifhClHl1Shld<Pr!m2KXe>-Td.
%:Fo23^7pn_<*AFabGpkk]W;p^kTjd:+8tJiOY-*%`an7i\s0&FgCsf+/"*Z7!"9S9Wmi:>UmH+!CGsn>^nZUaJ&!=U!nle7Vj"<k
%%?4XJUeSmF2?M97L6fWM"?Q'Y`L6VV%VU5196Bg>C=[hRA$$USRZ`NoU1PP6n,fJca@Rn6r"XL]2$f1&Q0'Jd<&:"Ld(GBF[A)Fs
%D=!148+$G,>Rk0b%"!E;d#ZIGUnq2GM_nU^"S?5,Hf9!<C4g>XfiFAe=b\V')@XU6Z6f>&7ZWIXq41##S_$C.bVmmm>nWRj8;YP7
%-.5g?@CDjjI3<j'@l?CWJabP2#i-CV._(Ba\u&a+e<Fghc7Rj6\@qZ3^ZG_tLESPgQ@CpBIX6F!GKd,n6D#Ste^Smb;+ji&a.J\"
%TXDU8CpY5u#83Ts3ji.lj-46&6=#[]k4hIDc0;sb^FRiPUJ'L6T0^/iWJY-TU8V*OGdq!aIRHOqY/nts<sufgCc%](\ZN\B2/Y0b
%'dkG,eH![H'7O?:"3GE9I2L<4R)5O+?0%.6"JStG+pl6#OFdEGk=#G[o7HIt\h4J+>>\3aj1c;VNqY/=>8$Q/7gu8!o+6B@Qq3c_
%U\cMYKG#lXO$F*G8G.2&TRrPTa[3F5!n9YtP?1b,\^Pe<d:)%fM$`Xj.g5NbIKceKP)qVfTUN-t0o2l0,+$?sMmu_kjBVKgTJg+B
%Wl2<AZQS1H$dJ.;Dq1%_?R>BA"*f]I/Je(3>Xe&a<4E7@2192h:2$dE%YCJSXJl.'MB_-7WCj2Z&-/K>>0\4IcDs74@.022WrV,-
%kr.ShFr`H;8J!i*>DUpB[FIJR4%n/4jU1qib/3O,I8_umCq\gcKUl;Y=Yh)<N2Ob7gI.Js0<jB@:R<,,h0?UNDQF/u[H/e4?ic&n
%);N$*KVjkIfQ]HJ8UGHX9tlK&1!ZU`pZ=K3XBS1l)1ClL3!;ifUSSdL`'%ncKF*3gFBn;gCJhd4(4uSln[uh;5)%AQG'_]!e'DeK
%Robd)UReaI>\(U::U6C!1<.:=:(qZ\h,[,+DeY\O0t"0-m$MA?\rVae-<d<7a("fiWRXoEd%s%r[;&!=luJ_94ba+1:Rdl.h53Le
%dF%nu^Q?'cS2]41/+%X9W'n[Eg;bLSI]>5h5Sg^k%-3S<qMZk)=LsZNm2)OrkQ1BKoiah*LIs*T\FKgM)$jH"?%7Z,YU)M*`;77'
%?ib\NBu)R&?%kp!?H"W+L?mU-9[g`8i8/QPV-8>#M;YV:LQ]3Dm61P9_9TAdQW;^?Ob-JO(U4srE3?k,ei8jAQ?';8@%cj=)f*"@
%;,!f)GV!5Z:Q<eN2Wn^+Bif5]eORSj>l0)R^&EKNJV^[69dt:%CQOil;`#pM<a0iN3jXD+Fl\-P_^ebUJ??O(N>s]Vj37k7`aO(S
%+QnHJQ\=VpP.5`UqHYQ<SdWuoVj5`^OV=(MM_A_<(U>mk<qmC>oO[h:>YRG#7)_2?NAd0HXWSNZJ[<meXPc7-r/2b!aE".Uf\T)F
%!m99jT4Dr^ct6'AaWL^'d+p/75cO1\*YjieCp=,s!1D"[;QHr*(\i^uBQ"n86:!5"oG3IUk^1KZQUX$0/(7h"W%E,`!m)^^ou:_+
%+1ZYHX,jQCZlh,`hX*7k4`&:CM%?:Y8'denYXKg;Ne"?mkSe@B6p/VXlpQ:cbH4<*qMCk:XU&&[dbuBJ#MmsSi&WHSbZLH]jJ%8m
%_RCQ<Dl"7a",fR3<WlAJoE86tJU9^fr\SF+X[\s=o@4UIY=M_\+DPqmJ\B-&Uac73EC3X9h/(TJ@$;)So*_"rh^W"EL':&IXTcTO
%&i$+C>1GPmO^@>WmALZla!IHOk\^Phf@38O?qN1HT<$=(1(_a;A@W(Y#@-CuPXS$3CS)YZ"l*?gr)8-r6L,Pc,jV(_CkZp?2b?:)
%F+<q>XmB2P\%pj8S$0c:LSqqZqj,:TY:,EKanbg!N3[*e'8k\C.=/-T?HKL%j,qr9<"MV8O@q82?HH1]25$9OHqGJ0/Z&0B.^*mL
%dY'hD>(e]T+#WJi"jBsNXm8(8r,u3EE>5<X_"/Uh?'!1[<2D'e&#J0h)XneJ9Tn.gro$GB%7P>Sc-R_Q1$7-GLDq4`j^A\HL[hpT
%Wht0\0&[F>(Qe&<7=DG_$.`,02r6.\Wp!_bcd,G<'S>pUo.B=<C+t.qJ/=RaSAF"KKRpg^L`M?9*D-s!B`R9MaYC:$[8U]WA>&WR
%PHn)'Cs\JpGTC?;K`O"O)jWhTZ#Jcg5$)cTkK#r6k<rkL5QkIdrc%<<E]r39B.f=)!Q/Ri&5Mk]J7qHCF.bN;RZc#bSK('39C!t@
%/6Q6Y2+:0O-"O0Nq>hKPVXeeKH./rLe2'Ful[b.^0=j'fIte&kE.'5BqsMpos/=o1gkLfo;kXE?3Cu7cl!(7l/cE[^JC4ESAe-He
%l_5G/Jtn-*;PRsM<ZL;b]('In54V3VX,?!do6oARf=mRT?gJnYn9K:5;*)eAcpEi/qXbF`$.tIS_Up;P(/\CQCZtg.3C#[rCP#9:
%\\$Di`(D,N\bbb]"CnQ(U/72R[H(%t[,3k*(gl=55=c(!TFqhUCs;!GL[9ImqC*M;Fk_G\).?..1W&lp2PDeDoi_*uf;R.ZOk^KW
%Q;k3>NRs!I!5irbhg1-P/W4FO'@3P_,StZVCY(\rFeg.,^&k%f3Nu=MIR<)QUd?o'3F!VBWR^16G.(^MT>SKsH:]h_\5>4pgbgjI
%&E;A%YA\`5HEf#EBBJ7'2d9L6+`XfS=YEA<l=R3sGVjcWOY'@)Dt%iJm];uGFN**?mc<9B6)PRu(]I-)07>?E:G4BH9M\.hAcNg*
%oWRouV$jHmW*f7$\<uZVTB0nSri$2?F(au"PM4:KaLbVKjr:7L\8urq@gOb'UA/BkgXZmW[BP42-?@m_<CK+_n^!ctV"fgrI`4O0
%heN#nk[tRDS)_u`gSg/`pa9%IF+.=t6[-!/SPoIWIe2IXD6j+FXI_4(V2aJ<O3aZuK5A-QITjiFIp%I\)sg1?DXVB"nbb+IPbc:/
%ltZ-^_*,V_jH;<q<Z]%h5@6?nP0*YaNmD8P%fUVMRmO*=s'k%5oNaTEkZ`MHeS`7=S^,Y^)M=TK^0c9#,^pt#3H!g5#/Gq&kihBn
%$Tqg/N12W\e*uEV%l[;<k0<9rq#0:n?p\$R1-.RSWIXSRWL,'fCcW1Ff3LA,fW3T.QPe^uD3H^84>\+Rh;$riH-;bK=16%cWKlko
%C4]$Y*5tseT=[4sie3:ECV9K$Mg:!uXRk30h-AnnZhq$eHaY@<*grKLo-q/SH'WiL?K1];VdkS&1Gf:d>;$rE9?4N0l.+r$4T"gh
%T3gcaQ)@]EXp`]5k(mL[Rl=2L^GqckqBC$kc4RFdn02\@I+pt%Q3O@9^"nKm.k.GJSuGpiRD"K:Le1UU2QPN]p@5uEk=fM=]shtr
%0.FBIAPrDPb7nhe2s7$^lt25_cDFc=i^CL_ft+`WR"Nko4L=cV9Q8mdpJ0Ak`TKn"-,Spb]#qj)?aC[!$85VO]t*Tl-?OdH$JaXl
%9YjROT'2to\aA(`#PbjaAEjO]"TtTV*E?D6>cM/#l-E$i-u2A(C'_?6h>(i8k=[W=DmCtEQkKkVl@",,-dEg2HRi=4dgHrRE34_4
%<c335qLFZN?[48.(#*KZr$MDFDDSH'4sY&B]kZAmD,q=Z<ilXA7)^+oGFdF1RoB&b^MGN?Xl]!]ghL+tY6c-h[>N:,c19YuE9,k]
%iT?RX1!<(i[Eb$%agopSd]m#Y9^2JT@+C.SL9*?p4+CGZB"_sX`pD"-?F\Uu)r"NNYK!d%C.2Y(ot-I<.m@6DF:9b9hJLh`X[&<)
%U4$]ne9gWA(tH4I5HaN<@Ikn^!jr@BRY@77orq<aXAs).b]LO5Q.1SCq+J2#Tc/0d<(jY8P<?##=_fC3c[43R-Ra0tML2HE1XXKW
%C-fhH@S3t,XS0B5o1RKu]6h"j=#SXU]_\(eSc-sJ9tAf3KoL%ma-8c+S@TniVY$=F(QJl1ghLCm9&m^neqKk4Go,'>eb!uc\<338
%0=/.U6[O4"beGDUb>;uSmARG!\6C[AHkVEA[6ca\@e%K3q+U*ln`rii<pT,gF1@k$;6A#iIGK8GOV2]hJm5A$iTm7tCW3$s<\^a7
%I8kTmHI_l-S2=$am^7LM]_rh2/#o@F<"6"?I)Mr<\r1>eg_E!\*jsi2bkZ^5aeREn[sY]4Q\&sW]6hYA)kOI/bK#HPY?L[gbD4%g
%8$/^.Xl@7Biam6.Gh]XWX4ZNcB<>7gkk_A^XUXE9FV@IPmbL%_QbQ>JQD:UjhH+?M4DT@JCG$YfC;n_:'n>%O*ZhV=H`\YG1[Sb8
%p9(fPj0,5L[EdPi/17erg82ES'!#d3oEEdVd`4Htgs4&9HD:\PY5N<sV]OU(e8'KS/E9nC>l[t(UQTq'ENPl77/(Lg?92@p;n>Cs
%lY8Z-SgWYr)FnF:lV>LRfA^e>60tRNgtc:VaMiF:Y+dW]GMc[fYR?=A9X/h>6FFi1L#W%&U)Zn`5cpk(XqaZHQ<`3=`3-IN\(T(^
%8$+T1#NqPKi3t?L&'8"cDJP]aGAF-XVQ[1ir)]iZqfQ=W)(Ih;Fs:'hM^ue8Hi!#P3mD70+2+<;[JcKc[!u7`g"KDoT!*bh?;NeW
%1<#7LWq!IOEY13b4*u0@J]g6&Is?-CnTe=<<qCcd1u3Pb8AM?X0GjJ4HI@09mesM?RE8Q,qiSm_T8P_uf?_d-'@3RkGEjsr\_S2`
%$%7)]qI(*5lJsqengWJfIX3kq3p6)kq)(bec)&54F2@b<Xa%>7rUg(8H=B$[6/"\*\FtCMiTWZ%Hj]KDes>&h")4iU)3_^?hi'd+
%GX'Ga"Mt!"nJ8>'+cSY\Z*s)rFD[_R<'6dJ0<F5'j(UsL8)!UjdFO4QT^!5Edi;;2[6JLiCc!DWc:gTJ_(_Xmg.NB%OB"e&>nBS?
%3W86t_7"&?ltr=1?J'WXEH"pFPn2#km?R6f3]=[uK<*hWSO@ZV?b65?Wa#0;!17%;VDZ4aSkV%"X%P.41IVlEgLiE1W6T@?S#7u8
%-UW%gdFYL'IM%)P]OEmZm%>;eSsD?.[hce\^@%\/"VKGJL0Lc&i7D)W>-T+/;/:1fW^3N/]iD>>esik7[=Zuak.PP!G*&8fm1gjE
%kfKcG[n5/^0tg!+.[9*e%%iCs;/:Sg@FhFn)'6j]0Iu:&[>N;O2JB\R.P0D&f/cinic[K0?88kt4DG%`&T!)<*jsj(4DRC!RG"-(
%H?L+Z"s11(\c@VBjAkN6<NE84g5p^[q9llUUhJBeC(<C426UK#(:CfCkT^+hU3rQ+!6KUm?H`231INTk_CX)c>Y]nE;SSuB&L5A;
%iG<(KYOgQ/2RAGU_`Rg,>H:3;T*G>I^@JPj]P5rLK];1/TR1;e<rlXHV3RS!3S#)L<s@Ym.,q6I1(*<]3/*t4o9r+p>;g6C'P+l]
%U.(sfD50XIL\+Ps!+ZSXq0D:AWu\=7le41M@e2iNH"cKg&$;)@'8RTu90CCOH1Wt0,&#ZSPm;`I/$RIWigtuoNc5H$7W0%)orlmj
%`N<:O2O->;D45$;0A':sF_=eZ\pm1fgBiH+m:c$r5N;>hl+19UhMrYOq$(u)T3M>CBQ_b:LZg7%$l<R3`Xn>aD&<k[?BI.,9+R.k
%)eocjB8YFt1@fYb1(:n0.0B03m^ud.6)10"Ke;/*G25uU8K]"$XiDkMaFSXMBm/iEeBr4Ho9bT."?cb!*)`a1F_fY_Ko20118TMX
%Jrh3tZ`;_uBXZQJ6VIQZnHDWilUP:o);Y2.ld"WlHA`p2O&f!I\ZR5lm.jK=mX)LjmW.*J4Z*J99BTb?DOp*+c[a;XYC/G%l(#ad
%9+.,RXHkh6kKRbrA2_2Om=&Bg8\g&BMdHiH8!e$*!Hj`j`CH*'acA?#?U.t2`dH62ljlPIOe'#hNuJ=5XGL0UEnKRC>Z<)Bc(fs>
%Hd)ZR%P;mo3UfiIFAPen2`(aA8i+(0Fp9KXeGq8j6R35YJ5rc8c[^klm+NrgdcDWY=L$8.6."!.b"V<'c>01Ips&[AUspb&Xg,\G
%Fr7c:Om$RbQ!\R.>A<5UoB^)K=]sFb<&4Si5/X,ZOLATN%FWO<;FoE5>m1h)YOAd?\aLhg-,J(T4]P)N[.][NqTi+TK8^1*o,i9r
%dhJh%7Bc8^Wcjq2],tD'j@!gcXgp>_T(/74GKf2G[0\:.hQuCeR4/IE-5/Lrreb$d76m)eaik8TL5n\U%:>I,O\s&nV?U`]mdSR9
%rXD5$NY'R)OWoc**R_H[,)mZWC&1N*PM9ieFo/Pde/+sU^X8bfFHGY/jf[pP6GuUMoos1Hm:g>&gRUL"p?W"\;!clkSdT7-j-<no
%9$:LakD)>7C<hF+3?EL85Cs_TWa&@=&ng(7W<D]I<D.-T+BCK()roA0!"O1Z`)Z,V`]1?NJQbCEXKbY??p@7>h-H@-CCg<T.HgqN
%SN=`n\:cR#+Le*L'q"qP:UKl1o@0V586rQAomd$o^@-F&i9gfZ_'fd5U>F[LIX'08DH=)fRlj,jjVOR("e\*`bg^O)^e;#Emm\*_
%dmJT]o))$#S"UB(=FUgPUn,HiU$;%+V831ZBFD5bSR`cXIp@cuI!D%H^]Ifb'58@+KB#UtTEmYOe)6.Ag"e(Y38M<W[`ok8*6c^S
%A_Oh*1G6HZV)_I\&+%M(JCB(A>DpdP2?tBWK["MpFQC"p%/LsSXqSY;JR-#4XE-_XlC=D.]mLu@/TK(c^5`c*2\*-+%siE*F.b-s
%Idg+of%mOmlQeO,lbjK4,+SjaE:^RT]qo\7q"o6=Aci>0EUUCD"e/0%Y%B'Xea3!BN&4G]%]mK6c/uJg<b@!Z-CD0oT7*$5!p<"a
%'68Heb9DYPf1ep+n(cV&pnn!-c\f*jmP.:#A*-p_Ief-'B58]uO>]q%S9(?i.+$am*c=glWbM?6g`W<k&<eC;Bg0$5<c^M"c$Z)c
%4\MR4U@g-c:rjI?ShKgMl<k/*,*BMn+Baf?:6^,Kp^9FBkmr>KlVR*\KpNQ@g[#D'Ts)WA/o`j?%PJKLQj,\S3S,5;:c-pj%M0p:
%\j8'GL,;._YB+)"r=bliYnCLue=l!aGI5i!V@3/YeBs.ne=h_nHZ=NFEk&MrD`mr.#T>Lfkm(/@GBl2^C36TmH=F59El4d/fT<\D
%YB7BUqP>.dF-1>UV1h`!&<Ag&!r\sbqpK]&02Q.tkm!djHT7sB"D^g>g?J8!$Inaf0[brB!\ejDODY=r^N=OnZp6mMV44;H3<0LA
%h%18f\llaBEp;_E[1ME%+4phCcd(+-+"a\-]C+)o=m"Je9#%reI7^].9,l9dHda%UfJ^V[?rR6H,ji_W!p*[2onjOk(:jbi:FgG/
%csAZN/q3caD&H2koqe@&Muo*s"4duO(H0*[6:OtbqJ7i..a'oX3USUrjC5Bd^@$XicL81#Lei*;O'dD/c]<#u[-d6h'I&s2(tL+Z
%K0[!8"W<$do4)`i#!&dhc&^:HF\jt?k*t\;;/#t`E\<R9!7MhfjJVrT:MTrD#jn7;@SDg]d<64Sm+T5+jQO-J7.T@Q`Vepa3BC1J
%^FdE0k/V8k:aaT2O\h]#WmCT67X7kp#M7&'[qB'0,hkd4eDa.ThaSZ%Xa9<%(6_*C'RUD;SgcYJS&oO8#CuO-m=5]l`312OmR15,
%"14e#WP_aRS?%PT0h'm<k8bcA:U<3X=[(PUYS-5kVQ(ZW1o42Nm>T%XN6G$uhkd"V3hkX9LS`_pE?"U-RI5Xs,ak-!L@t\U_3TRU
%)n+"?4rf\@V:qX66Q;eWX7;!g6j&mNMY+m74S0*tTYU>JDJ`qC^=_CXP:'LHEAiAqVK&ic*b[5;;soBq/T3<8Gk[RTgm0S9:sDb0
%Rl`1$&"AhmdeWf^q&Il;i9>Xg\U=6_naPdjrjdDT38\c[l$WK@HrKag`PL%!r,_\,RaIr&q<.<Coqa8NR*OlebD/LK8CI>3F8;^0
%;\o[3kO[$]Z\Kh8Oj<-^bNDuhe?9'Ik6kVj*'Tq>&HLWOKq"5!bLt-`Y]3>dI,9-V2mHXYRiKm\@'beMjo&,HAo5CKeb0>CfK*=%
%N$e&Fbs<>..LuWki7%bn_e6RJW)-LfO(37*b%l\OV7>2+s8JrCBF\<3@(GB$.3+)BJtfob*`?OMpa,IXp/(KK(&AnU+V=*UP?S$\
%@pt'0nH"Y&J%c5Q^ZVFk]+St1BJ0ACG@p)mob0M'*HK^scs]6oTrHMJ$[efcn8^HTkAD]RR0#DSeV"8anOgD$#UD)*/d'SjJiq:7
%%UtZG2md5`B!q#E&^]RXHaU`J8oZ0@Jp/INL!=*<n6.`7>FT4JQ%D\R.R?pP=N57('KY7k[u!$-Q&s@!H*:69LS+!&j_,l<%`"E,
%U]HIMc+X`:&<;656GK>HdHDFoYA:'6-N.X%o?ggm1!^H'$Hss+n#e@;SAf"0OpT4E5nk<8aH<gL;`Z/l6_lc;2U-QVaVm@`(j\X-
%42%57qaUdJ+nBqSq.A\d1MV?i5:8tQ3^Z1(hl+?nP\WB<K''gF6^WV%.;!Zmo?GnoNAR8mPQ?m.ODa$gl0oL5[si!&`4#</h"=#o
%Q-u5<\m%S.\07P/g"lg#:u7cGJD8d]GM@8t',&=L22f3NA9I>:a.-XbF^TQ8cefd#QQl>IYC"R&:iD\N(BBf+"J=ZH9MZ&;nA1l1
%X;#tX9?/E8h6,tOEuN3.UQ>Pn(ni_Ur0E0Z$%'M[S_&J5diMuE5`T3Ke1b1Z9Y^%+p!Oo8l`X`Ck8FLQ*s=k7Ud,)/lIc>;T4Vg&
%C"q%0pDb8M:V6)@41U$odmEU(4pCC:eo*ZJeQl;t#$"\.Rh=RC!]oiBhWQ+-eBJ?`]eS8PG7a)b$K\tkBiEn!0LMLjb'W/[7bPI6
%r*8A1@JAUuK_!tnR@@s'k+9g+lem"N+:XA4&qn>G?p?;@H9!AdK]^k<`;r%jfUf8O6[N`J5+J[/_@3rMc\EIXHSabSP"#1c_g66?
%U7g=hj6!eF_MoB^3sZ#*GQcD6pa6?$apu;%=Zc"3;e*9ijo`JBBG>1-nRb:Q+o.Na2M-nOo!3#aT82:sbaP?Z^-mb&L\$B1e=;Vb
%KY$kgROT/KT1WsOb%T_4@upRdr;$J:h,TKN'YgjQo.FVh_@9KH943,P_G5uKTIFC4UFlq[AVtm@l.4U&1\7IFp)P,MAtH^Tj\3r=
%F_9J1PVu'ESng#2b,H=sB&6A#Yk4?/L(<SQBG?k[fI._.QF_QXSjRUG5oV^<cd:.>o0`f+bk$_)+)tnaMnpGO2E3s6hGeIR5Lm>A
%^2GsmJb.HI#eb=pSL=k`<2#WpQE`T;'Y%+UQ$_Bo@Lu*]"6p^5-qLlhG5D^Wa?L3Z>$_XB1rL.0VL='s;(`+Ym]VN>r+sS:jk'nk
%I#.Gi]:U2(St-a)_\22.0hdgbYpSj)p6VN\KuTd)25B0O9=Ia]d&K.Dq1-Jn9iX\>qs*\KLnH_pE?Gor!u*(8dq`.)J;2mC"%/dO
%g!D2I)DnW$>gEj8HlUju0)HZa9XDV:21*KNUU"Nqm+3>S8WmXt!k*KM:Qf:%S>PDt&4s1oN'M0W:AH3X8i&4kerRQQEAaaAfrIsr
%a^0rV8bQmE8[;E8)dSXs+[m`KIF&rQ?/%[g>iM+H;b7u,kd&Snap>WKT@'T)HUjQiVtXfL@p0gO;Von']3Pr/PW*0Fn*(0r<(VA(
%Y;=hR+#5:kh=_h6;P'rd@J!-:qWqot)M=7EkVPbELLa'>+NHFrme97Z%bUa:*blF[XZ#+'E3<[Qcpi-6#"kXX)`!FCZcU6dFK87Q
%EZ'QA"DhW0\Hamp)MPI?IAXi"Es6:l5o,J'M_O+m()s#ioN\A!*sDOUA?PM\*G^)&9Wqbd'W5GDra@j2O=?oFi:H0tApX.Gq`4N,
%R9ll3&#ND9B6j-'c5b*QR7"RDBX*"d;.h_.d)[m*Yk'?d^U>[B@>8"0\0o(/bUiN0TbibM,)C(BE%;m_dhe'KPI%S3mH0s@g>/l<
%Z<q7Ao\D1Rn+!pS=mH-9:oS`j>+`)Jq`0kWEb1tG8(uecZYW3(B-,dXO1A>uYC4NA_U=EVXaoJ,mpnY[P[TS8C=UTY4F?02]Fs.M
%PPmOoGHJKXh_)$7Vu"^gPbY3jYB('2I^L4LHIduKVK9""mFg=[Sbq'MD.r$i;*VeC#@f34>CZ;sVb$oakX4gH'aQQTqr=ApI1fXW
%I+G:Cg4L4g5(1[:ZrCNE.,)EtA#\X>>*N6=mo81^E-C?oAX2M_&9Q2`rtJ6)Ci"qjVi)k,Q%P][L/m:g&RF887<\&X3211&a6U8b
%`oLmaLlU*AE]I?B@(0Em4q]Xoc3BgR\*Rgn\\ns^S:ro-PP%&5[4PCL3e)-4n3!-<*kK?YUBBl\:KO3-;o6'l4YYkE+uZFrAj,Vt
%)4(VDF%OYR#=k06kA2@5<tFc+ktCAaZP#sL@s!QUDZ2A[5A`66I;Z3&1B;$/M1'8=-%1o;_^G/gAbFaOAi,?m+l(nk,ked!@YoWY
%;'kqHAb?3p64T12kI/[2]=US$f]QjP4(cf9,k_iF11dKO.dh84I;W29Sf'&2-h^]O[r)/P;()(JNA0<-(fb%;>?5,2;T-q=I;W29
%R]mZD@\;BlC4%hc`4d>tC.*o,DP4WYM[*#DEs"97HieBA`4jVB/PoRYKs\Z/qn/"Kil"$iXM-.K9J>\L4uX@YH_<irf]SRNkFA><
%OP&`[YqjJ?5.;4_d_m/'@UIK*\g'i6EuQDu\K+g^+0FojA7D1g6N.6(qqThpR&#?Iqs:('L)M@:LUK]jEqc,>ghnA)LYQsngPc3l
%Xm$D&a#!UmkY1+J;E4q@`Qq6fnl7[S42oN=jTmufNtt`RSo#ZQUM*I=XDPJqJRcYdUP!2oO%)C(9VGjV5R?qf[u#j?ai#%2Ad)lP
%!GsTG%5a!3Z%LbP."%j+2Pg8XRnT;WVoaTi])pSIl.fmg*WB[oc2[^V0`&BHiI;?5;1"a!*rb?]j`$ai2dd,m`QLWe6\d]"cS$?n
%3ra,S<%75(^Yt`F</:KJIA2U:)><Pa/)!aJan>SHTd**MFmu`d_(YjXXF9X4R>&oUi3t@;'FD<FFkhC^mB^HDEL>$'q*dN$aQ^%3
%jb$!G_naH(Nu`14kj)G%*:VTER]P;DJFp@tT#$D[K%)W8!$sd_3,^>rV+I[<3m?h;mI[n7s,PRQHmi(DKDWN>`1Oc(1=QZ(N@NHC
%oT_>ab!3p7WmI9+)+81a/SB1H8LL^<Ot80q%>_j@4U$[;8jKEZ2MZB=jL#(J_IVAI#*'j'EB;K=RI.W957q4oO)fS7J4>so1A-JJ
%iT6S-Y`Y-;*Llc-W@r3i7g0LEVJcfq\^e'h)S!KC^IUoY/DRp\Cqr,?@LUJ)!PJsOkHRCL3eNdiE6$7^GK;?.iD%U7SHhs/%&%2+
%KTBGu@\"?')9"K<(f89f$J1@O%*8CGYlR`NQF#n*-XR!f;$?AuJ#EQD$I#u3ll/QG$p+-$MD!e-fQ7(iS6:)9*#/8)^O]DXE9I4G
%X6TQ/J&AS>V31F6$:$m+9iJD(#S*3L1h@[Mkfo1+TDRe(Ca`*XVEah$&^Eb3m46GO;/G5(.+>=gQgK-RPoi*F%%cj5j_oKAd@QBs
%ouAajCDktp[/M!`6+/F3EH?S_NTedjL%]idHdsu=_e8iJ'`Yl6_I_W";ZscM[IoV%4TL3lQ`?eRo-<#uG(]%.kb)1\`Q^Kj1[8Ze
%W>sC@>*O&[G`"nhMV:!I"7Mh:T`nZpVCiEji)`l-s0fD?duLfrBP^H]c-'3+gXANG?&)%J190k]f'qi,OCludQb0tg3V.-Zq`#+^
%0i$s<#`^P+p;S]KQ7tG<k2#1&?i1"JM%q+BCqT@WSY7/.mAd"0eIf/@KuQTUg"a(`h7B^Xd2a?#HPiX[(),o%^6'CiBdUr^,4F+2
%k#!\u@E1Md7Fs4j[aas?kB.Of%&+HRo(6[nIQkGmSkYr[;a&IrF%'UPf.SS$,2-"&aOV6C-nB^]$Df@m9Llc,`(Q^L(_W\=_uCM8
%PVtPnfoDqf<p.b7C^.L78+*G80mjKdcWZ`7/pZGW.o`:7s4?8^.paZU%mIDh:5du:md@)6Unc,$&ifb5g&('",Nk8YQi=:37au28
%a<@A<Us&GnKi^m>pq47\[G:Ju#P?;.":RLLp1_d>Lj6\tQ2[/@SUX49<kW75ghNCsM>nF7baMa[osE;JK3?N(Vn^M(0>'!OMJKW^
%)eXBh(E>f#GVk0@a&b`&BWk0.%]\ch:M+/VO>A8RdhLon?KGaiE4+m4h5?AR9FS,.7NI\lT7(j&jtclq%rlP:ZDS)6NYSBSL[-Y7
%]!Xmp,C/GoOdj8A7;"Tpe*03WM)iRZRD)AUSR3*]E6D/d`hN'H+X!)9f'`a?3ctmNEt>eQ7Fbl*JJIhAET$u.I.GWb!n60r:t>EB
%Ih/NRL/>1H7r0SB%rI%+C0!GZin`@"$R;'[CcW@Bn]])L`[qVC'OhmHEOZLhFgHsL\9*NZjIREDDu+(R0E5VacYYD$05Sf2'Wd)L
%BGSF^[$9Gc$H"cpF2".4d/)4/<nkO%_$kf3b*A`)-Or7Pd+op@MGCaI`.<*`Fj-G-Ro/Q;M*RI`?uA.Ig4RVo"$6>R].5mN[,%(_
%WJ$6fF57e#-!_G6Nfi$6!D<C`%a5=D0IXJKr(jI-d(&o<CN_6,&IJ,9\"+\4CBV"iG%pCYNTkVl+G-/T*mVS8g8=`@:E(J]b#>:G
%(*ma4.R(D+h<b<J=cPsO[l;JWrWD^(I?P<,./"IMc7Nl:,]Xc/FfO4pO&R80MO8E2Qg_*0:P'W;@FFeZOqN'HBK,pgSqf^;:c;01
%U]miML?YQfh+!&Sfi))@f[astB\o2Q7nOu-`N/OR^aY,Iq2#%:)46RXRu_58j:@Q>(t&pXBM,"%@6d#N)%o/98g8+9,0IY<+si@0
%+*$Sp:aq7..+K[/JQ!1qo+CjNl#8).5$FcV&tXSFU>DF>ISh(c39<9ri6NBDkTK)>jKX7H/$p6:J*aC+GIQDL%kG"tg)iJZ&0ic1
%kh>FUOWRWfmC!tu@>4+e.jI9[OGpjPK811:3VHJICR1#fXYhJN=0&#*4S1l*E;4*.rP1f#KT%@k?*/\h4:JKqeM%4L>+HVOY#_,!
%*r<L1qK1pe%m9JKmEj+G1=1T-rpDY)(&%,%*r;LP84Cm)JW[[E*Khq,KD:#B!tU/^-lYTKjHQ642PO_1YL=!+&B/&g4:L99*9+b$
%qnUZ%8J1g7_Z>?t#<D;#/NJt<g+M`CLOfRkRKF*!B0Jsa)tLd3Re4*%*-c.mOh%*-fXF=(k^eKk:td#s*kEXfN[,k,Ic-naPc<S^
%$AUe:f0#sM'F,]UVr_-@?:,cYkT<;Rjh>S,p]D'*D)msHm_KAqFD#INZpW7c)!\n(Ir#`*P/A;bkTAf$pY#>>>kf@b(b.[d<%/X/
%dgj(!cB&8P%OD;B%m9L/g0?A4)&eV:IO!E!d?"SSL,c)Mpll/sn$GIF9&Yj:*r;LPW(V^#%m9LY.A/PMOW8W07J#5IL\?gl_>3WL
%J*krqV@@M&@ApD`_%/XR6alkf4*4FXpjn2&RCM2d4S4A[R#ti]UH@tla'D0Y2u\\!`IWdf2ZXih^dEUXgCcD3*dD@qOh%?ufM#OR
%?ae^?L]5GW(=tQu!tY?+3um*=W#p7DJm;QL!tVAOEJHdJd"(,I)B:B(bN6N,\l=*%YPJ5(*r;f"C[UU&*-g[%RHpakHHNV!#9N`6
%G"=7H%s?g(^NK!"2W50/oKV_^(gj0]Bp8Xb6QUL9Q?_MT+Z\b;LTYJLD0/kR_]T1*p1oWJBnr;Z['0cV\dU27'X0f='F,]U-g<\b
%["/`MFA%Lt][$LOa:JRt;Pa5NikRq]PmK5(Ei9'N9h'7gmEdYl1[K[JIUkaU<.,:tmGD;3&,2[.'@&HF2T&'VdHU-+1G0a-4$Se1
%:V=I1la5hPQ5i34H.(gID8']t!(`A26^BSaXWq8r6B#NYSLPCU*<n%:_V7`(VAFQtX5)5^gafl,+r*,AWgd72lf.mj3^)@m$.FfJ
%9PJfU.=[cJf#gK5lclimb1<GIo*?s45;+e2j#55J1;t92FFV'Gm&p'-R);nkN]FbaXYE>hSN'PS?PJoKANRq;I';+hbJi$gF*Yk+
%?nU1=F3N0X[D:Ri]R4>Z]CB[6Z6*j:hj2UNR;X#T-jrgNO(4)_-[VIb43GFSg0<n"F_9C=a#JR9mcg^J:Whp&EcLs>+udiEU=,c`
%3dZ.!^,=M?';Yk-W#RI>/$Gd^c4=ZpQ1NGgimsG*3OrTG,sjJIHh,ct/9SJl*JS.%KG*c`dq[o,0n7V23lAsfMZ=mk?'cJSbk+M+
%pgQ<-o<<k.='XG2Lom@bbme"s,LGTWk1`c*Mgo)8enY?"bA;)OV=U`#ZTG4XWh&c^*Tsk78[?4]q9!:nL/7-*d4uu*`U=,@o2Sp`
%pLYH"]Z)N=)f9H#k6Z>`?9uqD["fO2IH-'@jnhpd*?KO/SM.R#FEK_eNCboSn+Qg1XeR[B:T%]ZKa3:A/T_io=*2l(#.;a>r<m4.
%]\M=7iuuU[.YjS]kGtY=Q,;g6Y8#gIhZkt1okUP4FS?Z_qaNtga;bgN@$cA4NG59?QM@k?IO90I/FG*Y=85=DX\u?ZHq3C6TtP"h
%*>rJZ<V1?4s-\qgdEf>uAn%T]H+f!%o9J4ID!1?u.D[cr/Kn:IE_!(IT9lX&@WaBRQ$1^hVcEA*L$6G>iC_@B&0i8ZUh'(J<T-*b
%4AT+T_@tKeN2Akb2jqVPk-B-!?-]eBHMQCp.e,cmbAS:0p>[Q&EuE@!FTp`>$,l*&*]uDlnP=W2@N']em\'1&9GeL,8]'j-`q_Bo
%Ods>-K;;ood7kP3kX:+K-OI.EhC9#UKV'%tmP7"nH0rJp4$IX`Ic98Ao9GTCfo9.:2mY#26i<3@g`4>X>/(s*Him%iDe"KS['?k/
%e69L5D%q]mehj'no%iUbUmK2B2-EQa5i'f0<dlkJ0g'>nCSkLT><7:LdU+coh9sTCHsYI/le/_nYA;]3R<-XlI;Z#eR4ZurIUo+-
%,a_l(TUKaf+11<)%&%>Ln="+.c\mI]O:ORY)7Fk$^B@V^X>]MpWXmlcAtO_GW_0pD<>R=tI=,DI0ZY)3bi%Z,6@\akN\R[X=HWfe
%TV<HEkq.4\o>H9:Btg=HkI73.o6P=]?B]WriH&]s]e2N#4m&B#V3>.?4e!c$$=_1-4ZuR+P4b[I-Oc%;PNZ>nc!"mD]lY>5G*h$A
%_Ni%X=*;e<#9r1:HJ&0K(ofXM,-cJt>$fod:L1tPN_82hjth8UjqfM<'Q^Lj,/ST\-Zu<!AnD?\_QH$%2G`q1gQ"@#,M0paL$6tT
%D%rf.+pcTQ)W!qlDgHP?qqOVrcB10[JgNmnESJ-_@L3@bPDs&.1W3G,XV[+KTMX#T0We(RKWcd:H^1a"TLa1!fQ6l#]V8!]]d591
%qJl$1b1t[&Y8\dJJ1kr$44EqKoTB&V`R[2Ni#DQM`cX5C3@l)LCFaW>!h!(OnF/\oJ3Enu+9D-$!iehC@+e.(RA5)3Zbk;U$?8k1
%fnW.>/!!7`MKHn*>]ZcBZ:(eFS'Rc(V(VN5hd3U2;QT>i/Kk0U6Go,kqF\(4,'P]7Bc+CY'6s7RRk*.I-NPCX33N58S(gLK%Q5"*
%TU[^I9Nr]0q!J<@#6V\@>/?(>Th>$(?AP@]S;I!-[-!5V,,iIn?$$_S(Y]]=87UU>0g`QWW22]lROGm/h2QSO!6AR:K-;f7`eD+m
%.oW'Y'gSs%Q:^0Vl^AbIbm/cA;D+EKi@U<^gHf732ch[5e.s%)\/7[f6,6l$f=S+u3p1Sc!9CkGN^Z`#[P!G>4%A;>Kur/\GPT.d
%GGAU\pS>46cY[KG_fUeCcbdEQEG\>[;#7Q*`n+SDQpdo/N?2>?3`c90(n*G%>s`iU5$ZjN3JN4[:O'[pEDuC[V<IVYe#*)%9A2Ap
%WKS-H:C42E>1t%]M'keei^BBce\N4%4sEW8d]TL56rD^f6-\6@@8rX6U3m-1&U(SEOL>bU2NdKZOYC?_s+/I#2t:i[iW34Nio)3>
%eqUX-D20L#0Y]@@bs6lBY`OD0B@0,FEOZM8TZJ8dgM8GoN!Db5Ft2%;iJCa_"4&hR5_0/fH3`SahR#][dmE58JV"^m60"n.9]EUZ
%cR'_,mc-+\0+9t]A"LVh1tErTO__$;2//<;#6UdqZ2nGHMF;bG?Bb)"7o1G]U8nt.$kq557Qqk4Xs4`u$'RLW)\Jn)0@Q*X']&tK
%gjM_KOe6!#KgCPiIEr[]Y,8:!jm=(N2NB@+r*>L\P;(^9-En(-2PD%%4(<:./;DQ?g"jiRR(MB0hl6MaU>0YSa-'c3oUWD4bmVRG
%DiSl@L8?^Y\nFW,3u$\lOo*$+1Gkp[5"CC*1o@Yp?4`;#%Tc[_!$nDoO[6kJlc;FC*&_(ND=qU!1!GHX]8&1;^,;!a6\[7QMs*e.
%7bFRqG5!/o3n/t9l5=Z4;kP%Ddb8QA%8,MI6l4F"L[)reXMf?YN`lEV?q9pRL[6^S5h54<T5amq[(;N19c/4D2h&"t1nsh#+##!S
%PI)DeW_Y,q__n0J1Q.#,OkO%i2PfPICU)-/ONQTF0@c52CQ]a#fk]@>gZ6\oP9'5WQ]%r9"DYDi3C<CDRZ"A35@_Pkq(oRi62oZr
%fd)(8Q+"c+?OjP^I)@PlT'_UCC=cVZBCd:%N>s8gZ;I\+)a5Ul^L%W]gFJQT6;Q;ubhjLQAp"W@\.^*82IF9)Y'78GLun!Tm#(51
%Qj!SApBiteU4ao"poq3#>H9,l9D@IO^VmY)?@<Q8%5c]&IHNVfS%+p_bAUb3B\ia,:Bjm6OUbP?/E*3TBKHS!>[,Uh#1tF.mF?[B
%G@^&C>dV^11ke+Z25Y:KCAC>eH8N3FpdWl$#p0/pLTMT?$$oBnYI7&CiW8UV5rH/IU_>nZ's[s[5_24mj5X_AhF4ed'L#hL+$9jP
%o0F?8Kh,B&H=Y/<P'i'KO'1:cY^M7TINa8p4@#pu(Z!sKS@PMd<i\`J2Pe-&Lc<$nY]C#r4S%?V@54V;QbH^4\30JlC2VV9MQ/N8
%;)R@+o,-_Pgtl1(eZAAskM<IL1]FbO4fpjg(-_1_QS$McG!"oM.=$99_7Von-&;8(K,17%4<8,oOC&JV9oqB?HTEPChVY3&ZK9qJ
%UNg!-7;I85X@Y)&\GP.#N^!:u&%q.`'l;0BY-=HPIIpSqN'jc;-'&2k<PhjN\,tU=HXpSmZ%coY$84Rmk__=&":[V9r=uG(h.lFU
%23f($rEF?Fig)=&#b'efE=WMR3O_-HT^X^L\66S)7W31.RdJ9Lc(u#!Em=0&EAb)pYd;V[cE30<V!+ipDP2-oqU4!6oe;7TnNLj@
%atG<:+M?RKf?G%N]%h(cVZ5SqU.7u\\gLT317Rm3o^22r?W]lQPtK#jbI$6`I2*X1\sC94`KUG5fG?L:FcO/=;u,>%e>F"QAg=9S
%L5dJ(H;.O*;&`;j<Wpp<or1`DlorU![-C7TQ0!)_T5Hrooj6`\2mO2jABXfIrNo[gCJ%lmBF2K6[hRffdATV1Z1D;IG>2N\*](D]
%Ha@@S;W3bKflF[d(Ye+;OD>nOeB$T4O*3CpRpP2Kjltu8B,1BXdJQ9I+k#.fM;?G.F3J-*)XVmO-J?)'N<?@`!G>&u)XkZsnU$a=
%:#HF3#Ad)[bNrlk[PI\^1)eQ3GD8p*/,r)+^_F>W,1\$JP4SKUiO1"=(M<!H@fCiNloKE^YKuP\\f1l9M,&K4PaQq[/RIi6&*p][
%Xf^FAjn76l??3WgK&!ALGnO[i?;fF'#KD-F,hGo:>"5kE1@SBZ1Y&KK=##W-,qXa<FTrWAMoHJN`No\Z#[E@V>1U%gN?,r39o/kP
%kmk3obf>]%9*pg@)05+en[W+(pIjQL@i8A2U-Vh#M$JT8"fc/?`I_-k5cX5`M?U+_Tcn8\`I_-kcpO'f#1>l>5T9;,M?U+_JWVk#
%@R7%p+9c9]`I_-k^qCUjZ(TVs83J?%@c8CL@k9EU\XSkY@Co\.^#UZnG%u#66/dLV<URmRLsG,!8k'LQ$mF?]L'L3R@'#oj^k9o!
%;J,?u%VFJ^hU[auf0d`oe)sUbEol4ZQXA*KNQ%`^")Lc8(e$',+Sq*C1a@Ac5qlp'MQTd+keudZn?pqmMU&MXJKl!0%t4)d0Z+iq
%,=grL8;9df:fL=3g61RX`S-ku3$jr/?X62&4[\cui?E#<>XWC%PHJ$I+Q&foES,(d[$qBmY%a>#Ci9:+'TPhR7Po+nHT2]%$F.2X
%cqJU`/@A!W8U!f^/J:OZ8Tt[YN*-%;KZ>gB9@Dn[1LZ+]CSr$m[nk3[#\]:Y>p*Vq0erC`Zl!3_piM2.]=\leX9Ir:^9<o>H&Oj1
%->\U=iZ<-5Ik_^9eWp,6f^1Ep@/oP-guaR2cBGAgb&Ym7n%E[C0V0R,N,Q6/a+?$Egc-aoXZ1*)A/Ie^#%MR[cW]F"B[M"Sa5[0\
%G0HX9rF#8!pK#X@gq8t-n%mYXQ;M0_'M[!oh(mCQXi"%U>6%p%>5c@u9Nq\6GH?CZX2-_YX20&,qQR#MG'>Z)gQ6G5fOZLVR6\W[
%b#]#tXKf36d&$YWrP?9:gihJl2rTO%2)s)`0WkWKA2q(l:^[@PC=Nj^\@7QMWq!toHtBf6nXU^j!aa+hBJnF5e#&!S0Ia+7`_G2R
%PT_JR4.]5dKGN5Q3lXHI;N*e1!fr<S7^Y$_8"P'f`H_Q"oHSDQeJ[R96/#8GI?_08.j"%CMp522itc3VCeq>]bB!fFmJIL6#"+dg
%DM0Muc#E]b;g$*1EV!q]@.oUuC1LU/?VN;i+\(@<7LQ,2)_j1GQ!;.)RbSo9Uh@.s4ZoQH[YC]e)eBjP$im<-)Z\A,)_u=03q>B]
%2@3!&km]Qq2\g8F`@;*%N9ZI4)PMF?AQOQ5O3#SP/+6\aV8mfUG3!4*qS$\:0[b^@M!F%52[7[+J6+gY1W)*0G'90\P3+f4/Jurp
%Qd94U7^YiO-!6A<UE*A17h@EW)Y$MJPs]ZA,,>"_)-V,_>JU>Z^@P7qLQg3CF_F#1XS/O5T=*>igWtRV,92%`W[XBE`b%nQUW$DL
%&h2nK9dA!KiH-Vp,A86rO86<M:IAh<>$fE]dZFdmR@]#]%7cSTih)fO/Ehf1:pJ5Tg=9)Al.BXbP]1nb*AW:*DI6_c[N&F-f\X+l
%WWqX_&@I-"DP7hYK564Ok5O!r@?C4m78G,4Q5?VBM:;A0:-6i>92>4kKI,GYf'U]1_ml#&ZFG/hlu@?k+Obq]bN/0a>(b":T=<gk
%2fgUcUq<IAp@2h!OEi`C-ZQVs!foGK,0@[3/7a#3DU&l4n?A6h:llKP"YtA.\X(QJ/?F?E5Gp]SZfg#mQ'TOT]3B_<(;`pJK'=IA
%k:MH:3QTag<?bj?$cfEABjQ40cHVMq--]\0q(%!g13P]%9&js$r#Tmlh;B#)I&2mBoh!Yr;m^N1Q]!iW_h3Z*9/#90k&Ogfb\_Zg
%3$KdtGC-S(eJQW("OihhR_>]kgD;0#hB+3d#]2YuIHfEM;q=]fLDqL9G4-'rlNf)g/o+P-Y6QT3(")U?'9DTj?_aAVakPF\B&RaD
%K@UKU2R]dm/J2Pe]GEl<I*i]pq1Zid!qq0^fr'.F<d9+gSlH?IV&8']3+\m>KlJPrpEuCB3fH]d]K]9bfn=GrqY1`1BXr4*8]lII
%XV=u^E^:CWcblljh!MLh&[@L_T,Oh!l*h(GAKu#E_110_.MH7$FG(;rp`ZBDLXiA"d9JU0H2$[dijc3,3CM&)Pse[?()jSu6YT-W
%n&QE]GC=RXZ!W<g7;OWY8#"?cV?1\Odj;XN>=%YYT_bunT:!^m0D#^?5Z'[l[uG9U,\,iu1bT2`KSd%W<0C%OM_pdG5Qg$TbGUL)
%>]=L+ae[l^K\n6B83Fk&"I=sN9*c$m)$bZC^X94e\G?^0IRR?cEYQ'rB-R!tG^'E-ZRI4691$[+V`lDdlU1W>eZQ;H[NBgpa/MiN
%T#`'n6k[O4pIq_=C0duX#RPh&6kX.<e;Qel`nD=nl:S1VVS'@'=4EP;Sk8TEYHt[WkicS&M4C<MP\qtYQX>`4XI"k5[sgro7XZ_K
%\7dbHJpFo-2HilteXZYWb>oq=0:s],<ZN5pYB0R+HmGuSlLktLD`,*8WVNA<eQ&U!*Nh#<.1Gp%8nZQO6:!I).Pb>lY8[*%o.ZrU
%%J)>>*-stN!a3!`m50`R4C"!T&kl>EN.O1P?grBOhXH)K[3mo)T"C[E^]:sKPrig[PfqAcWpWhaV:UaTA/c*SL(j%D8Zd;;<fa(Y
%f`Sroc=S9JV9&<E((I'uS$.oO:B/9O^MK'nHkZPPSd,=89SD(eQq`7e7$nE1bZI[i>=pE_-IYO\WYm:fVW&&a`B@"F!g")[2N_kj
%kr+ZAs1*7K6>1.i3Se9P'-:BEZ'^:Yc^I<cLQ$Ig^r-1C)u_+,:s>Pu.1LO.[%I$:=OqiFpeSBQ;].mB+@D[@0OT[Rs3kG?iDCQS
%4IGNks0q`>4glB?RI:1S+8Ws,-\+7#^H>-UG[OoTArqikK#,6a>K9Kh5#NLPRdn-'^Q5J>>'p"KqK1Ielk9IeT207SKuIM`/<U26
%?#4YMAX)p@e<Ko)XnA:GI>b)]I28!\pU+N;r!gpL^6R(6H>N=r<[<62^3<lfe:ZNTodE%G*Wmo3g02&]--*-a%2rNpD`9M+qp_1D
%^RB6:4so0hbOI6-\V;uV=bE=u?-i)(Xp1Zq]o0-0P1nHReM!)39;H\H8gf_12]$i!+"@&nd<Ze%4h(=R3444m9C&6_C]6Ni\q*WY
%$ADC(45)184>]>!5*W>tZ/6p3CQdtA(2\#an\15)n$YDHP<N6_>@SPlj$)`/8pe7Iqs;akp<rD`b[KgHLMSMTn;LCbEM>A+XcGc$
%CC8@PqHIhH]!^sQ:<m9B;QR9Gj`7E9EX?$Fs2oEMjccr<8l+;&/t7"D_3a^]Bl0tOko4rrV$`pZ%0a"(O#iIE6eDs@E>pE>@(_Oe
%p8obeC0E.)4pU_!(uIS3\gCE(Z_8LVF`hi3!G`ec*95kD)O%`uP6]Omhu3I<S'\S3pI^q/P]mP$AQY/aWJ)AGBf!PhA4-1)Xf9g0
%bcB%j*GI<+UJ:5fS*>Su)me*J(3#p@>86.C\#.0@p@[WjQ#=r:?'p-=/%RIu+nR:(Y)%n;7"HE3jQN5*`2Cr3kMY9k%Aep2!>gYn
%o^L&8,6%lP%i+(/N%OV-B'!ZlKY7b->\'1T694J>c=ioEPXrq2)jWYkll3-AQbRr1II$!rWT=QbqaM.3%l/Wdn^a$^XOueU%C5@O
%"W`tR[H_Pk-WGh#8c[g[Q#//^7C6L]jnru+Y;%=lP7,MMf;)Q-KGE]W%]`FP[.Ej4mI<=2H='<0e'@^bfYX&"_%"E<_#PX'U0WSa
%^(dFrrPn;1ChG4$0,0CY<//qM$n'd)-A1\ug<%9<a_0=5PNG9FORH[sksW-[mYc;R4S3gc76$oQ-Te5P%Xn@8H9%4Z5GQ(TMXJuP
%l/oH11?Zqu,(&+3IO:<Oem^gq_YV^,M0^q6C(%Q#?^-UXnqh\E`47H@E$*P5`XRocePY"=KnP3_dW0+(Z9\,ir.R?Zr_IaP:a/;g
%):`[ZZ9hW#Td'=XW:QfAnND$D`fbmn#YSe1)cW;S#H1Jr'5h`o;=VPg'l_-=<P8m02H>FmPTa0V>\*b<BNJZf$H3!J.QUc@eEc1n
%*d\=?-!WTEY@A5L4<6-'gLM)]N.Q)Ei5i_er815SLFaYQ"[m<o%=2!bS5?XBqOu72n8gT31T@Z@=ceVt/P]8?c.J2=nMVjBnC1JP
%,R1iBc.MF)NC_S&,!85P3C$_DeQPc]p'M-iRl2X%,3&cj,E&M-jH]&:QSUt*e`B$9aN]^Z8r/-mjA<.PG+n.E>bb)0%R`=FJ-pLI
%=\YV^(,&n\3Plu])(SVob/+l6X,d'Fr@Ki9p2bpO.4W)(MUhc&'W=ug46b$:CN2X,MDSKnZoEkr0NoHpd%X#N:Zi9^OM`esNk-OB
%Z5ieiAYjXkYsJ1_KM)QJ/6$d3AhW'qL*?)U'>/IMGWIP;6.%5W,F.;mk7,'D^`prF*-)0NB"&8p;V8lcFse1dK%0\EGf1)JVO(s&
%q=n6Y"5`]<@gfS;W;nMl+!9)k4cf$K?DnFm$Vt.m^?KVcm-%&'%,@LGS[.H6@K1;Aib34^[ZOp\q_E&]Y>ho2X(NWa7HL9%Ku"+f
%I=FLN>R9<19h.%X0GHoM#I!F)K*_^e79,9UH.4kMIR'M>XaZY&qWf3j]s_Q:li7:-jp!fbr,`!g$2JIS?Y"RZ,.b46%-UQT3Z^PU
%Xj(_^qEQV!j-kF3(;@e1a8Rb.^kpK4d7)_cT5#\H#u/Y%XtB>L6Q0K1N#%UAHs"2AiR$?iZ![Cq6:LF%r30]Q95n+V^*"[NTQr;%
%OOO1pIlgJCKUR!um:^PeES-:AK-7k[gh\/:iaB\mBYL*&/;_O1hV*S6m=YC]TJj`HU0UbcSVtXg7;87]eWN%T?+CnQ2uimO4n.R8
%]P#JLfZ>lmi?)3-YsdI;BQE$jG#oi'@H`MtOk+onX&[G!*6o4[WDla")@t*cSL=Y^n>ECjM9J0RdtLhrV&X/mX0l&KL<5rtY7n`J
%a5A;S9kuS/A#;lqj`dCCi9e0g[Gnh"b9n)pmg+#!<]O8L:E(^W!q.s2n13XEJ:oHs:r;QIFA.'@)\[80qm1K]&:^+e!\<[-U$S&Y
%2`:TJG;ufeY1:f;rREHaY-esJWnp1.;J2[?QhMAi_S3k+_44+llpUWUb9l8F;CMqV-WJqa!S%%;Po*2M&&hEQn-O!WM8neERG$m.
%36%EqA.FW0OTQDTS"LK3Dil-"aE-Q3llS7b6J]XjOH"s,6J4RS_Nl(jj_F4@-L-3:g6=<kgP5VepGPmU.8mU$Zlj"9QqIL;IMWY+
%\HlU[Zr-01#8`JD,n+$Y9N=ps"+ORo<gB4U7JU^/eoGTrH$6sKO,u+n6bhQ5opt;$[<"]LCP%@.*cms%Ar`\)DM.I=a+od6G+A;`
%?r<(K9_Xu.K=QZjYu6<E89cAH(clpnJetgd-S7haDahDUWQX\jGk+*838oe5WX9Hj/ce',6jY\7Cp:lL6u<Bt&5tkr5eH^3A&:8Q
%L,hYm[f"./hB5Z/r>#7`48W^\+NUOn0**6PNO!buj/D-rU<t@MVpX3U@32:CIeum\g!qZ,EUFm_H2hfm8%\X.pJ,r$^\R/:q/eZ\
%7Ngj>hsaJ5%RYI-F=M.s3(cRUb&da)a#J%NW2eM*a--hbN\MM;KJdT*F0mm"rKPsnELs69kGbe6hG:%dN8'\7L9&/V=jP7lOA[X]
%_S_0j(k!hE%Qp"A>7al#$i(9^JB[,pW?fB<_YgXR+V.dW92'FD=<"M]nDsX[j&]K3>n2iV"7M6Ip/@X&?Y?#7Y0l2&r=ggQ>d/mO
%*'m8N*u?Yo;PeX6'1>QNN:]R"a'Vs0`401QG^o?;3D&a$7=TsU\^FQ)9--:QDWBs`@e+0(7F<c9mR"k,)jL-WMpEIes8Dm\Ie3N)
%q"Q\lqrgG)83DbuJSB5f1apA2TkKSX1#N=t3UeRP3/h^/f<Y?76W%lm=7=>7oASqW)c(rq9@l,tG+i1G\GnE#A4,I7c],AC\W?B'
%6oj4!.0u:1Y`Zd,;)p3%3J8EL4r/EsO6/?6oLiJ-U1053/mZ^*0c/mfmp!O?K(i^aE2))D7WUNNHO's5lFr[k.g?G7Q&sP%JiXB2
%Z)J[g3M=+C-TK.ABMqWg/A01,Iei3$I)eO6"dnhP<(.m9M;lcaRaohQX@Lac(#0$!IpFYh+YRpZnqI?G+(`cn9m%4@0rp"8b;SL6
%4R-a2MY6J0&TG09JSiVD.fTOImVCAi-=>'.\Vrg*[,BG^Yu'5MM:%<B]q]$Oej_GEFmP(nP$i26\I*NNJf`Im'HE+nJ\l8]fVjD&
%mYNiaPgP2t]%@T6$6,N!)"uDj7FMMa>($N$9*G:M)U*^QFe*C-"+=&`Jkg9842J"Z)`2rLR$3U*[NFU7L"2:L&I>[r`(JFZ[ns=i
%8H0/I1F\E0M.SrYN`ja-(=\L#0$!qR)eAo/2@HXs]Y6a#0$oKrKm8>_'1eG0/!P!Koq4Gd)KFXOPKJFsX]9Tc:oCc\`k[4G+9$dM
%#6\q?I/"6h`?cRogEH9+?4'&BN,#NE&BeW["t_IMNYu3+^k]V7DfN:4=0p^0mcW75NtY&ZDHoNu-l<2SSD3Ep=2/6[kear!(XDjk
%d2.f*ghLk<gZc#]iuHdASB'12qgPbd"5Q.H'3\+:c[E-a?Q2*t9ddJbU*bZtV5-O*!FpX,r+%(2H;"cMY^kK=U7s)o-?R0o3O6/F
%*VR?5\XNZ._>.DJM8.el@c1,(iiGETm.!&h!OL<#A7^;JecOWk5sLo'D3tc)>Fk8N_UAg_ZX#^GWa+$GO6hJm%Nu\S64NlWZs%T$
%ZOG`F\A=L4Vb0]#_<i9<&((D\2\^F':oHYu;pJ@Gnr/!nUro=G(P;fBKN&*M!7)<'6g1@67u]@?*id1,3eS\fW]1UL2oXQ\R7eWd
%ljh<R_/KW_RUT:($cR.\.sR.]LYH@F^2EEWDF:(t[ZGmdTp=IDo0+'>Ha%==HFQ,hbEt_N@^Gg,Aqe:uHoMXHK3(-N,iitRNa;;]
%$o!g`%=p`XOJ:pM>@X$WL3#5@2@tQ'NQ/J=`-h^4F9cr>oTXuT*9osSK*sZ.QCe_"1ftsbgbsE(\4=gG/`8NaL[1`.j@eUW>n(NW
%(\+V:Sa(\:@1eKd\DL>hOV(DrV15RO.)Dpp)@KL_77n(r#<T`=:h@t1NEECB$s13g+Ngk$,8M,DL+tRIa6R`j)2Ksp9%f/r[:*X,
%5o=i,J0JYLgW.BMG3'L@C/0Ji1q?P:Y!PEN:VXNlrPRVnY>ZCpproZ5mU#B[P/o7JC.FfQEjb:]ea=P$#4%k80F%h#j4]o9O@X[H
%EM+7]=0Qt*TTTP7Gr51?MJ?dk;e=<(3LJF]g<KhuloJ"21/?G1;YYR:F6O:1gZ-lSqfRj&YOd>V4FtnV>HjV$F!S$V=d6Qkf#8;(
%A(X96;^tl75DO5`s#%B9U"Oh-$(JP81&sf1;E^N\f43GMJ6*"hg+>3Fcu-Z)^(C8N4^Pr>_%>kDMQJjf?L?2Y-LES4JZRU3oSMZj
%EnptaD;FoX*2[QYd4oFW@*55Uh+2o)5mnIa4i]NR9Q_c!6qC%aW[XC9<c]uuFW0HjQUG;D,GIWU(nf27B,5AMW!>hSU0=qghJRj3
%MK_4*p/@)0Mu-pCA<k5-40:YTQV;kIEIrs`1H:A.Ncmt5?+V!4O\nR*jk=Xg`D^G'n\ZOFE9'n.Z.,OlEo$b=fEYmu>I-,T*gUi`
%4HS"Nh@T6;\U5WIA448gV_+nuK!VVIg$[qf2#2jP?uPAf&:M]@Q#Z:#pR8<L%J<EMUV7oVEN[piMQh>!q4MT?A*R<i>"MRBWh\Xj
%+/>_9GFZ7Z]]hlQiTA^JntZccQ4^EQ=ul\P%90im+kil7dm`^$0U<?T,YdA3fk*@V@&P\,khW8b`V^slK-CAk@Tee]7+a(D*'Qdi
%>RQ>L-8[d7+"p`lS6+0T2WuYZ`Ne`[NLO5njSEtfib\13g2HB3OZm;[BO&B9ZkK%<&BL8"4t*ik^eWT14"]W.emOYadH3^J"Y\<L
%#&hq*-g_i5p?A%*,43pf?QT`&[L3Z[?doWNOESL!ZqueJJR[@8Cnse(7-48$CG;6i`Ac,KQo0,P?3ep(6#N<t.BY#$VS*rsj$qte
%76tN;0(\\">`>Vm,Brp'Jjl;n1Y@qRe]9Q9C?-8ipI[2iNEjB7<AIQK%[sH?%/=iH4%+'nXr;Qi*fW9<R2=bJ]kMdMneaOf5G&*K
%lIiSu6<gm61YA^r*!+q;%b[-\Pfk)!K-%$ZJYB\>'W.]_E&KV)d3jB%Yak*8CGdC0e9eFMj+-XB2732<R_Wb-HD^RnfcSI/eWA/*
%X5u+e@%!oJB$FMPGn:Sp*3t$[U]]#t>%SaV[;6AlnNC!,Q!$&?5W&[4?]58m29R*S3?^UW$sq#D)FY%50sPF<00*$j>D<a9>XA-\
%&B)iu7HOaA/^LD;4:\ViRLJ;JBL<5hhSc3LKIK4jU;;LMG3$[tS*+6od**<!c;66`C)XWKjGkK8Qt,EM5e,Y$FnZPG7Y@q?]5aQq
%;Q?%2P_9bW3DD%0e9]XW7Su<=VGL!efeuB3)Tk;aJfbr;]pNUC0,lO\)q-LN-lI?<Wd#!KH9U"X)7YA)7Gl9cF4#XM'9[r9%IYGu
%>Cjj2EJp'=dQ^fkMN8%,bp+O5<_YQ9Dl^"Q:S+%$.hPAf((nsG7"D_]bS_h-4jpiVJ^O8jXk6+.@[CIH3s\s%7Gb(fR#F$oP"D-6
%ZLQ)T=;h:9mA?abG^`YTs+mn++S6iZ6K0@)NQi986<8/L:stp5PdrIa7:RPM,%;1b(?Xq_rZ"L3_R1LX#[H>G=D&^WMk"_QLro;C
%U22Si$&L3B.=n;ELRU+Wfjf!9KCUX9Kb;)K`d1&J)k2;D]-RYXH"ZCfU-q#ZLho[qJr@:*"id:sC4fUa\<Y),)-b$;d=,W$\"[Yi
%=@CKbG!U`gM`"-_Zlj'S9QX\qP$9'Y_rN_T/Ij&*GXRikb'?>Ta]+0a_W9KoTammNS->-;2'$m\Bl;UoajlA?-[(oFBU,P7#TH5s
%B$4"^GhF=+Ol,FfTmt5<DmMlE6NRSGj`*[2a[\6j@\>4fTi63d+Vu'&f@7Ej&&$B6_g/?L!ge)m^>SQ,/I^kJf]`H;]aTVAb^mmd
%./<mQ;SWVIG3(I3._7+JZ5!TnLk6rlmPQ/n7W>ah]HBNp[YPkD@:"S&V\G,-5Ca?;$6ln3*g>&9.?l^E%l\R/:\fK&:fP'"XTq=X
%/RSuiEn044)E"CLn=_7iM[BBPhu6[./u_s>ksh!ris9q%[&?5jHGa_P`(&_4Uk]499%Ke3+f')j&B"'GkD*.PiT_,EdF1&b5[G;[
%gK*`r3\be\kY*t!?!dtA(jBP[#:nf.@20KNBVh*E]E^fn;G[Q9p`XPI"VHAWJ(X6N!LGWI(:)g@G`:(ZG3%gT*9>Xj1gLBq%834Q
%hHj\F\JQ)c\`^Qp&&Yupj%PZ9-K7Ia.(@9(Oth&Y"EMB[GtFjD6.'EY$I-[nVeLmCAehEZTu]uOb-dmb<9U]pO*do$/Id*V7c2K<
%"uD+,jA5()L5sD=:cq\m+TE\-cJ=`&!BmGBe`?N$*R_T#Z'h_2d&)pX'ODeZk?4q/3hU$#eu9ftl8cBEfp]`nl?]I[bQ'7$m@a+h
%._K??jFRZ`a:-^P?4LXWV2@'2V!"KMX-"!F*oNfJ4s8VC:8QtH&="Mc@]\]-UttSIRc%V-\?5)Y=`bb[!^Z[[*MpUd)QG\f3UGca
%aS'G>._1!eagbMYco15@ErQ_]\L=cVoS,WsH-1L</(GK]J3BRU;3;D!W9D'bEG%t@2qC#FjADfhF79Qb;QsnVrVS7[&cUG!%WNc&
%9+83o5FoViEA4OJ"S0q_)p3[PF_Wi"J_GcoG3e<Q\ZCuN"c#n=[G`G[!@N7A)J;r^S?e]Z#LpR\U"1!70X!V\ABfY%)3jFF6W$jS
%C)=4e*FceWgP&[H^F`9a#Vk.n4]L]n'd8s^aBN?-:+g0YKS(>$_U70L(Z`^*1GQrb<U'S)&!IdAfUH*,Rg.\83C[$C'>fNN4%s66
%[8$I39g0QTou@O>6A_4r5A#JaKArGG0KpYtL7>%64Q`pE@mjXZ_3oH\25=>q]16Ic[aSnWLDsf?DE(k/IQ+IS5/I?(H&UmgVn;+[
%]pUt7b;RGlp5&=cmWq!Ee4kdUcih"&,,'*?23cp[^G%n/q%<.LXLKs[`eZ)Wa9YVjW6@bT-47rtlHM^p/K0QsQ3*;FVFk/E+t:m/
%BR.LFJ?uO+LcBa^'[gB.OfU=RPdQlN6LY<dNT*lOa%1j5nP\n'cAs&@6D+EZXFVIcK^bEe$R`Bb:F;A(nBX0a@@D1C;5lu,UmFu*
%LsbD)C=MoaHkrAPmm._0<,DVmfXd*uKU/+9Q_A*q&re$eJfs-/^Q!D6$b`.2UM)9'F41iu`4-k^RI@5m,1Z?O#mbZha[)3VLWAa2
%h&-B*X5pl31Oe*?30b>.9nJ1BE#"A$9_39@Ya/c4_-90!@R4:OEjA2-Oq(EuR2%'5ea:fDB1QW!B6YE-Lni8J@R(rr-m17X!#6Bl
%8aGI=1[,<TS-Cd"#AC"`>1LS_1iQBfKr2<b63,Z7I@q'c):e.R#`^u3Xs_\MHF&c$*EIG?V5G&'d-Cm9<ra4+J7>mH7%]8rE,UTf
%TN?cplCqtdWc>pbFGCoj6%Y4QTiu/c&OtYJKr+(!_)k6pFX&Fo)B^mS+=8dd7Z=+E$=C]';8p8e2,u@<7ZjB3duk#[%]+A^ScrQY
%9IN>U<tLFD1](#sd>#LGcT?[4eWEt%2@H=jiJ"'Dc[Ju$1G<8O/"7XS'!-OZ9tdd[U@k5fg]h%C.B&sr%dYQ2_>H[Dk59nk8I@/j
%+,EFAOqAh5+W^^mRp;2_C1T^Ad%8rZeX_7,dQea>MAcC7qB>Vr6uSVPK7ho%Fri($`^]X)j3+<K5(q9_ot>B96o-f+8Y$fpG01eU
%A:pl*W@?S'g#D=R]!27`T<UE!SII`MS;0:K9;X'Q3FFg_mrKGgJlRpI<4!69/`jHA-f\Yl(N0b/3][XlKrQEJZ(kX`X>LmS@joSc
%/]F+lE@=\+9<u44&EMXV)+@$teuOWVI#=q$Nj'LDD+$W[+'b:Wld],sX2L+^f$bh%KuNZsH*7@YkRk-><)8=PfNuZZ4U1NRDT69@
%+Usj8m$-r&*?d(k;9#[$DMHe?D\FVXKs;#+:tmk&%],#?1qr:3HbMdt[j<jjX1N+)JV[:-gBZ5TX"P5O,qZcN_/97aDVI(nD`[b_
%*@HNdeNODO*!8^S<]&Q<N_HW(6r-`WD0&(/UAZiU+H7E(ZhB$mT;Z&)DPd[rPe.kJH!<m(+4'QL[Q_PN3RhdAGdE("X0],n:@H^V
%cJ,<)b'AlVm^pe5(4sjk,kenKTG,74)I+be-/LaLojX>*qZf(_T"F&"-:S*?j6LGi6aj-53eoQHR_q>7lsZ.f[UF9$q-IA#U.3`<
%2P7ugE0Veu]TC$idio3)=A<Ai%`>N#ERklE8_d.1:L<X$!t..aI%Xt[X19t]_u(Qn<q[MlK3GK^5E8>E'PH6`b<gqZos0$i"'WJ:
%m8]LTN'b&%M)6j!NZ7SkH31K+%@G%E8.+.d*MF5N'u?RM%1\8H=5Ur=]=7[hb=Dcp,Sm7V+,rdf>dJrDfga\m7nq3>=U5nZ@Cs%N
%eq-tmi,Z0[g\lKo6&^XUQLt,H%IJ:*01RinFDKe]\:/q.o.cpa2L7DY4Wu0V9(HCO-sXPLS&<`EFb6dSO(>OsT3:roQjLnM]SVDt
%:H2";\T[+EVH2VRN5pVW=snXHm`k`j3O@mC:"]5g6As6r.gpO^ip'app;7giibl']Q>)t1a0gkIkr=M0#?]+03+4c`&n@qcinS5A
%B)a&&i0f-.YZ@6bK>:0WI0g3]K@bEB';D4*'8nlR>CL/a%#f9#aR#-uV4<p$8(3319frN-LuGggmG!&a_S1f7H0lQ"UV\W(DRKEO
%,E0Ut7G_L,?&Yo)h*p10KO$^sB_T+<*treZl-U*4"J1;-Ml1J:V2QfF&=UpC^_>!)45O\hlXLD.04-t1c.#3?jT;,5SV>]DHJ-]!
%dM'S=Qd$kKJbM&d'dWW+/P+rr=!=6q;amEn.M;n%5kWgQ5C]7`S33hG_n5IU<fUk)A#X4<E_sV-o%j_TX"$)*SeXgCT9r/5d/+gp
%eAlm%J\_UB#pM-\0Hk"7PPj?66BFl1pfcpJ)'#'[PS4+d7^]kpO\Z)H">Qg:8[!q#Vd!'c6*[ZQQt+2RoWF.Rs&Q8qH+ra<()6>9
%&bBP1$[d-fme>nt5#EA.;5!SENn8hKFj)>q#6CJV]$:@Mg\`!?O]J:RN9R*@LR_(YRm!c0WrHe*4Nbcj`eD[J[h(sL,*g0t&J#P%
%4\ZsY_O[IHqi[pCA,O*Kk0nc7CH"#"KG`;745eSp``cq[mm$p(`2l3jG\m]M=96\bD9U/W$^s-JC%i,_>u?C>JemJdd"D=@6\B\o
%n2QFF&Vg##W&S<jqb_)d#_;^5:ooCg*j8#+-3B^EM6)5?V;Tp5+;OOq$@`7M9W'3o<hIY*H:2P;YFVIY_dT4fkZPoZ&Dlq\PYjtA
%6^3FfLC\BqEb_a3rGk4_RLR4Q0cH:?f(mS40_[VG1WK;^^!d&:8CJ.aS+r[TYeptlh+m&VUHDYG+FH>^`e6"S^p;sB.A&9Q74R<X
%EjR=V+rA>lW6jge<dnMOCX!I2Q"]Yjj1[=_STd''C%"USb@B&Xb4YLbq\F#3LtL.uLXIq"-V?q)X-%>,a\58(!>u%so2d:H$6hg+
%pO;GkZ=t9DLsA3RW"MbDlsmkY&WAoDA*sV+%:u.K5,o<AP61M.@WtrbhRL>Um<c(mr?1!j6ue'46Z8(XpMX4Qm[,FI<(%ib(0=03
%hn%[7kKm@?e=oo=Wa*cCWfB7s*A.p:Z6cc&h@Hh?-r[muHTR2sf>La"1*<tmFH&3bcXVK#Gf5US-:EQfGBauRcn3GlE6gt/=,VUi
%,B\,BV3he7CZ;+;BMO><:k)`nU>Je:6.p..0gMUs'1G$i:4dKgbonImHEnXdrIUMRc/f*aqt];!X:A.(@5at/i1oK#M#HCB>SUMg
%ifC1k?ZgMP:eTR\53^&Wqgmn.BU=nfe+\mOB>Rcn@snbW)QAOjRlj>`"&t,>;4smk>Fs.V$KST14J!<]H7)$Y4%7P,39S[-X*='N
%&</3W(g=.7/O%e)]2kX45pTX<VHIt28%CA-5LK&'4=dLmm#oKkYS+Jh0SMB7eKG&`GS5qAls79Ee<r.VK%D"9pPN!]HU@gF-HRXL
%J;%*h#UPRs6'3n"1%%FIa.t,n3MOGP(Bmt1\6m4=:SPpQKsHEciJ";M/7kJG[q\@NR%R9,_1^@_Q*ld;9^QX4iFO\):'9mnrP_uH
%V5OAa6<3%Y4#\KuRu#C4iA=]0iC,NA(pCAE^b<3:lI6&=T58U3A0I^_+*2tR:c[B-PBG.<5SmE?[)sW\!4hM,$@:k;1j1/eetiS"
%3%,,n%g_5g*(r2!:E4t;MQIe(N8ud;NEZbni%n=60t0Ft&FC$LXJ@\/J6/rL4rc*$Z'[CJ0hf'V)Uq%[,o#p)S:-]B%g(J(nW#tf
%`W[8:JjA(2VT$FpX(O4p=[R;-5-1&dIEi5dk/)]]^?#5KB]I5'D$=24pO)7*fM7*Efgc;09]O$D6N^R5C+[K*@S<CWgI;cSd,NM9
%Mf&SB2'@&Dj4Q;^C_8gp'`ODL%U:XkH(h$=9Z@aVeN//[M@LN>#L<pOpSVkUg@#P:.c#0AE`QNqkc8@[/!=!PK7ljD9U.k\KN/#-
%#ia*7:,A:Q&(\.acX@rg6-F<,pggogd:ElTO6]S%5(.!j,XA<47oda=bXTM./aUHO1/VPpgAhi4Ps;"/^r8GpeS[cmZ]#3rIZcLq
%*-YemC9@Wp7P'i#Y`44G]!Ik)Z>+)$D?W/kl0YBh\77$3r7bFQI#%UoL'WO.asV(h/4Dnl8Ln"tkBil(5QU82=9m@F-5.*FaB,4r
%'GdL'2d\nHif%)d*))?W5$:V_&MX!<&FDkbj3P`5Ho/mM&e(qk&/_K%f45hnDb_AeDDj;LWto$%()^P3q(eFln*"H8UP>knUlX[5
%`[W0'R4?c>o$6m*L^3!:PJ(4R2%*)3_1.rcCQB7P%6KlPOl.8"W'GmaQsX0]M8jb;@!F,RpdVlk7lf%qVBJ;>1:M5%bW/1&M%#gK
%[k"6g*-0:J-52%X?0'(a5gCM&o"\BBf"QdJNV&=0h:?85:O!4!E]&qC5T*<E#0Z9S:a:14-Ve%*MMUnBqDJ\QJ"srBL]YAs_np09
%?Cg:6VsmQkomrPmHlZ'kL*Pdf"330Spig4<A<h?SPq/%=eO?046SimZNc,"E:pAT)&_oT+LTGj+ZaQ/<MKjB=2S79H_3IP*>.jVV
%qF%ocRM"@$)$u8>:Y@Po6+_fnT0BcF"NPE/m=aXQ`Xd&`Y$2juHe=qr5M').Gg?foL3R<ldC64Q/3ICBMM"bDd9DD=mRpe2f<os?
%JT0(OV3D>d2S"d%R=et/qBIVn4f_1":B7B%G`skI@$%koLO9D+CV(e\c6M2)ea2LnW#W%c+\$!J7d\%h)TGVuV_Me</+H4b%aH-U
%#AE+@2^I[I94i.YX'WEWja>[8A(L5f&D+IQ2'iUN\R7([GVq6bl:5?<ip,%B!Y'\$80rLsTSmUE+%?R&9IOTI36"NFE1Uf,$U?"+
%53(&6Mk2=G'mhtd"I`Z$Gb(8L!?MrHRB=I<6AnB7Xa0s9U)m*Y]Q=$VR*dXC'9<b`LX71!/:)4uNGJpd@-j+j=G8&&o;Tj)DtbBe
%#Po>O%l:a"d>`tU6AqC1Eq;F1(]9@`=h,;VT2ip0gqG,f'rf0b5n>mjmrDDti9.;U0\\"3qa3.]-ES$C.Np:H0+87&ZbC\4&0n;8
%=eJ7JOOA%?"OnYTmT4c'IU6/mc!pmc_6sH!3s2<XJFuS>O=CCiddsUN1I#sPiF,(&_*Gb0Kg=fGbc2BfdM_\M_Int`d#0MQbq+u9
%J"@c9WkGO`Omu.+kk3lRXu7"P,K_^m><`S[94n<;)>aM^%gn>=rMaT;4GLYfT[ZrIf<-N208aMI.EEuj(sIOjdngkFcYI][,l4n,
%s7/)G#BF=X?Uk&t;#hWfkM[a86e]/PhW\2_o3TosgSp#>-Kc&;8Tb*h$#Hj=IbZ]+:Gh>@[_7Bm1.)s5N,](h-d8sr%N?8]^>i52
%^4F6]n3-Dl"/F;Xmb]05?rM`'OsMYbjMo)@PW:E-ZYR0`Jq_VXMbo'iBWkFHaeTr4+rm6IKt&9@AWM#7MIZP#Y4p\"L04LDK-@cu
%j>M[YPYDR=SkQXsZJifl4hTlN&7s"u(>I#mLu=?-DJ5gD_E,KTq#F[`osd<'!@?:-m3FrrQE]a85WR)._lP$,BTZ*'X\F2JZ&g'j
%DJqACkT_-(@3b=q;V#mT,/lVoDm_t?SV?pib)fg9FR+>gE.]ruEg=d6A(!7E5F%Z3/uQ9R<]Ea>"*+sh*Z(O1,rV%=!f79LGF>aR
%N[7VA/Dc0!<aNunc\\MLkJQVWI/_'8T/c=C))\Hj^.K&.):)XVT^0j-koQFLi&C:K7-.LMeZ>D#JC\X'7?%217Z>H\K/<=%]\'PD
%fOaFIkMH"2o>HP1!]U*)7Z5Y'WW(UWg`bZ7lEdsh\D,@RgU<a3J3Jh%:Z;kNVp@Lrq+9AT<89p>DT>O.mpfoM9]]0l%EK**\FHjQ
%WD.'nW(FJsk;T&0!q2>gq]t[f:uJT`(5c"<&pPKIn?2A`7_tDBeeqtV=I<Di1&LX,!I)Cd_1Gm&Gkr:17Ai],E8-=RWbhYAQf^Fs
%YaZ17T*L!cEGI>Ckd;hknYD"+UK?Kdbh(cZFaYaq`A%3X0uPc_lU'&;l%Z2do7j?#1i@1<e"/:0^#J"W.ts(GaY(\_dKa\]'thM[
%'L8mV:!4j?[b`Yra!Bk%`r/\"k[cj5s.GTt8uIRNoW$1^\6N8Uf^11.q5%05'D#kHg8m?61e.^!`Yc:,%?iB.qKbPrkKj`HFf]A=
%[p\/Gm$#ZVk"na>k"g[-Yb0Q`]<"#ep85\lER>Hd<g0d-)?ms2-^9KCHpfZG03dn3Rq$ah2EjfBZ>j@LRC&[#WUeG+)gh*5Va6Ic
%bFChr_,e>E(rlbW;s)c[`+mjNL:o==!ukV'O4j)W'#TQk:f$iL.(*oTX'VUi2hgip67dn](Vm#2QktP!?mUK`qg[bNmMc$X+$[Zt
%Dp7)#BJ)gKDOk^TD'454,r'>Wn\VZ^A)9kaM_3iQ,llLsC$.Xp@+6uic@]D^/O$m'Uc7:NpqkiH'*`YrG>h$O07j81`%o[N8HR/C
%ESSol83jFAQ%?bG$?TXmM2e]#hq8jo[JCNriSL<fTr`S$):6'3*'NMWXY)b?X\:a;SikJ/3pO;c5CBX71n?S@on]2.s+JhQ"iT3m
%P;Ga4I&glp5VF#/)9!%Z9Y3.T=^R9@4,_1IA\;@gCpcU\f?^s]r?QQ)%-`c(oe?@oN0+.78Np&i@nIZnW)]0>+lC=hMcOm.N02gs
%l8lj-jqIcIUa_TC]A=CQcG\Ieh./8*5fQjMN.a\l&!7^;8J4[S*A=p!jfXXM'GNki2!8BN[:>&8f)?4FEBU1SRj7la_Y@_'Jt9AX
%;;L_<)76/h^Z36^hc`mR)6[gt7Om>mJAt,)4Sd9%0#Z71QiHuI4kVRCGE`S[]Y6A>"c<YOS_%hU9gDR.Bh.>Nk_G`Z44">r[BZO0
%l>Rp`TuI!e5"$T)[fdZUZ"a1J%@co,)hon#CTkioJlm6ZVP0)3,=<@kA+<M>9BJTe'8fNAKNu:"=IKh11HOJf[XK/&aFhA%9K8T\
%^*q+*bqZsPX74"G4gm6b]"o6e^<W0?A2W<WaGgVDbbPoNd&<qk&4-UmjEK+ZFd;FA!3=r;=l;1_0NqjpSs?2AV1esOO30*^e\Ga.
%QL40EL2r?$M3%?MB<@UtbZBCS5'<6dU4/EuX9)]m!b(M""ubKJR\$VI..hg2NsUc<(-^ju\G\"i\J6BAiE0U^F%-F?eA1Yc*\0pD
%%S6I4rYD:WdO.A0W2u4`OP_5fBPqfhGc-,]S`C>m<f"T'-LL7l7-)Z8^A[3+n(rn@m?hEFQ3@6b5Me[$s8Vg'=n6h+"JN7r]4<Z+
%-S+e?d<r!i`+XlDR5&3t\rR69MjIUME'pB((nmg3j:dZC3s3C0IT%*P]liIM1='77IRD@6PgFI/@VIFQ&m<<!k[:>A)5^KDMg7Dr
%;j`KhTKK$Z?-hp4PJoc_G5SP+@*]Y9In<s&X1e)KV9IStTETNXh@F8@"%78sh*_DeXYV9q8"D]jb!t(h/B[<]a\_$?1XbS6/)jR%
%9s#)TS\`fTN>cBu7M+C:igZlP*k[W2G"kIt9Nf5MX>M29!J-Db/&Q"6or"aZk:!HoOGs%kHrUK.$AoOnKO/GKIqD&a\S?6Vn/Y+B
%f:XX]+q*s:1*P`8[99Ml76lQCqVKd4EkYk3j&I5QXZjgB4>i@$XIIGrb@6k:P1b4OWGsdROcAOr'&Eq"&mHpI6*DH9.fpJh(3Gnp
%Pt<i:pqjsl7Em,8]qfd^S<?)DlNT9+$O0O12pYQkG#=6S.O*?4G>[0'asHmY<&^,A-<X#AUOlq`PinO77btGgVno7/^-U-WVOtUc
%lK8nEXr1f9doZkhAp@*:oSp3a1Ha21C.6m1fa]TB[\6'UiT6-;f9`Bhg\P3m$l.gt>egtaW7fi!!q6n9pr`3ApKa0Fl)@'(g(\-X
%k4YZoIp#?uKVL`/UZfT,6`I]]6]!rX*]?Go@m)OLipNPE+dk#_58p8WnR[]MVP9-&Z]K#/d>)['(3cCF&%?qs;-=g3YMjRg!pr;G
%[E>DWb7]6*9\jK?1g(gBl6uM5D#-'5p)R&A6eb#d7]&oP2:h(AS*7IMc6(n*g@m0N*[Lc"HKJOpBR3):!4Rc*'X-2!jmXZaYU<f/
%%4cT.q"mXL_s([q*KPJ9[K+UoGQa#>"_;O*Y+08?;<Jbcr)u*jr+fIQN)#o#5ajF8"YJiW2_2aeOPn)7YA%S"'7>*>+2Q'l5dHs7
%^Bo@:o8X+&b)+(2^JTA'=c"96T.Wg.BGNV@\s<6f%>%ac$[U.=IS^-MGD=.NUpL>S,gN<(#sM2YJJ;_'-An,;`i7pt-JM13STZ-I
%0;(fnnSGRi-1bKfNC.0I4+&9-5mpjRA$dLr?*l0SeKrS.;cuKRKeIZ"D>Z>kp:/t^UYY>'E*snr"#S!WV4#o<V]!T=_4"L]"u"W6
%Fukf6PEt/^8Fr?0i1_!6b?BR36]koLkg(2]CBu`aIWYu%pO!Qj%ZXEm0,Grkbum"nrelS:L?4`41\g_]Pss1iAYRNK"uX,q7OD>4
%2sBdVZVGEuZDJD3.@MZ9g9GlH_.tbR6SBqZUY;>&ph&@1'7fg(<U\U;OgiPtO2j/>>mp/@DcC#_s1\7ECqu\AlKbXgI/iW8]AJ&6
%j]DKYmd'?1I/Ru-/;5*AaVJfcAgC@!I`#)(C!&*Adu&cP[%OA**ukbr-rs^Q:7@3E%AP"pL:8Ol(Q/uk7Y<QA`>D;D`Hu+*0>@3Y
%@3KiEpCH//s,ZUi^\RRR)7G6E4>S2<7/r<$7BlfAI!>=kLX1JGhef+fo\4;uIBWZfh%bG=eMk6gpZp.TfmbTkptt!/ror7B=5W1>
%hUCgOdklG7:$4VS)3lc7<Y80@%$2G$#s!Ckc=Q5\4EI0\+sN-=/l1joQ#IKbPSV%0-66*3.(gs'4ZkK+.q:+'Ufd4NS/()-)GOK]
%Y_o[/)oTc/g3@LETUt>L[^T(Xa1HVFZjXTYb/3gm,QiAJLHN@"IC-(&/N%/hh_D1GD11c4%Hc%Z4>YIkrcCPFL0H#tKerBC?PV_a
%EB=k@'^Oh/Col)M#iC.-oPpR"TE"&cDk?t,qe%*-ra;gkIo3;r7s6ebBjO'BQUEsLT\2>B>funUUTk>\:EQi&i>'+eY9^Q'7Gfof
%.4.6Lp#0TW/Z]s]>0:o#!iN9#O.=gp$QS+'\Tk2CgsZZ+i]fs&e#V7+Gj.\'@dC86'-Odf*8'A'%9\'=r;&<4J,^mS'`HG-o?S7&
%qD.=2?TV08_\!`W$TS%u.f+-?Zi;I@7=Vtkr3$eaqO7-nnXO.RXf5qoj20[0dB7`gB;*[077$U;m]_6`[FZDb9m;6N0*`Tr6$l>9
%\O:S5V^#C4\`_WPSqCuNhnRaY%-2CMpAgnjUTg'8Tehf!cNV=-NXg6R7UcRPU3"g[#BWXXoeD;BK8-R.Z10eBInmel17d@LW+*Lm
%S`#b_p'YR/P,%"?c0d')6)<Wj(&ODc#*PA'r`PtEAEN)+[Hh/,guFGT.pg")s#CRJ6a5(\5P92IYT28,pHJ)d*YmDfc\5#S<Rc9d
%2:0MIKgKVkfCpV`J[[OdHhEW*CB]!d0G%DuiG'2)W"-usO2@8I(\nPj?rH*PbFYk2\oTJ$#B^rr`qgOp\>[=R6JQj3(6Df5?B%t"
%bsLsi&t_p$bp>dIB!%]5rThitq&Qdcju9fVAJ!:)BgRS-2ft!q2Rd:;R,t"K'uuKFfCp'2kNLVA-is[pX?'\+bStX@bD%p[e!c#7
%C3(9CFgeR-^GpY+@''@s9q/I-/T&kcj[@_QAoh_lLKQfg<2ALPpB<b?c[V@4rV'ZKFntV&n%Sbe1BDt$^V9X%]79\NbC>fUq3/Sh
%h036*nF#_fYJ8'\hRe9$s)e"IDr6!;rAWWJ]DM#'^A37Dn>#f3TDnKOs5u%ani-RL@!!h&~>
%AI9_PrivateDataEnd
