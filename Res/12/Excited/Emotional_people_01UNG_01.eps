%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 25.0
%%For: Tom
%%CreationDate: 4/25/2021
%%BoundingBox: 0 0 254 431
%%HiResBoundingBox: 0 0 253.3488 430.9098
%%CropBox: 0 0 253.3488 430.9098
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 25.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 25.0.0 x60 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c002 79.164519, 2020/08/25-17:54:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Print</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2021-04-25T00:04:11+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2021-04-25T00:04:11+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2021-04-25T00:04:11+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator 25.0 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>152</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAACYAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FUv1PXLDTxSV+U3aFN2+nw+nJxxmTRl1EYc+bG7zzhqMpIt1W3Tsftt952/DMiOADm4E9bI&#xA;8tkqn1PUJz+9uZHr2LGn3dMsEAOjjyyyPMlDEkmpNT45JrbVmU1UlT4jbFQUVBrGqQH91dSADsWL&#xA;D7mqMgYA9G2OeY5FOLLzncoQt5EJV7unwt93Q/hlcsA6OVj1xH1Bk1hqVlfR87aQNT7SdGHzGY8o&#xA;kc3Px5YzGyJyLY7FXYq7FXYq7FXYq7FXYq7FUh8ya+1kPqtsf9JcVd+vBT/E5dix3uXD1Wo4NhzY&#xA;Yzs7FnJZmNWYmpJ98y3Uk2txV2KuxV2KuxV2Kqtvcz20yzQOY5F6MMBAPNlGRibDPNC1hNStuRAW&#xA;4joJUH4MPY5h5IcJdxp8/iDzTLK3IdirsVdirsVdirsVdirsVeZXly9zdS3Dn4pWLfIHoPozYRFC&#xA;nn5y4iSo4WK+KNpZUjX7TsFX5k0wEpAs0m31bRxf/o0xyc+fom757+pWn2KU48sruVW5PDj4uD4X&#xA;5rZdIjTSGn3+txSN6grsY1bgafJjiJ+quiDhAhf8QKtJoUNLGMMUkfn9cc7heKLIaD2VqYBk5szp&#xA;x6R8/vQM62b28jW1nMEU0W5Ziw2P7QC8d/nkxd7lplwkbA+9AZNpdiqa+WbloNYhAPwy1jceIYbf&#xA;jTK8ouLkaWVZB5syXVrPmElLW7nYLMpjr8mPwn6DmJwF2ozR5Hb3ozItqH1GOZ7KUQkiZRzjptVk&#xA;IYD6aUyUTu15QTE1zVLedJ4I50+xIoYfSK4CKLKMuIWqYGTFvzM82XflXyfe6vZwetcoOETEVSN3&#xA;U8ZJBUVUMAKeJGCRoMoiy+Up/wA3/wAy57mSdvMV2soblwR+CeP92gVKfRlPEXI4A9T/ACn/AD08&#xA;zapqlvoOvywStMyGPU5AkJVFNZElpwjNU+y1AeW29dpxk1zxjmH0GDXcdMsaXmd9ava3k1uwoY2I&#xA;HuOx+kZnxNi3QZIcMiFDJMF0cjRyLIhoyEMp9wajAUg0bTX9I6V9d/SPpS/WeXq+h8Pper1ryryp&#xA;XelMr4ZVTkeLDi46N93S27bW4o2tjKjSKqzLdrt8frMW23+WJx80xzgVfnfxaj10rwlZC84uJZXB&#xA;+yY5VCstfv7YnGgajr1s/asN7psVpcxW31itwoURyceC/EG6g79PDDwkkWjjgIkC90ryxx3Yqm3l&#xA;e1afV4mA+CGsjn5Cg/E5VlNRcnSQuY8mePGkiFHUOh2KsKg/Qcw3cEXzS9raewPqWYaS2H95Z9SB&#xA;4xV6f6vTwyyxLm08BhvHl3fqTFTUAjvvvsfxytvQFl/ot3LZNtG5M1r4cWNXQf6rGvyOTluLaYem&#xA;Rj8Qj8g3Pl/87/zgk1zUZdB0C5kXRrblFdyow4XUgNCRx+1GO1SQeo8TVKTkY4VzeNN6fLqeXcAn&#xA;+HTINitbyyW8glgkaOVTVZEYhgfZga4q+hfyG/Oc3rW3lHX2RJgPR0i8AVFcLssDhQF5UHwH9rp1&#xA;pWyMujTkh1D2DzFoH19BPBQXaClOgceB9/DMnFk4djyddqdPx7j6mEyxSRSNHIpR1NGVhQg5lgup&#xA;IINFZhQ7FXYq7FXYq7FVe0s7m8mENuhdz4dAPEnsMEpAc2cIGRoM90bSItNtfTU8pn3mk8T4D2GY&#xA;U58RdzgwjGK6o/INzsVdiqnNbxStG7j4oW5xsDQg0p9xBwg0xlEGvJ47+fH5tSaLp03l/Q5OOo3Q&#xA;MNzdqRWNSKOkfg1DRn/Z6D4q8K5Sb8cOr5rt9L1G4t5rqC2lltoyFlljRmVSR3IG2UmQcoY5EWBs&#xA;ho4ZGIjXeuwVBuf14WADK9I/LDzPqVm04hWziArGtwWjeTavwqFJFfFqZVLNEOZj0OSYvl72NyQa&#xA;hpOpmoe0vLWRTQVV45ENVYEdKEAgjLAbcSUDE0X3B5I8zQ+ZvKmma3EVLXcCtcKlQqTr8MyAHf4Z&#xA;AwGZANhw5CimGoaRYX60uI6uNlkXZx9P9cnGZHJpyYYz5sL13SF0y5SNZfVV15AGgYb03zLxz4g6&#xA;nUYfDNWlmWNC5UZvsgmnWgritKiWl0/2IXb5KT/DBYZCEj0RcHl/WJj8Nq6jxk+D/iVMgckR1bY6&#xA;bIeicWPktqhr2YU/33F/zUf6ZXLP3OVj0P8AOLI7OxtbOL0raMRr3p1J8SepzHlInm50McYigFfA&#xA;zdiqlci74j6sYwwPxCQMQR7FSKYRXVjLi6IYak8LBb+E24OwmB5wk/61AV/2QyXDfJr8WvqFfct8&#xA;w6hNp+g6hfW4D3FvbySW6t9lpQp9MGnYtTIFvD4j836nJqPmO6l5s8cbyR27PuxVGoHb/Lcku57s&#xA;xPfKC5QD0f8ALCS9tfJhnsrI3k8907GMSJFsEValn8OPTMPNRlu7vQkjFYF7sx0a9vbsTSXumNps&#xA;6MFo7xycxTqHQ70ymQA5G3OxSMuceEta7d6zbQRnTIIJGZv3011L6cUS9i1PiNT4YxA6oyymB6QP&#xA;i84/NLQtUZNP1S5SJr2WQ204tFfiwCl49mqxPwsPlmRgkNw6zX4pbSPPlsmn5A+fNS0fVptCEkbW&#xA;14/NLO4cxo02y/BIQRHIy0Arsxoppsy5kC6fJG30nL5gji01rua2mtpuRjW0uFCycwK0+EujDf7S&#xA;sR75fCPEXCzZRjFsfg0DWNVna6uv3KyGrPIN6f5KdflmSckYig66OnyZDZ2T+08vaPYx+pIiyMoq&#xA;0s1CBTvQ/CMollkXNhpoQFn7U1QIFHCgTtx6U+jK3IDeKXYq7FXYq7FXYq7FWmVWUqwDKwoVO4IO&#xA;KkJde6Hb3WjX2kmR1tr2GWAdzGsqFDw77VqN8MjbHHHh5Pjrz/5Wm0HzSUvU9G3mnLTKtaRtyHrx&#xA;qSPsrz5oe8ZQnc0zHkKc3GQat7Hoek6bpumCy05PStQWKgMWNW6nkd9+uawzMjZeqx4owjUeS3y1&#xA;pc2laNBYzXsmoPFz/wBKlBDkM5YA1LH4QadcMpCRtGHGYR4SbXanpVprei3GmXbObe4X03eMgN8L&#xA;VDKSGFdgcjjlW7LNiEwYnkVVo4YbRKfBHZL+7kcj4QkZTkSfAHGybZcIFXyD57v9Xc+ZLvVbMAF7&#xA;mWdEYAho5HZgCp2Io1Cp69M2URQDy2WXFInvL6X/ACx/M6z1nSo7mYfWotPQC6Vqy3liuw9Q1q09&#xA;vt/eD406Py+3l8Z7OHPELvq9ailjljSWJ1kikUMjqQVZSKggjYgjJMEFeKLq/hs23hRfXnXs1DRF&#xA;PtyqfoycdhbTMcUhHpzRk88METSzOI416semRAtslIAWUNFfXUzqYrRxCSKyysI9vEJu33gZIxA6&#xA;sBkJ5DZGZBtdirsVdirsVdirsVdirw3/AJya0iyl061vaKlwkLu7bBpPSngijX6BdyH/AGsrm24i&#xA;xH8qNX1y70FlvE9WztuEVpN0kIA+Jf8AKC7UzW6igdnpezpTlD1cujOYJLRB+9m9OMt8cjKzFT/l&#xA;BQTlAI73PnxdBZXSXmmtJwtpnlAFXkZPTUdAOrE9/DCZR6FEYzr1CvjbD/zLttRuvKc66ctI4nWa&#xA;5BqGkiUEkCvvQ/RlmCQEnG1+OUsZr8B4gxBCuO1PuOxzYPOMw/KLV7zSvzL0GS1Zl+tXUdpcIpNG&#xA;juHETBh3Hx8vmAcMTuxmNn1z5YjW2Oq6bFta6ffNFapSgSOaCK64L/ko1wVUdlAHbLg4xTQW7C/e&#xA;5qOLxLHx71Vmav8Aw2Tvamvh9V+TpbSOW4jmkJb0h+7jP2Qx/bp44BLZTAE2eivgZuxV2KuxV2Ku&#xA;xV2KuxV2Kvl/8+vOUOsecv0AstLC1nht7mRSNjGWEnX7JVpH5DoeKHKMsjvTlaeAsXyJZdZ2NnYW&#xA;cFlZIsNvEg9FAKAmmxr38c1JNvYQiIigNleRgo9V9grBQW7rUVqPvwFIHRVe8+vXBdnEnpqAvEBQ&#xA;CSa7KAMlxcRYRxCAoKaqpIRn5mnCRSK8h2rgZvA/Pmn6fYeaL2zsBwgEikxAUCMyh2Ue3fNhgJMd&#xA;3m9dCMcpEWQfkTpP6S/NHSeQrHaM9y58BBGzJ/yUK5fHm4OQ7PqzynWXTJNQPXU7ia8Vv5onfjbn&#xA;/pHSPLQ45TiT1PTb06epT4eVaV96YQxN1shPq+rNu13Gp8Eh2/4Zzk7j3NfDPv8As/ar20V0nL15&#xA;xNWnGiBKfcTkSR0ZRBHM2rYGbsVdirsVdirsVdiqy4lEMEkxHIRoz08eIrir4V82mc+Zrz6w/qzm&#xA;Q+pIerPQVb6d8oLlh7v5ZnmuvLuny3Sn13gT1Qy0PIDeoOasjch6vFImIJ50EzNnNdbiBpIIj8bB&#xA;SV5U2BI8Aa/dg4SemyTljE0SASsaP02VlWirVXAHQHv9BwVTO17NxUt4CuFD5781aVrkGr3l3qVp&#xA;LD9YneRJHFVoxIQBxVfs9q5sMRHCAHnNVjmJmUhzLL/+ceL5bb8wnhqRPdWV1DbU6mTgJRT6Izl0&#xA;Obg5OT6l8rCEeWNIENPRFlb+nTpx9JaU+jLQ0HmmeFDsVdirsVdirsVdirsVdirsVY/5l80Wun/6&#xA;DGi3F7MpBiY/AikHd6b/AEfqynLmEdursdHoJZfUdo/f7nlUHlny9psr6g1qkt63HncyANIzBQtR&#xA;XoWpvTMOUyebvsOmhD6QioLuBkIUnnu3AihJJJoMxzFyyHonkE/7hZIXoWimYNt15Kr1+9iMztOK&#xA;jTzXa4/e33hkMlrbSRvG8SMkilXUgbqwoQfnlxALrRMg2DyePo68GqaKpIqx/Z/Zr9BGaquj2y6H&#xA;6pdW31eUJMFXg6sKgjp38ctjyYzDFNT/AC906y1GDXtAkOlarZyLNAVHKDmrAjnH/LtT4fHoemXR&#xA;ykOBm7PhP6fSfsewfljrq6h5f+oyR+hd6URBJbVrxhNWtyp/aX0/gDdypzNhIEbPO58UscqlzZfk&#xA;2l2KuxV2KuxV2KuxV2KuxVBazqcemaZPeyf7qUlR4sdlH35CcuEW36bCcuQRHV5FbTT3Wqz3Fw3O&#xA;Zqs7e5PTNbdl7DhEYgDkhtTuvVm9NT8Ee3zOAtkBSCFa7dcWT078vGk43qOfiCwM3+seYP8AxHMr&#xA;B1ed7ZG8T7/0Mm1a4Nvpl1Mv2kidl+YUnLpGg6rBHinEeYeK6gz/AFhozsqUAH0DfNe9rHkttpfQ&#xA;aOZa7ErIMUkXsm95SSykK7gryB9uuSao83eUjdrq0Qs7hba/KH6rK9WhkB3aCZRQlHI6jdWoRXcG&#xA;3Tzo06/tbTiUOMc4/c9egaZoI2nRY5yqmWNG5qrkfEoYheQB70HyzPeYX4q7FXYq7FXYq7FXYq7F&#xA;WC/mZqFTZaYp2kb1ZR2pXiv8cxNTLkHfdjYvqn8GDQXBit55v92StxT59SfxzEd4RZQWLNEWEPq3&#xA;SL2HxN8hiESNBn/5fSf6XcKdy8Kmv+qxH/G2ZODm6LtgemJ82Ta58ekaif2UtpgP9Yxmv3ZdPkXU&#xA;aX+9j/WH3vI9Zio6SjoRxPzHTMEvZYygo90kX2DD5g/0JwMymOlzerC9s53APH/VOENcx1Q1jcSW&#xA;1xHMh4yWsiyKfAVAP8MQaTkiJAg8i9xgmSeCOZPsSqrr8mFRm0BsPDziYkg9F+Fi7FXYq7FXYq7F&#xA;XYq7FXkPnS+a580XJUE+iRCi+6jjt9Oa7NK5F6/s7Hw4I+e6QzMKhF+ygoD4nufpypzgtCVRnJoB&#xA;QD3J/sxVNNHh4xNMerGg+QwhrmWW+QuZvXC7E2wq3h8Qy/BzdP2v9A97LNZIXRtRVRslrLv7+mxy&#xA;+XIum0397H+sPveWXiGa1lBHxRkkfRv+rMEvXx2KTRMAWr3UgfSMDcW7eZoZlkH7J3HiO+KkWrXP&#xA;BbqQ1+CRSwPjyWo/HFiOT17yhctc+XLGRjVhHwP+wJUfgM2OE3EPI9oQ4c0gnGWuE7FXYq7FXYq7&#xA;FXYqtlkWKJ5XNERSzH2AqcBKYxs0HhdxO0lxcXTGryO3EnrVjufoGasl7mMaACgkZbcnig6sen9p&#xA;wMyW2PqMscYooNEXvU9z7nFU94CG0Kr+whp7mmSaOZZV5EASe9enwxxRL77l6D6aZfg6um7XO0R7&#xA;/wBDItWKnRdQjqDKbaYuBvuUOXS5F1Wn/vY/1h97zVP72RezAN94p/xrmE9ckNzF6U7x9gdvl2yL&#xA;cDYUsUqrHnAD+1Fsf9U9PuOKOr1D8tZefl0qTUxzOKeAIBGZ2mPpeZ7YjWa/JleZDqXYq7FXYq7F&#xA;XYq7FUs8zXJttAvpQKkRFQP9f4P+NsrymolytFDizRHn927xaYgMIx0jHH5nufvzWvZhTxVG6VD6&#xA;lxzI+GMV+k9MQxmdk2m3Cr/Mw/D4j+rJNQZd5FhD/pBmFVPor9K82/42zIwDm6PteW8R7/0MlkgW&#xA;aCeMCiyI0SgbbUI/Xl1OpjKiD3PKlO8L/wAy8T9IqP1ZgvZIDWYaOko6H4T8+owFsxlLcDNfCwD0&#xA;b7LfC3yPf6OuKl6N+VzMLO/ib/dcqbe5Br+rMzS8i8922PVE+9m+ZTo3Yq7FXYq7FXYq7FWMfmJe&#xA;fV9A4BqPNIqhe5ABNfoNMx9Sai7XsjHeW+4PJswXqHYqnmmwelbAn7T/ABH+GENMzZReFizLyUpX&#xA;Srhhs0tyQh9hGg/ChzJw8nn+1TeUeUf1sif4EVE2J+Ffb3+jLnVvK7u3MTz24+1BI8a/OJyB/wAR&#xA;zBI3eyxT4og94Q95F69qwp8VOSjvUb4GyJopBkW52KvQvywmq94m/wAaIzeFUJX9RGZWlO5dF21H&#xA;aJ97PszHn3Yq7FXYq7FXYq7FWD/mnFI1jYygH00kcOewLAU/VmLqhsHediSHFIe5536D/slWX+ao&#xA;A/Hp9OYb0NqsMUTzIpYemm8sh2B9t/uxQSnaTQvsjq3yIOSaaK/FDPvKcHp6Fau23ISOPk8jMD/w&#xA;NMzMQ9IeY7QleaX46JtGCxMh77KPBf7cm4Rec69D6Ot30fb1ef8AyMUSf8b5h5B6i9VopcWGJ8vu&#xA;2S95I0FXYKPc0yDlUkdzAn1lhGwKv8UZB2PtXIt4OyH4Ny40PLpxpvilmn5Wlv0tdqeggJp781zI&#xA;031On7a/uh/W/QXpeZzzTsVdirsVdirsVdiqF1TTLXU7KSzul5RSdx1BHQj3yM4iQot2DPLFISjz&#xA;ePXOirFcvEsp4rI8YJX+QkePfjmtMaL2OPLxRB7wqSaVGYgiOVI38an3wUkTQJ0y9R/hWtOjKf60&#xA;wUz4wnC847cFzV1X4j4kDJNXV6pY2og0+2tW39GJIz78FA/hmcBQp47LPimZd5KIwtbBPOkAj1oS&#xA;AUE8KMT4srMp/DjmLmG70PZU7xEdxYVdWF7JcM1OSk/C1RQDtlNO4EhSqmkv6BR3HOtUp0B/txpH&#xA;HuhzaaiD6fxUP+VtQfTgZcQel/l/okdjpP1ssHnu9yfBVJAAzO08KF97zPaupM8nD0iynMh1TsVd&#xA;irsVdirsVdirsVeXa7A66pfxkUkFxI6/7JvUX8GGa7IPUXrtHIHFE+Q/UhkcOgYdCK5BvbxVBaxf&#xA;mw06a6UKXiAKK4qpauwIBGxyzDDimA0arJwYpS7gVtv+fOpqlLjSoZW7skrIPuKvm4Ol83i/G8kR&#xA;/wBDAIrRJJox5yEg8Z9hQV7pkfyp70jMO5QX8zIPN15BEtgbNrf11DGQPyAYKf2V7pmJq8BjEG3d&#xA;djZgZyj3i/x80dmA9A7FVJSC7yH7K/CD8vtH7/1YpeoaFAYNGsomXiywJzU9mKgt+JzY4xUQ8hqp&#xA;8WWR8yjsm0OxV2KuxV2KuxV2KuxVg/nawMGpJeqP3V2oV27erGKb/wCslKfI5h6iNG3oOys1wMOs&#xA;fu/tYzX0pN/7tzsfBj/XMd2yrihjHnu8CWEVqCOUz8mH+Svf78ztBC533Oo7azcOHh/nH7t/1MFz&#xA;cvKIe4IFxbkmgBck/wCwOApHJH+Vbv6ndWVy9QGbnKOn96STX5Fsx9Rj4sZDm6DMMeeJPLl+h6yC&#xA;CAQag7g5oXtFjuWPpx/a/abso/rilG6Tppvr+3sUX92xrN7RLu5PzG3zOTxx4jTj6rP4eMy69Pe9&#xA;QzYvIuxV2KuxV2KuxV2KuxV2KobUtOt9Qs5LW4HwP0YfaVhuGU+IORlESFFtw5pY5CUXl2ufV9H1&#xA;M6XqE8QmaMTRmtA8TFlDUPTdDUZhSwyHTZ6XBrseQc6Pcfxul13rem2ETNLcB6bpGCGb5bYMeGUz&#xA;sGzPqceMXIgff8nnmt6w1/dvdzkJGNkBNAq12zeafCMcaeQ1urOfJxdOgQeXuGl+pAyT29utazBw&#xA;SOy/CHP/AAJNMiWceVphkmDMfLvm6FIEtNQYqU2SY7gj/KzU6nRkG48nptB2rExEchqQ696b3fmr&#xA;QrS3aRZ1l4gkRxbknr+OYsdNkJ5OwydoYYizIH3b/c9W8paXZ22mRXsUgnkvo0m9elBwdQyKo7LQ&#xA;/TmTjxcPvdFrNYc0u6I5J5ljhuxV2KuxV2KuxV2KuxV2KuxV83fnbfNd+d9ThNONtHa2CU/ldRKf&#xA;xuWzLwj0tOQ7hi2ZDQ4gEEEVB6jAqFirazLAT/o8n9wT+yRv6fypuv3eGBkd9132tQP/ABVEP+Sj&#xA;f9e8PVHREYUOxV2Kvo78qdQa+/L/AEZ2I5W8TWZAp0tHaBa08VjBzX5BUi5gNhlmQS7FXYq7FXYq&#xA;7FXYq7FXYq7FXyf5wu/r3m7UZ+fqLNqd0ytWtYondIzv24qmZ2MekOPM7lC5a1OxVTuYfWhZAaN1&#xA;RvBhup+g4CkGkFYTzzzSSKoVSw9YncghQPTHuDUk4AykKTHJMHYq7FXtP5BX6voeraeT8dteCcCv&#xA;SO4iUD/h4nzCzj1OTjOz1HKWx2KuxV2KuxV2KuxV2KuxVSvLqK0tJ7qY0it42lkP+Silj+AxV8fQ&#xA;lnuIC5q6wFpCd6tIV3/4U5sQ4sjz96MyTB2KuxVbJBPZFY7sjnMlvcREClUvIUuIx9Al4n3GQjKw&#xA;znGiuybB2KuxV6R+Q980XmnUbHbheWQmPjytZQq/hctmNqByLfhL3LMVudirsVdirsVdirsVdirs&#xA;VY5+Y92lr5C1+RjTnYzQqf8AKnQxJ/wzjJQFkKXzBFveTkdAsafdyb/jfNg4Z5IjCh2KrZI5pUMM&#xA;Klp5qRwqOpdzxUD5sciTQTEWWd/nxocemappk9uvG2bT0iiQda6bIG3+aTIPozHwHYt+QcmDAgio&#xA;3B6HMlx3YVdirKPyvvBafmDozl+CTPNbyHpUSQPxX6ZFTKc49LbiO76SzCch2KuxV2KuxV2KuxV2&#xA;KuxVgv51XSw+QLqI/auri1iT5rcJKf8AhYzlmIeoMZ8i+d7XeS5bsZdvoRV/WMzg4p6IjCh2Kp55&#xA;FsDf+dtCta0H1xJyfa1Bufx9GmVZTUWzEN3qn58aX9Y8rWmoKgLafdp6reENwphI+mVo8x8BqTdk&#xA;GzwexJEPon7UBMR+S/ZP0qQczA40kRhQ7FUXo94tjrel3r7R2l7azyHp8Ec6M/8AwoOQyC4lnjPq&#xA;fV+a9ynYq7FXYq7FXYq7FXYq7FXmP5+TAeW9Kh35Saire3FLaav4sMuwfUwyfS8Lsv7pz3Mstfok&#xA;YfwzMDjSRGFDsVZ/+R+n/WfOk12y8ksLKRg38ss7qifeiyZj6g7U3YQ9g876M2s+UdW01E9See2k&#xA;+rJ/xeg5w/dIq5jRNFvfKqyKLmKZf7q7QD/ZKOS/etfuGZ7iVt7kXkmLsVU7lS9vKo6sjAfSMBSD&#xA;u+tdLvkv9MtL5PsXcMc608JEDDx8c1pcxE4q7FXYq7FXYq7FXYq7FXj/APzkDIfV8vRdiLyT3qno&#xA;L/xucyNPzLVl5PHbD/eSM/zVb/giTmUGiXNEYUOxV7L+QOn8dM1nUj1uLmO1A/ybaL1Af+CuWH0Z&#xA;h5zu5OIbPVcobHyj5z0VtL1/WNKiQIbK6drRB0WNiJ7df+RboDmdjNxcae0kBFKssSSr9l1DCvgR&#xA;XLGshfhV2Kvpj8ubhbjyFoDr+xYwQnv8UKCJvxTNdMblzQyLIq7FXYq7FXYq7FXYq7FXi/5/SMdW&#xA;0KM/ZSC7YfNnhB/4iMydP1as3J5NYf7wW3/GJP8AiIzJHJolzKvhQ7FX0X+UunGx/L/SQwAe7R7x&#xA;j4i5kaVK/KN1Ga/IbkXMiKDL8gl4Z+emji18zWWqooEepWxilIB/vrVurHpVo5VA/wBTMrTy6NOY&#xA;dXmFn8PrQ/77kPH5P8Y+7lTMgNMkRhQ7FX0R+Tzl/wAu9KJNaNdKPkt3KoH0AZgZfqLlx5BmWVsn&#xA;Yq7FXYq7FXYq7FXYq8T/AOcgpEi1jQnlYIjW90FZjQEh4qgE+FRmTpzzasosPKILizigjiFxGRGo&#xA;WvJd+Ip45kWGkxJ6L/rln/v+P/g1/rhsI4T3Noy3kiWdpKj3V06wW6qwJMkrBEFB/lMMBkKZRgbf&#xA;XNlZwWVlb2duvC3to0hhXwSNQqj7hmucpWxVg35zaMdR8j3FwgLTaTIt+gH8kYKTV9hDI7fMDLMU&#xA;qkxkLD5yW5tlvZWMyBWjQV5L9pS1e/uMzbDj8JpW+uWf+/4/+DX+uGwx4T3O+uWf+/4/+DX+uNhe&#xA;E9z6L/Jllb8uNLZSGUyXlCNwf9NmzBy/UXLjyZrlaXYq7FXYq7FXYq//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:43eb013b-4635-2d4f-9a62-ec56a108988b</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:43eb013b-4635-2d4f-9a62-ec56a108988b</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:462ee054-e4e9-e946-bbb1-3f639eedfd39</stRef:instanceID>
            <stRef:documentID>xmp.did:462ee054-e4e9-e946-bbb1-3f639eedfd39</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:86d8ede6-927e-45fa-931f-ec6b4b7f1000</stEvt:instanceID>
                  <stEvt:when>2021-04-21T17:45:51+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015.3 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:462ee054-e4e9-e946-bbb1-3f639eedfd39</stEvt:instanceID>
                  <stEvt:when>2021-04-24T23:20:54+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 25.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:43eb013b-4635-2d4f-9a62-ec56a108988b</stEvt:instanceID>
                  <stEvt:when>2021-04-25T00:04:11+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 25.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>500.000000</stDim:w>
            <stDim:h>500.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -430.91 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 430.91 li
253.349 430.91 li
253.349 0 li
cp
clp
162.608 170.128 mo
162.532 170.128 162.454 170.107 162.384 170.062 cv
151.644 163.158 145.932 148.794 148.494 135.131 cv
148.875 133.102 149.42 131.013 149.947 128.993 cv
151.525 122.946 153.158 116.693 150.581 111.214 cv
148.716 107.252 144.98 104.559 141.367 101.956 cv
140.388 101.251 139.377 100.521 138.419 99.7789 cv
128.326 91.9547 124.987 83.8727 122.042 76.7418 cv
120.561 73.1564 119.162 69.7697 117.045 66.8961 cv
116.91 66.712 116.949 66.4528 117.133 66.317 cv
117.316 66.1818 117.576 66.2208 117.712 66.4049 cv
119.888 69.3605 121.306 72.7921 122.807 76.4259 cv
125.714 83.4611 129.007 91.4352 138.926 99.1246 cv
139.873 99.8585 140.879 100.583 141.851 101.284 cv
145.55 103.949 149.374 106.705 151.33 110.861 cv
154.035 116.611 152.364 123.012 150.748 129.202 cv
150.224 131.208 149.683 133.282 149.307 135.284 cv
146.806 148.625 152.368 162.639 162.833 169.365 cv
163.025 169.489 163.081 169.745 162.957 169.938 cv
162.878 170.061 162.745 170.128 162.608 170.128 cv
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.301961 .223529 .192157 rgb
f
59.8303 164.604 mo
59.695 164.604 59.5622 164.537 59.4826 164.415 cv
49.759 149.419 54.0842 138.447 57.9001 128.769 cv
60.6467 121.802 63.0188 115.785 59.6237 109.527 cv
59.2898 108.911 58.6916 108.118 57.9987 107.198 cv
53.196 100.82 43.2019 87.549 69.2033 67.8307 cv
69.3845 67.693 69.6452 67.7282 69.7834 67.9108 cv
69.9211 68.0929 69.8855 68.3522 69.7033 68.4904 cv
44.3591 87.7106 54.0183 100.536 58.6604 106.7 cv
59.3728 107.646 59.988 108.463 60.3513 109.132 cv
63.9309 115.729 61.3757 122.211 58.6701 129.072 cv
54.9275 138.566 50.6858 149.325 60.1775 163.964 cv
60.302 164.156 60.2473 164.413 60.0554 164.537 cv
59.9856 164.582 59.9079 164.604 59.8303 164.604 cv
cp
f
138.623 91.7999 mo
138.577 91.7999 138.531 91.7926 138.485 91.7765 cv
127.714 87.9728 125.14 83.256 120.011 73.8595 cv
119.217 72.4044 118.397 70.9005 117.463 69.2457 cv
117.35 69.0465 117.421 68.7936 117.62 68.6813 cv
117.818 68.5695 118.071 68.6393 118.184 68.8385 cv
119.121 70.4982 119.943 72.0055 120.738 73.4625 cv
125.765 82.674 128.289 87.298 138.76 90.9957 cv
138.976 91.0719 139.09 91.3087 139.012 91.5241 cv
138.953 91.694 138.794 91.7999 138.623 91.7999 cv
cp
f
98.2204 55.6344 mo
98.0573 55.6344 97.9021 55.5377 97.8366 55.3771 cv
97.7502 55.1657 97.8513 54.924 98.0632 54.8375 cv
98.2556 54.7584 98.4587 54.6803 98.6696 54.5988 cv
101.046 53.6823 104.301 52.4274 104.329 45.4357 cv
104.33 45.2077 104.514 45.0231 104.743 45.0231 cv
104.973 45.0241 105.157 45.2101 105.157 45.4386 cv
105.126 52.9967 101.42 54.4259 98.9675 55.3712 cv
98.7624 55.4503 98.5642 55.5265 98.3767 55.6032 cv
98.3259 55.6246 98.2722 55.6344 98.2204 55.6344 cv
cp
f
84.7673 59.0016 mo
84.0974 58.1583 83.0637 57.5304 81.9695 56.8659 cv
81.6057 56.6452 81.2351 56.4201 80.8669 56.1813 cv
80.7888 56.1666 80.7107 56.1539 80.632 56.1432 cv
78.6965 55.8746 76.4577 56.7472 73.9812 58.736 cv
73.8025 58.879 73.5427 58.8502 73.3991 58.6725 cv
73.2556 58.4938 73.2844 58.2335 73.4626 58.09 cv
75.6662 56.3209 77.7258 55.3786 79.6013 55.277 cv
77.9699 53.963 76.6067 52.1183 76.4148 48.8063 cv
76.4016 48.5783 76.5759 48.3825 76.8039 48.3693 cv
77.0354 48.3483 77.2282 48.5304 77.2414 48.7584 cv
77.4543 52.4376 79.2141 54.1036 81.1867 55.402 cv
82.7854 55.7531 84.2102 56.7951 85.4284 58.5036 cv
84.7673 59.0016 li
cp
f
99.7273 57.1315 mo
99.6911 57.1315 99.654 57.1271 99.6179 57.1168 cv
99.3972 57.0568 99.2673 56.8292 99.3279 56.6085 cv
99.7741 54.9713 100.783 53.8195 102.243 53.2775 cv
104.278 52.5241 107.023 53.0548 109.409 54.6652 cv
109.598 54.7931 109.648 55.0504 109.52 55.2399 cv
109.392 55.4298 109.134 55.4796 108.946 55.3517 cv
106.777 53.8878 104.319 53.3898 102.531 54.0538 cv
101.332 54.4987 100.5 55.4577 100.127 56.8268 cv
100.076 57.0109 99.9089 57.1315 99.7273 57.1315 cv
cp
f
54.466 95.0739 mo
55.133 100.93 66.4221 109.929 63.0471 122.021 cv
61.8884 126.174 59.0173 129.64 57.4748 133.666 cv
53.5525 143.902 58.7883 155.52 56.7395 166.289 cv
52.3415 189.405 65.2824 177.377 88.2927 174.073 cv
103.816 171.844 108.239 174.787 116.899 176.59 cv
130.627 179.448 151.362 175.539 153.554 167.02 cv
155.743 158.513 141.77 153.573 143.351 135.499 cv
144.078 127.188 148.299 118.469 144.719 110.933 cv
142.501 106.26 137.764 103.349 134.623 99.2394 cv
128.482 91.2052 122.427 78.7238 120.571 70.7252 cv
117.985 59.5905 81.3464 44.1002 67.3508 68.3283 cv
62.82 76.171 53.4553 86.2018 54.466 95.0739 cv
cp
f
150.598 163.045 mo
150.479 163.045 150.361 162.994 150.279 162.895 cv
147.031 158.972 143.672 154.916 141.16 150.355 cv
135.047 139.251 137.693 130.923 139.819 124.232 cv
141.393 119.278 142.753 115.001 140.125 110.956 cv
139.577 110.113 138.407 109.11 136.925 107.839 cv
132.347 103.916 124.687 97.3493 122.58 84.1989 cv
122.544 83.9728 122.698 83.7609 122.924 83.7243 cv
123.146 83.6891 123.362 83.8424 123.398 84.0675 cv
125.457 96.9181 132.972 103.361 137.464 107.211 cv
138.996 108.525 140.207 109.562 140.819 110.505 cv
143.661 114.879 142.246 119.329 140.608 124.483 cv
138.422 131.363 135.943 139.163 141.885 149.955 cv
144.359 154.448 147.693 158.474 150.917 162.366 cv
151.062 162.543 151.038 162.804 150.862 162.949 cv
150.785 163.013 150.691 163.045 150.598 163.045 cv
cp
.219608 .156863 .137255 rgb
f
130.672 137.635 mo
130.484 137.635 130.314 137.507 130.269 137.318 cv
129.53 134.222 130.395 131.108 131.232 128.095 cv
131.611 126.736 132.002 125.33 132.235 123.953 cv
133.605 115.872 130.033 110.859 126.579 106.011 cv
125.316 104.24 124.124 102.567 123.175 100.762 cv
123.068 100.56 123.145 100.31 123.347 100.203 cv
123.55 100.096 123.8 100.174 123.907 100.377 cv
124.83 102.131 126.008 103.783 127.253 105.531 cv
130.64 110.284 134.478 115.671 133.051 124.091 cv
132.81 125.51 132.414 126.937 132.03 128.317 cv
131.184 131.362 130.385 134.238 131.075 137.125 cv
131.128 137.347 130.991 137.571 130.768 137.624 cv
130.736 137.631 130.704 137.635 130.672 137.635 cv
cp
f
129.294 157.894 mo
129.229 157.894 129.164 157.879 129.102 157.847 cv
124.569 155.487 123.224 149.748 123.478 145.163 cv
123.581 143.327 123.902 141.487 124.243 139.54 cv
125.543 132.117 127.014 123.704 116.366 112.006 cv
116.212 111.837 116.224 111.575 116.393 111.421 cv
116.562 111.268 116.824 111.28 116.978 111.448 cv
127.9 123.447 126.39 132.072 125.058 139.683 cv
124.722 141.606 124.404 143.422 124.305 145.209 cv
124.065 149.536 125.301 154.935 129.485 157.112 cv
129.687 157.218 129.766 157.468 129.661 157.671 cv
129.588 157.813 129.443 157.894 129.294 157.894 cv
cp
f
136.067 158.075 mo
136.067 158.075 122.445 151.776 120.261 150.169 cv
110.348 142.872 111.685 141.226 108.922 119.654 cv
81.4797 123.421 li
89.78 152.138 74.8581 153.018 59.6902 165.476 cv
78.7033 179.004 116.697 177.613 136.067 158.075 cv
cp
.984314 .603922 .545098 rgb
f
82.3073 126.499 mo
83.5158 131.688 84.3581 136.121 83.6047 141.225 cv
93.382 133.167 107.829 136.872 109.407 124.075 cv
97.2497 131.05 86.9016 129.737 82.3073 126.499 cv
cp
.92549 .47451 .360784 rgb
f
75.7375 117.084 mo
91.4729 150.403 126.486 123.577 117.673 81.2008 cv
110.499 46.7116 47.342 56.9557 75.7375 117.084 cv
cp
.984314 .603922 .545098 rgb
f
107.256 99.0797 mo
108.708 98.9655 109.411 93.3532 105.887 93.63 cv
104.007 93.7775 104.879 99.2662 107.256 99.0797 cv
cp
.219608 .156863 .137255 rgb
f
83.0661 100.98 mo
84.5183 100.866 85.2209 95.2535 81.6975 95.5304 cv
79.8166 95.6784 80.6892 101.167 83.0661 100.98 cv
cp
f
102.689 87.7042 mo
100.63 88.8307 101.523 90.4806 103.279 90.1618 cv
105.632 89.7345 105.71 88.7628 110.928 88.2145 cv
116.691 87.609 108.192 84.6945 102.689 87.7042 cv
cp
.301961 .223529 .192157 rgb
f
85.4934 88.7775 mo
87.674 89.6471 86.9861 91.3927 85.2048 91.2877 cv
82.8181 91.1476 82.257 90.1652 77.3762 90.2775 cv
71.5818 90.4113 79.6194 86.4342 85.4934 88.7775 cv
cp
f
88.9729 118.054 mo
96.0222 129.137 101.58 124.314 103.053 116.74 cv
103.17 116.145 102.835 115.54 102.259 115.349 cv
99.0896 114.301 94.5266 114.549 89.6076 116.249 cv
88.8674 116.505 88.5525 117.393 88.9729 118.054 cv
cp
.92549 .47451 .360784 rgb
f
101.445 115.592 mo
99.4362 116.396 92.5622 117.699 89.7746 116.623 cv
89.6467 116.573 89.6618 116.387 89.7942 116.351 cv
94.4021 115.09 96.7795 114.794 101.399 115.321 cv
101.544 115.338 101.58 115.538 101.445 115.592 cv
cp
1 1 1 rgb
f
94.5046 107.489 mo
94.3127 107.489 94.1408 107.356 94.0998 107.16 cv
94.0529 106.937 94.1965 106.717 94.4201 106.671 cv
95.1399 106.519 95.7199 106.444 96.1862 106.384 cv
96.6496 106.324 97.175 106.256 97.2419 106.15 cv
97.3708 105.944 97.0227 104.885 96.5818 103.544 cv
96.092 102.055 95.3518 99.8038 94.4612 96.4811 cv
94.4021 96.2599 94.5334 96.0328 94.7541 95.9738 cv
94.9768 95.9166 95.2024 96.0455 95.2614 96.2662 cv
96.1457 99.567 96.8816 101.805 97.3684 103.286 cv
98.031 105.302 98.279 106.056 97.9421 106.59 cv
97.6677 107.026 97.1501 107.094 96.2927 107.205 cv
95.8405 107.263 95.278 107.337 94.5901 107.481 cv
94.5612 107.486 94.5329 107.489 94.5046 107.489 cv
cp
.92549 .47451 .360784 rgb
f
94.1838 122.426 mo
100.028 121.906 101.375 121.77 99.3767 123.144 cv
95.8918 125.54 92.5529 122.571 94.1838 122.426 cv
cp
1 1 1 rgb
f
107.913 111.039 mo
107.778 111.039 107.646 110.973 107.567 110.853 cv
107.441 110.662 107.494 110.405 107.684 110.279 cv
112.317 107.225 li
112.509 107.099 112.764 107.152 112.89 107.342 cv
113.016 107.533 112.964 107.79 112.773 107.916 cv
108.14 110.97 li
108.07 111.017 107.991 111.039 107.913 111.039 cv
cp
.92549 .47451 .360784 rgb
f
109.348 106.366 mo
109.247 106.366 109.144 106.328 109.064 106.252 cv
108.898 106.095 108.891 105.833 109.049 105.667 cv
112.978 101.517 li
113.135 101.351 113.397 101.344 113.563 101.502 cv
113.729 101.659 113.736 101.921 113.579 102.087 cv
109.649 106.236 li
109.568 106.322 109.459 106.366 109.348 106.366 cv
cp
f
85.0393 113.592 mo
84.9543 113.592 84.8684 113.566 84.7946 113.511 cv
80.801 110.575 li
80.6169 110.439 80.5774 110.18 80.7126 109.996 cv
80.8484 109.812 81.1071 109.772 81.2912 109.908 cv
85.2849 112.845 li
85.469 112.98 85.5085 113.239 85.3733 113.423 cv
85.2917 113.533 85.1667 113.592 85.0393 113.592 cv
cp
f
85.0446 110.011 mo
84.9558 110.011 84.8659 109.983 84.7903 109.923 cv
84.2326 109.488 83.9978 109.184 82.1731 106.813 cv
80.7873 105.014 li
80.6477 104.834 80.6809 104.573 80.862 104.434 cv
81.0427 104.294 81.3025 104.327 81.4426 104.508 cv
82.8293 106.308 li
84.5974 108.605 84.8244 108.901 85.2995 109.271 cv
85.4797 109.411 85.5119 109.672 85.3713 109.852 cv
85.2893 109.956 85.1677 110.011 85.0446 110.011 cv
cp
f
74.7873 78.2462 mo
83.3064 82.4078 94.1389 81.6935 101.515 75.7369 cv
103.045 74.5021 103.798 74.1139 105.44 75.1451 cv
114.927 81.0993 116.604 90.7482 117.941 105.691 cv
121.243 98.213 130.095 74.3024 111.908 58.6583 cv
98.5505 47.1681 70.3156 52.7047 65.6018 72.8781 cv
63.6784 81.11 62.2658 96.2062 71.427 106.461 cv
70.3747 102.514 71.3005 93.6134 71.5695 89.4664 cv
71.6311 88.5104 72.0295 76.8986 74.7873 78.2462 cv
cp
.301961 .223529 .192157 rgb
f
103.038 51.5602 mo
105.882 42.6051 76.7238 37.4313 78.1726 50.6915 cv
78.3308 52.1359 78.8596 53.5685 79.842 54.6393 cv
82.3015 57.3195 85.1745 55.8141 87.9402 54.6661 cv
92.2917 52.8605 101.164 57.463 103.038 51.5602 cv
cp
f
91.3723 57.3053 mo
89.0373 57.3053 86.5945 56.9996 84.1096 56.6344 cv
83.883 56.6012 83.7268 56.3908 83.76 56.1647 cv
83.7932 55.9386 84.0051 55.7824 84.2297 55.8151 cv
89.7136 56.6207 94.9831 57.1344 99.1736 54.6144 cv
99.3689 54.4967 99.6237 54.5592 99.7419 54.7555 cv
99.8591 54.9513 99.7966 55.2057 99.6003 55.3239 cv
97.1252 56.8126 94.3362 57.3053 91.3723 57.3053 cv
cp
.219608 .156863 .137255 rgb
f
73.2776 75.6173 mo
73.1267 75.6173 72.9807 75.5343 72.9079 75.3898 cv
71.6013 72.8048 71.2395 69.7062 71.9157 66.8893 cv
71.9685 66.6666 72.1926 66.5285 72.4148 66.5831 cv
72.6369 66.6364 72.7741 66.86 72.7209 67.0822 cv
72.0896 69.7116 72.4275 72.6036 73.6467 75.0162 cv
73.7502 75.2203 73.6682 75.4694 73.4641 75.5729 cv
73.4045 75.6027 73.3405 75.6173 73.2776 75.6173 cv
cp
f
104.091 72.3654 mo
103.967 72.3654 103.844 72.3107 103.763 72.2057 cv
103.623 72.025 103.656 71.7653 103.836 71.6246 cv
108.691 67.8512 110.606 64.4161 109.863 60.8156 cv
109.816 60.5919 109.961 60.3727 110.184 60.3263 cv
110.409 60.2785 110.627 60.424 110.674 60.6481 cv
111.477 64.5392 109.406 68.3434 104.344 72.2785 cv
104.268 72.3375 104.178 72.3654 104.091 72.3654 cv
cp
f
84.364 74.1188 mo
82.8708 74.1188 81.9284 73.6754 81.4231 73.3322 cv
80.1374 72.4596 79.7678 71.1007 79.9714 70.1412 cv
80.362 68.3043 81.6902 67.7897 88.071 65.3195 cv
89.3386 64.8287 90.8112 64.2589 92.5232 63.5836 cv
92.7361 63.5001 92.9763 63.6041 93.0603 63.8165 cv
93.1438 64.0294 93.0398 64.2697 92.8269 64.3536 cv
91.1135 65.0294 89.6389 65.6007 88.3698 66.0919 cv
82.1164 68.5128 81.0705 68.9533 80.781 70.3131 cv
80.635 71.0016 80.9206 71.9904 81.8884 72.6476 cv
82.9118 73.3424 86.0183 74.4743 92.7556 69.9909 cv
97.5769 66.7828 li
97.7668 66.6564 98.0241 66.7072 98.1511 66.8981 cv
98.2771 67.0885 98.2253 67.3453 98.0359 67.4723 cv
93.2141 70.6803 li
89.1716 73.3702 86.3034 74.1188 84.364 74.1188 cv
cp
f
88.2917 54.2506 mo
86.3049 54.2511 84.5876 53.108 83.8064 51.2638 cv
83.0183 49.4039 83.3947 47.3619 84.7883 45.9337 cv
84.9485 45.7706 85.2107 45.7672 85.3737 45.9269 cv
85.5373 46.0866 85.5407 46.3488 85.3811 46.5123 cv
84.2243 47.6969 83.9133 49.3937 84.5681 50.9406 cv
85.2199 52.4782 86.6716 53.4132 88.3093 53.423 cv
88.5388 53.423 88.7243 53.6071 88.7248 53.8351 cv
88.7258 54.0636 88.5412 54.2501 88.3127 54.2506 cv
88.3059 54.2506 88.2986 54.2506 88.2917 54.2506 cv
cp
f
93.9294 52.8302 mo
93.8352 52.8302 93.74 52.798 93.6623 52.7326 cv
93.488 52.5846 93.4655 52.3234 93.6135 52.1491 cv
94.49 51.1119 94.7307 49.7247 94.257 48.4391 cv
93.7834 47.153 92.7004 46.2536 91.3606 46.0333 cv
91.135 45.9957 90.9821 45.7828 91.0193 45.5573 cv
91.0559 45.3317 91.2678 45.1788 91.4953 45.216 cv
93.133 45.4855 94.4558 46.5836 95.0339 48.1525 cv
95.612 49.7218 95.3171 51.4157 94.2458 52.6837 cv
94.1638 52.7804 94.0471 52.8302 93.9294 52.8302 cv
cp
f
68.5051 157.693 mo
68.4055 157.693 68.3059 157.657 68.2268 157.585 cv
62.7961 152.659 60.2483 144.837 61.736 137.657 cv
62.3454 134.716 63.5842 131.922 64.7824 129.219 cv
66.1945 126.034 67.655 122.739 68.029 119.27 cv
68.6164 113.818 66.6779 108.884 64.6247 103.66 cv
61.1482 94.8131 57.5529 85.6647 67.073 73.8659 cv
67.216 73.6876 67.4768 73.6598 67.6555 73.8038 cv
67.8332 73.9474 67.8611 74.2081 67.717 74.3859 cv
58.4997 85.8102 62.0051 94.7306 65.3957 103.357 cv
67.3943 108.444 69.4616 113.704 68.8523 119.359 cv
68.4641 122.957 66.9773 126.311 65.5393 129.555 cv
64.3591 132.218 63.1384 134.971 62.5466 137.825 cv
61.1174 144.724 63.5652 152.239 68.7829 156.972 cv
68.9524 157.126 68.9655 157.387 68.8117 157.557 cv
68.7302 157.647 68.6179 157.693 68.5051 157.693 cv
cp
f
68.9001 96.1696 mo
68.6755 96.1696 68.4914 95.9899 68.4865 95.7643 cv
68.4118 92.3229 67.5134 88.9005 65.8879 85.8673 cv
65.78 85.6657 65.8557 85.4152 66.0573 85.3068 cv
66.2585 85.1984 66.5095 85.275 66.6179 85.4762 cv
68.3044 88.6242 69.2365 92.1754 69.3142 95.7467 cv
69.3191 95.9752 69.1379 96.1647 68.9094 96.1696 cv
68.9065 96.1696 68.9035 96.1696 68.9001 96.1696 cv
cp
f
117.1 92.0914 mo
116.879 92.0914 116.695 91.9161 116.687 91.693 cv
116.581 88.8654 117.086 85.9845 118.145 83.361 cv
118.231 83.1491 118.471 83.046 118.684 83.1325 cv
118.896 83.2179 118.999 83.4591 118.913 83.671 cv
117.896 86.1871 117.413 88.9503 117.514 91.6622 cv
117.523 91.8903 117.344 92.0826 117.116 92.0914 cv
117.111 92.0914 117.105 92.0914 117.1 92.0914 cv
cp
f
119.041 78.8917 mo
118.878 78.8917 118.724 78.796 118.658 78.6368 cv
116.537 73.528 112.526 67.4664 111.579 67.4664 cv
111.581 67.4782 111.507 67.5973 111.489 67.9865 cv
111.474 68.3112 111.504 68.3805 113.054 71.7052 cv
113.502 72.6637 114.072 73.8868 114.8 75.4552 cv
114.895 75.6632 114.805 75.9088 114.598 76.005 cv
114.39 76.0997 114.144 76.0109 114.049 75.8038 cv
113.322 74.2355 112.752 73.0133 112.304 72.0553 cv
110.638 68.4835 110.638 68.4835 110.662 67.9498 cv
110.696 67.1715 110.954 66.7345 111.426 66.6505 cv
113.328 66.3229 117.954 74.7824 119.423 78.319 cv
119.51 78.5304 119.41 78.7726 119.199 78.8605 cv
119.147 78.882 119.093 78.8917 119.041 78.8917 cv
cp
f
68.3684 98.215 mo
72.4655 96.652 73.4206 105.414 73.7737 109.773 cv
74.4699 118.365 61.9148 100.676 68.3684 98.215 cv
cp
.984314 .603922 .545098 rgb
f
120.447 93.6993 mo
116.156 92.796 116.582 101.599 116.914 105.96 cv
117.568 114.555 127.206 95.1222 120.447 93.6993 cv
cp
f
71.4328 107.793 mo
71.3269 107.793 71.2214 107.753 71.1404 107.672 cv
69.1447 105.685 68.4978 103.048 69.1653 101.926 cv
69.4309 101.481 69.8923 101.305 70.4011 101.457 cv
70.6203 101.522 70.7448 101.753 70.6794 101.972 cv
70.614 102.191 70.3816 102.316 70.1648 102.25 cv
70.0007 102.201 69.9392 102.246 69.8767 102.35 cv
69.5095 102.967 69.8293 105.198 71.7248 107.086 cv
71.8869 107.247 71.8874 107.509 71.7258 107.672 cv
71.6452 107.753 71.5388 107.793 71.4328 107.793 cv
cp
.92549 .47451 .360784 rgb
f
119.144 104.12 mo
119.059 104.12 118.972 104.093 118.899 104.039 cv
118.715 103.903 118.676 103.644 118.811 103.46 cv
120.4 101.307 120.38 99.0538 119.923 98.4987 cv
119.845 98.4049 119.778 98.3702 119.624 98.444 cv
119.417 98.5416 119.17 98.4533 119.072 98.2462 cv
118.974 98.0397 119.063 97.7931 119.27 97.6954 cv
119.75 97.4684 120.233 97.5724 120.562 97.9733 cv
121.392 98.9816 121.151 101.685 119.478 103.951 cv
119.397 104.062 119.271 104.12 119.144 104.12 cv
cp
f
131.749 239.028 mo
131.397 238.474 65.9304 228.268 63.3039 236.226 cv
46.9563 285.763 30.594 402.295 34.2336 430.185 cv
78.5178 430.185 li
85.2175 401.793 90.905 370.185 96.4143 341.373 cv
96.5168 340.837 97.282 340.836 97.3938 341.37 cv
109.008 396.795 114.825 412.414 120.455 430.494 cv
164.423 430.185 li
166.281 374.992 134.625 243.57 131.749 239.028 cv
cp
.388235 .462745 .564706 rgb
f
96.9021 340.555 mo
97.3405 340.555 97.7087 340.854 97.799 341.285 cv
107.969 389.818 113.689 407.807 118.736 423.678 cv
119.42 425.827 120.091 427.936 120.759 430.078 cv
164.021 429.774 li
164.922 400.384 156.607 351.558 149.455 315.693 cv
141.504 275.82 133.035 242.381 131.46 239.356 cv
130.006 238.934 116.39 236.733 101.592 235.176 cv
87.9748 233.744 70.5979 232.564 65.1477 235.073 cv
64.3445 235.442 63.8562 235.875 63.6975 236.356 cv
47.3386 285.925 31.2043 401.688 34.5993 429.771 cv
78.1897 429.771 li
83.6667 406.518 88.4372 381.283 93.051 356.876 cv
94.0451 351.617 95.029 346.412 96.0075 341.296 cv
96.0901 340.864 96.4543 340.56 96.8933 340.555 cv
96.8962 340.555 96.8991 340.555 96.9021 340.555 cv
cp
120.151 430.91 mo
120.059 430.617 li
119.362 428.377 118.662 426.174 117.948 423.928 cv
112.894 408.039 107.168 390.03 96.9885 341.454 cv
96.9841 341.433 96.9743 341.37 96.9006 341.383 cv
96.8337 341.384 96.8249 341.427 96.821 341.45 cv
95.8425 346.567 94.8586 351.771 93.8645 357.03 cv
89.2278 381.557 84.4328 406.921 78.9206 430.28 cv
78.8454 430.599 li
33.8703 430.599 li
33.8235 430.239 li
30.2341 402.736 46.4563 285.957 62.9109 236.096 cv
63.3967 234.625 65.5671 233.67 69.5446 233.178 cv
78.5217 232.068 94.8498 233.524 106.967 234.941 cv
115.602 235.95 131.704 238.184 132.098 238.806 cv
133.531 241.07 142.189 275.025 150.267 315.532 cv
157.461 351.601 165.827 400.775 164.836 430.2 cv
164.823 430.596 li
120.151 430.91 li
cp
.231373 .2 .282353 rgb
f
97.1028 337.157 mo
97.0642 337.157 97.0256 337.154 96.9865 337.15 cv
96.5915 337.105 96.2727 336.84 96.154 336.46 cv
92.4099 324.451 85.7937 314.229 78.0012 308.415 cv
77.8181 308.278 77.7805 308.018 77.9172 307.835 cv
78.0534 307.651 78.3132 307.615 78.4968 307.751 cv
86.4255 313.667 93.1496 324.042 96.9441 336.213 cv
96.9734 336.305 97.0495 336.324 97.0813 336.328 cv
97.1252 336.333 97.1858 336.325 97.2268 336.255 cv
98.6355 333.863 101.463 329.591 104.559 327.86 cv
104.759 327.749 105.011 327.82 105.123 328.019 cv
105.234 328.218 105.163 328.471 104.964 328.583 cv
101.927 330.28 99.0407 334.807 97.9402 336.674 cv
97.7614 336.979 97.4475 337.157 97.1028 337.157 cv
cp
f
40.8518 423.559 mo
40.612 423.552 40.4319 423.362 40.4382 423.133 cv
42.0461 363.774 51.2439 304.756 67.7766 247.722 cv
67.8405 247.502 68.0705 247.38 68.2898 247.439 cv
68.509 247.504 68.6355 247.733 68.572 247.953 cv
52.0588 304.92 42.8718 363.867 41.2653 423.156 cv
41.2595 423.38 41.0754 423.559 40.8518 423.559 cv
cp
f
127.757 428.544 mo
127.539 428.544 127.356 428.375 127.343 428.154 cv
126.482 413.712 120.964 399.902 115.627 386.547 cv
110.581 373.921 105.363 360.864 104.022 347.204 cv
104 346.976 104.166 346.774 104.393 346.752 cv
104.62 346.724 104.824 346.895 104.846 347.123 cv
106.176 360.666 111.371 373.667 116.395 386.24 cv
121.757 399.656 127.3 413.528 128.17 428.105 cv
128.183 428.334 128.009 428.529 127.782 428.543 cv
127.773 428.544 127.764 428.544 127.757 428.544 cv
cp
f
142.828 282.815 mo
142.772 282.815 142.716 282.803 142.661 282.78 cv
129.544 277.009 128.086 261.778 128.464 246.177 cv
128.469 245.949 128.682 245.784 128.887 245.774 cv
129.116 245.78 129.297 245.969 129.292 246.198 cv
128.921 261.509 130.323 276.448 142.994 282.022 cv
143.204 282.114 143.299 282.358 143.207 282.567 cv
143.138 282.722 142.987 282.815 142.828 282.815 cv
cp
f
60.5388 276.858 mo
60.3103 276.858 60.1252 276.672 60.1252 276.444 cv
60.1252 276.215 60.3103 276.03 60.5388 276.03 cv
66.1115 276.03 71.9821 269.347 74.3713 264.602 cv
76.7033 259.968 77.8894 254.352 77.8 248.36 cv
77.7966 248.131 77.9792 247.943 78.2077 247.94 cv
78.4397 247.94 78.6242 248.121 78.6281 248.347 cv
78.719 254.473 77.5027 260.222 75.1106 264.974 cv
72.7976 269.569 66.7956 276.858 60.5388 276.858 cv
cp
f
97.5134 332.262 mo
97.4748 332.262 97.4358 332.257 97.3972 332.246 cv
97.1775 332.182 97.0515 331.953 97.1154 331.733 cv
104.98 304.693 102.709 272.305 99.8513 247.111 cv
99.8259 246.883 99.989 246.678 100.217 246.653 cv
100.443 246.629 100.648 246.79 100.675 247.017 cv
103.54 272.289 105.816 304.783 97.9104 331.964 cv
97.8581 332.145 97.6926 332.262 97.5134 332.262 cv
cp
f
101.756 310.463 mo
101.685 310.463 101.613 310.444 101.548 310.406 cv
101.349 310.29 101.284 310.037 101.399 309.839 cv
111.073 293.321 111.169 271.722 110.499 252.775 cv
110.49 252.547 110.669 252.354 110.897 252.346 cv
111.115 252.345 111.318 252.517 111.326 252.746 cv
112 271.809 111.899 293.547 102.113 310.257 cv
102.037 310.388 101.898 310.463 101.756 310.463 cv
cp
f
143.651 154.983 mo
135.29 151.487 131.605 169.651 130.871 179.921 cv
130.871 179.921 139.451 251.601 142.828 256.215 cv
147.913 263.165 170.184 264.035 169.294 250.934 cv
166.628 211.712 164.058 163.515 143.651 154.983 cv
cp
.917647 .498039 .486275 rgb
f
131.286 179.911 mo
134.252 204.678 140.543 252.392 143.162 255.97 cv
146.279 260.231 156.165 262.122 162.752 259.719 cv
165.746 258.628 169.238 256.222 168.881 250.963 cv
168.616 247.038 li
166.108 209.826 162.987 163.516 143.491 155.365 cv
142.004 154.743 140.657 154.826 139.372 155.617 cv
134.14 158.837 131.83 172.382 131.286 179.911 cv
cp
156.29 261.584 mo
150.644 261.585 144.817 259.634 142.494 256.46 cv
139.092 251.811 130.81 182.901 130.46 179.97 cv
130.455 179.93 li
130.458 179.891 li
131.007 172.214 133.412 158.313 138.937 154.913 cv
140.445 153.985 142.085 153.88 143.81 154.601 cv
163.778 162.949 166.787 207.593 169.441 246.982 cv
169.707 250.907 li
170.013 255.411 167.644 258.816 163.036 260.498 cv
161.002 261.24 158.662 261.584 156.29 261.584 cv
cp
.992157 .631373 .615686 rgb
f
53.2849 154.447 mo
61.6462 150.952 65.3298 169.115 66.0652 179.385 cv
66.0652 179.385 49.6301 248.146 46.2536 252.76 cv
41.1682 259.71 19.3889 255.892 21.6936 242.965 cv
27.9572 207.831 32.8772 162.979 53.2849 154.447 cv
cp
.917647 .498039 .486275 rgb
f
55.3352 154.418 mo
54.7273 154.418 54.0993 154.555 53.4445 154.829 cv
35.7204 162.239 29.6794 198.194 24.3493 229.917 cv
23.5837 234.474 22.8601 238.779 22.1008 243.039 cv
20.8918 249.821 26.6491 253.071 29.1809 254.153 cv
35.4865 256.851 43.3078 256.085 45.9196 252.515 cv
49.1652 248.08 65.071 181.758 65.6477 179.351 cv
65.1008 171.818 62.7898 158.298 57.5642 155.082 cv
56.8449 154.639 56.1062 154.418 55.3352 154.418 cv
cp
37.2658 256.604 mo
34.4074 256.604 31.4021 256.005 28.8552 254.915 cv
23.1198 252.463 20.361 248.081 21.2859 242.893 cv
22.0446 238.638 22.7673 234.335 23.5329 229.779 cv
28.8982 197.845 34.9797 161.652 53.1252 154.066 cv
53.2849 154.447 li
53.1252 154.066 li
54.8503 153.344 56.4904 153.448 57.9983 154.377 cv
63.5241 157.777 65.9284 171.677 66.4782 179.355 cv
66.4826 179.419 li
66.468 179.481 li
65.7961 182.292 49.9743 248.377 46.5876 253.005 cv
44.7644 255.496 41.1501 256.604 37.2658 256.604 cv
cp
.992157 .631373 .615686 rgb
f
82.5559 145.267 mo
76.323 146.538 68.4416 149.091 54.6784 153.89 cv
57.9372 188.766 37.3586 229.998 43.4133 258.204 cv
44.28 262.241 47.258 265.501 51.1643 266.84 cv
78.5075 276.218 115.605 279.34 141.332 271.05 cv
145.301 269.772 148.314 266.499 149.252 262.435 cv
155.55 235.159 144.036 160.527 143.651 154.983 cv
134.074 152.056 125.608 146.232 113.786 144.188 cv
103.128 150.612 95.8571 149.569 82.5559 145.267 cv
cp
1 1 .968627 rgb
f
55.1203 154.174 mo
56.6277 171.082 52.6218 189.37 48.7473 207.057 cv
44.6203 225.898 40.7219 243.694 43.8181 258.117 cv
44.6423 261.957 47.509 265.15 51.2985 266.449 cv
76.1252 274.963 113.553 279.567 141.205 270.657 cv
145.019 269.427 147.948 266.242 148.848 262.342 cv
154.148 239.386 146.864 183.322 144.121 162.216 cv
143.672 158.757 143.36 156.364 143.261 155.296 cv
139.59 154.151 136.134 152.616 132.48 150.993 cv
126.807 148.473 120.943 145.868 113.867 144.623 cv
102.944 151.16 95.5603 149.902 82.5324 145.694 cv
76.2429 146.989 68.0163 149.68 55.1203 154.174 cv
cp
106.552 276.311 mo
86.739 276.312 66.4621 272.525 51.03 267.232 cv
46.9675 265.839 43.8938 262.413 43.0085 258.291 cv
39.8747 243.692 43.7917 225.811 47.9387 206.881 cv
51.8244 189.141 55.8425 170.798 54.2663 153.928 cv
54.2365 153.606 li
54.5422 153.499 li
67.7209 148.904 76.0749 146.167 82.4734 144.861 cv
82.5803 144.839 li
82.6838 144.873 li
95.5852 149.046 102.839 150.303 113.572 143.834 cv
113.704 143.754 li
113.856 143.78 li
121.102 145.033 127.056 147.678 132.816 150.236 cv
136.535 151.888 140.048 153.449 143.772 154.587 cv
144.044 154.671 li
144.064 154.955 li
144.123 155.806 144.449 158.314 144.942 162.109 cv
147.689 183.256 154.989 239.427 149.655 262.529 cv
148.69 266.711 145.549 270.127 141.459 271.445 cv
130.837 274.868 118.781 276.311 106.552 276.311 cv
cp
.933333 .894118 .85098 rgb
f
84.5603 200.733 mo
84.4157 200.733 84.2746 200.657 84.1989 200.521 cv
84.0871 200.321 84.1589 200.069 84.3586 199.958 cv
96.9572 192.926 102.399 177.877 106.372 166.888 cv
106.592 166.28 li
106.575 166.259 106.561 166.259 106.545 166.259 cv
106.318 166.256 106.136 166.079 106.135 165.853 cv
106.134 165.501 106.348 165.371 106.44 165.331 cv
106.535 165.29 106.785 165.222 107.06 165.481 cv
107.32 165.725 107.51 166.175 107.37 166.562 cv
107.151 167.169 li
103.134 178.281 97.6306 193.499 84.7619 200.68 cv
84.698 200.716 84.6291 200.733 84.5603 200.733 cv
cp
f
86.7141 248.966 mo
86.657 248.966 86.5988 248.955 86.5432 248.929 cv
86.3352 248.835 86.2429 248.589 86.3371 248.381 cv
88.6037 243.39 90.5056 239.215 92.1076 235.701 cv
99.3103 219.893 100.417 217.464 101.239 214.088 cv
101.25 214.044 101.238 213.995 101.208 213.959 cv
101.182 213.928 101.154 213.919 101.118 213.916 cv
99.6462 213.991 98.1892 214.952 96.78 215.881 cv
95.0603 217.013 93.281 218.187 91.426 217.746 cv
91.1213 217.673 90.8767 217.467 90.7541 217.182 cv
90.633 216.9 90.6521 216.586 90.8064 216.32 cv
94.614 209.771 97.844 202.837 100.406 195.709 cv
100.484 195.495 100.721 195.382 100.936 195.46 cv
101.151 195.537 101.262 195.774 101.185 195.99 cv
98.6062 203.164 95.3552 210.144 91.5222 216.736 cv
91.4944 216.785 91.5027 216.828 91.5149 216.855 cv
91.5256 216.881 91.5529 216.925 91.6169 216.94 cv
93.1262 217.298 94.6794 216.273 96.3239 215.189 cv
97.8259 214.199 99.3786 213.175 101.076 213.089 cv
101.366 213.069 101.653 213.198 101.845 213.43 cv
102.042 213.668 102.115 213.986 102.043 214.284 cv
101.203 217.736 100.092 220.174 92.8611 236.044 cv
91.2595 239.559 89.3571 243.733 87.0915 248.724 cv
87.0217 248.877 86.8713 248.966 86.7141 248.966 cv
cp
f
91.5788 259.319 mo
91.4997 259.319 91.4201 259.297 91.3493 259.25 cv
91.1589 259.122 91.1081 258.865 91.2351 258.674 cv
96.3625 251.001 115.928 219.92 114.518 216.942 cv
114.42 216.735 114.509 216.489 114.715 216.391 cv
114.923 216.294 115.169 216.381 115.266 216.588 cv
117.185 220.638 92.1779 258.754 91.9236 259.135 cv
91.8435 259.254 91.7121 259.319 91.5788 259.319 cv
cp
f
75.8401 287.108 mo
68.6828 319.818 35.4514 314.094 29.8342 276.736 cv
24.6569 242.304 41.0129 210.026 46.8742 176.92 cv
50.8523 154.454 47.3044 157.525 54.6784 153.89 cv
59.3879 151.568 81.6653 141.819 82.5559 145.267 cv
97.1867 201.892 75.9607 286.556 75.8401 287.108 cv
cp
.992157 .631373 .615686 rgb
f
80.863 144.939 mo
75.924 144.939 59.8806 151.787 54.8615 154.261 cv
54.4011 154.488 53.9826 154.689 53.6023 154.872 cv
50.0207 156.593 50.0207 156.593 49.3816 162.328 cv
49.0456 165.344 48.5373 169.902 47.2819 176.992 cv
45.3654 187.818 42.2785 198.733 39.2932 209.288 cv
33.136 231.058 26.7697 253.569 30.2439 276.674 cv
31.6735 286.184 35.0051 294.218 39.8777 299.907 cv
44.2605 305.023 49.6726 307.94 55.1174 308.12 cv
64.7317 308.452 72.5178 300.353 75.4358 287.019 cv
75.4743 286.86 li
77.6208 278.04 96.0456 199.131 82.1555 145.37 cv
82.1355 145.294 82.0876 145.194 81.8933 145.105 cv
81.6462 144.992 81.2971 144.939 80.863 144.939 cv
cp
55.6672 308.958 mo
55.4753 308.958 55.2834 308.954 55.0901 308.948 cv
44.6696 308.603 32.6921 298.528 29.425 276.797 cv
25.9245 253.515 32.3156 230.918 38.4963 209.062 cv
41.4763 198.527 44.5573 187.632 46.467 176.848 cv
47.7175 169.783 48.2238 165.241 48.5588 162.236 cv
49.2356 156.162 49.323 156.01 53.2439 154.126 cv
53.6218 153.944 54.0373 153.744 54.4958 153.518 cv
57.5119 152.032 78.3874 142.586 82.2385 144.353 cv
82.7155 144.571 82.8923 144.914 82.9568 145.163 cv
96.8977 199.12 78.4304 278.214 76.2785 287.055 cv
76.2444 287.198 li
73.2942 300.68 65.4397 308.958 55.6672 308.958 cv
cp
.917647 .498039 .486275 rgb
f
65.5183 255.417 mo
66.7756 255.994 67.9377 256.892 68.8567 257.971 cv
71.5407 261.121 69.5617 266.07 65.4538 266.567 cv
56.5525 267.646 51.028 262.02 46.4177 261.25 cv
42.4094 260.579 35.4177 263.179 32.8503 258.594 cv
30.7038 254.761 32.9821 252.593 36.3488 251.272 cv
40.406 249.679 45.5695 252.192 49.5031 252.899 cv
54.7194 253.837 60.6164 253.165 65.5183 255.417 cv
cp
f
44.7321 260.715 mo
45.3537 260.715 45.9421 260.75 46.486 260.84 cv
48.134 261.116 49.8278 261.957 51.7893 262.929 cv
55.3093 264.675 59.6911 266.845 65.404 266.157 cv
67.1945 265.939 68.6618 264.791 69.3283 263.083 cv
69.9856 261.399 69.6916 259.589 68.5417 258.24 cv
67.6452 257.188 66.5398 256.341 65.3454 255.793 cv
62.259 254.375 58.6872 254.136 55.2331 253.906 cv
53.3049 253.777 51.3108 253.644 49.4299 253.306 cv
48.3176 253.106 47.1325 252.771 45.8786 252.417 cv
42.7956 251.546 39.302 250.557 36.5002 251.657 cv
34.3586 252.498 33.0481 253.552 32.6052 254.792 cv
32.2409 255.811 32.445 257.023 33.2116 258.392 cv
34.8591 261.334 38.5139 261.085 42.049 260.842 cv
42.9831 260.778 43.8879 260.715 44.7321 260.715 cv
cp
63.2155 267.118 mo
58.3689 267.118 54.5617 265.229 51.4216 263.672 cv
49.5193 262.728 47.8762 261.913 46.3493 261.657 cv
45.1628 261.46 43.6784 261.56 42.1057 261.669 cv
38.4914 261.917 34.3933 262.197 32.4895 258.797 cv
31.6003 257.21 31.3772 255.768 31.8259 254.513 cv
32.3596 253.017 33.7898 251.832 36.198 250.886 cv
39.258 249.685 42.8952 250.714 46.1037 251.62 cv
47.3376 251.968 48.5036 252.298 49.5764 252.491 cv
51.4118 252.821 53.3825 252.953 55.2883 253.08 cv
58.8171 253.315 62.466 253.559 65.6906 255.04 cv
66.9944 255.639 68.198 256.56 69.1716 257.703 cv
70.5227 259.288 70.8698 261.412 70.0998 263.383 cv
69.3205 265.38 67.6018 266.724 65.5036 266.978 cv
64.716 267.074 63.9533 267.118 63.2155 267.118 cv
cp
.992157 .631373 .615686 rgb
f
59.7512 302.314 mo
59.6867 302.314 59.6208 302.298 59.5598 302.267 cv
48.1184 296.303 42.0197 283.46 38.4279 274.318 cv
34.799 265.083 31.9519 255.47 29.9655 245.747 cv
29.9196 245.522 30.0642 245.303 30.2883 245.258 cv
30.51 245.211 30.7307 245.357 30.7766 245.581 cv
32.7536 255.257 35.5871 264.824 39.1985 274.015 cv
42.7419 283.033 48.7473 295.697 59.9426 301.533 cv
60.1452 301.638 60.2238 301.888 60.1184 302.091 cv
60.0446 302.233 59.9001 302.314 59.7512 302.314 cv
cp
.917647 .498039 .486275 rgb
f
76.0036 229.615 mo
75.968 229.615 75.9319 229.611 75.8957 229.601 cv
75.675 229.542 75.5437 229.314 75.6037 229.093 cv
80.1604 212.144 82.2585 194.654 81.8401 177.109 cv
81.8347 176.88 82.0158 176.691 82.2439 176.685 cv
82.4695 176.685 82.6628 176.86 82.6682 177.089 cv
83.0881 194.714 80.9802 212.283 76.403 229.308 cv
76.3532 229.493 76.1862 229.615 76.0036 229.615 cv
cp
f
118.333 285.79 mo
125.49 318.5 157.065 312.776 162.682 275.418 cv
167.86 240.985 153.16 208.708 147.299 175.602 cv
143.32 153.135 146.868 156.206 139.494 152.571 cv
134.785 150.25 112.508 140.501 111.617 143.948 cv
96.9861 200.574 118.212 285.237 118.333 285.79 cv
cp
.992157 .631373 .615686 rgb
f
118.737 285.701 mo
121.651 299.02 129.164 307.081 138.324 306.802 cv
147.939 306.484 159.073 296.637 162.273 275.356 cv
165.848 251.579 159.806 228.432 153.965 206.048 cv
151.373 196.12 148.693 185.853 146.89 175.674 cv
145.634 168.583 145.127 164.026 144.791 161.009 cv
144.152 155.275 144.152 155.275 140.57 153.553 cv
140.19 153.371 139.772 153.17 139.311 152.943 cv
133.851 150.251 115.342 142.381 112.279 143.787 cv
112.085 143.876 112.037 143.976 112.017 144.052 cv
98.1277 197.807 116.551 276.719 118.698 285.541 cv
118.737 285.701 li
cp
137.823 307.638 mo
128.472 307.638 120.879 299.36 117.927 285.878 cv
117.893 285.736 li
115.742 276.895 97.2756 197.797 111.216 143.845 cv
111.28 143.596 111.457 143.253 111.934 143.034 cv
115.792 141.265 136.661 150.713 139.676 152.2 cv
140.135 152.425 140.551 152.626 140.929 152.807 cv
144.849 154.692 144.937 154.843 145.614 160.918 cv
145.949 163.923 146.455 168.464 147.706 175.529 cv
149.503 185.676 152.177 195.926 154.765 205.839 cv
160.629 228.304 166.692 251.534 163.092 275.479 cv
159.821 297.231 148.309 307.3 138.351 307.63 cv
138.175 307.636 137.998 307.638 137.823 307.638 cv
cp
.917647 .498039 .486275 rgb
f
126.329 255.417 mo
125.072 255.994 123.91 256.892 122.99 257.971 cv
120.306 261.121 122.286 266.07 126.393 266.567 cv
135.295 267.646 140.819 262.02 145.429 261.25 cv
149.438 260.579 156.429 263.179 158.997 258.594 cv
161.143 254.761 158.865 252.593 155.498 251.272 cv
151.441 249.679 146.277 252.192 142.344 252.899 cv
137.128 253.837 131.231 253.165 126.329 255.417 cv
cp
f
126.502 255.793 mo
125.307 256.341 124.202 257.188 123.305 258.24 cv
122.155 259.589 121.861 261.399 122.518 263.083 cv
123.185 264.791 124.652 265.939 126.443 266.157 cv
132.156 266.847 136.538 264.676 140.057 262.929 cv
142.019 261.957 143.714 261.116 145.361 260.84 cv
146.645 260.626 148.176 260.73 149.799 260.842 cv
153.333 261.085 156.987 261.336 158.635 258.392 cv
159.402 257.023 159.606 255.812 159.242 254.792 cv
158.8 253.552 157.489 252.498 155.346 251.657 cv
152.546 250.557 149.051 251.546 145.968 252.417 cv
144.715 252.771 143.529 253.106 142.418 253.306 cv
140.537 253.644 138.543 253.777 136.614 253.906 cv
133.16 254.136 129.589 254.375 126.502 255.793 cv
126.502 255.793 li
cp
128.632 267.118 mo
127.893 267.118 127.132 267.074 126.343 266.978 cv
124.245 266.724 122.527 265.38 121.748 263.383 cv
120.977 261.412 121.324 259.288 122.676 257.703 cv
123.649 256.56 124.852 255.639 126.156 255.04 cv
129.382 253.559 133.03 253.315 136.558 253.08 cv
138.465 252.953 140.435 252.821 142.27 252.491 cv
143.343 252.298 144.509 251.968 145.743 251.62 cv
148.952 250.714 152.589 249.686 155.649 250.886 cv
158.057 251.832 159.487 253.017 160.021 254.513 cv
160.47 255.768 160.247 257.21 159.358 258.797 cv
157.454 262.198 153.357 261.917 149.741 261.669 cv
148.17 261.56 146.684 261.459 145.498 261.657 cv
143.971 261.913 142.328 262.728 140.426 263.672 cv
137.285 265.229 133.478 267.118 128.632 267.118 cv
cp
.992157 .631373 .615686 rgb
f
136.05 297.942 mo
135.908 297.942 135.769 297.869 135.693 297.738 cv
135.577 297.541 135.643 297.287 135.841 297.172 cv
145.652 291.425 152.787 280.388 155.417 266.888 cv
157.819 254.556 156.435 241.731 154.581 229.71 cv
154.546 229.484 154.701 229.273 154.926 229.238 cv
155.152 229.203 155.364 229.357 155.399 229.584 cv
157.264 241.679 158.656 254.589 156.23 267.047 cv
153.554 280.78 146.275 292.02 136.259 297.886 cv
136.193 297.924 136.121 297.942 136.05 297.942 cv
cp
.917647 .498039 .486275 rgb
f
121.825 239.955 mo
121.66 239.955 121.504 239.855 121.439 239.691 cv
115.699 224.994 111.939 209.585 110.265 193.893 cv
110.241 193.666 110.406 193.463 110.633 193.438 cv
110.856 193.412 111.064 193.578 111.089 193.805 cv
112.755 209.423 116.497 224.76 122.211 239.39 cv
122.294 239.603 122.188 239.843 121.975 239.926 cv
121.926 239.946 121.875 239.955 121.825 239.955 cv
cp
f
115.994 182.921 mo
111.418 170.895 113.224 162.815 110.011 154.59 cv
107.203 147.402 101.218 142.394 99.9704 129.703 cv
99.2087 121.955 104.021 125.309 104.081 122.167 cv
104.114 120.478 106.364 119.309 107.764 120.254 cv
107.668 118.151 110.678 116.719 112.249 118.123 cv
111.489 116.21 115.049 113.61 117.636 117.765 cv
118.348 118.909 118.788 120.21 119.546 121.324 cv
122.151 125.158 126.084 125.352 124.031 132.402 cv
122.937 136.155 121.499 139.855 121.17 143.75 cv
120.254 154.609 127.96 164.293 129.71 175.048 cv
124.704 176.797 120.028 179.481 115.994 182.921 cv
cp
.984314 .603922 .545098 rgb
f
106.615 120.331 mo
106.283 120.331 105.933 120.417 105.6 120.59 cv
104.93 120.938 104.508 121.545 104.495 122.175 cv
104.467 123.672 103.488 124.007 102.626 124.302 cv
101.37 124.732 99.945 125.219 100.383 129.662 cv
101.216 138.14 104.234 143.234 106.897 147.728 cv
108.221 149.963 109.472 152.073 110.397 154.439 cv
111.885 158.251 112.316 162.076 112.772 166.127 cv
113.293 170.758 113.881 175.99 116.176 182.226 cv
120.077 178.989 124.467 176.485 129.243 174.774 cv
128.496 170.501 126.792 166.324 125.142 162.281 cv
122.717 156.338 120.211 150.193 120.758 143.715 cv
121.012 140.696 121.932 137.767 122.821 134.935 cv
123.098 134.053 123.376 133.171 123.634 132.286 cv
125.038 127.462 123.6 126.106 121.611 124.23 cv
120.838 123.5 119.961 122.672 119.203 121.557 cv
118.777 120.931 118.449 120.25 118.132 119.592 cv
117.871 119.051 117.6 118.492 117.285 117.984 cv
115.994 115.91 114.504 115.69 113.54 116.176 cv
112.784 116.558 112.385 117.346 112.634 117.97 cv
113.28 119.601 li
111.972 118.431 li
111.382 117.904 110.435 117.831 109.559 118.247 cv
108.684 118.663 108.141 119.443 108.177 120.235 cv
108.216 121.058 li
107.533 120.597 li
107.27 120.42 106.952 120.331 106.615 120.331 cv
cp
115.815 183.617 mo
115.607 183.068 li
113.104 176.492 112.491 171.035 111.949 166.219 cv
111.5 162.224 111.076 158.451 109.626 154.74 cv
108.726 152.438 107.492 150.355 106.185 148.15 cv
103.478 143.582 100.41 138.404 99.5583 129.743 cv
99.0573 124.648 100.965 123.995 102.358 123.518 cv
103.254 123.212 103.65 123.04 103.667 122.159 cv
103.685 121.226 104.28 120.343 105.219 119.855 cv
105.937 119.483 106.728 119.407 107.406 119.626 cv
107.598 118.745 108.256 117.95 109.204 117.499 cv
110.058 117.093 110.981 117.047 111.743 117.34 cv
111.831 116.581 112.35 115.849 113.167 115.437 cv
114.398 114.816 116.399 114.996 117.987 117.547 cv
118.327 118.092 118.607 118.672 118.877 119.233 cv
119.195 119.893 119.496 120.516 119.887 121.092 cv
120.594 122.132 121.4 122.892 122.179 123.627 cv
124.216 125.548 125.974 127.207 124.428 132.518 cv
124.169 133.408 123.89 134.296 123.611 135.183 cv
122.735 137.972 121.83 140.857 121.583 143.785 cv
121.052 150.065 123.411 155.846 125.909 161.968 cv
127.619 166.161 129.388 170.498 130.118 174.982 cv
130.174 175.325 li
129.845 175.439 li
124.855 177.182 120.285 179.805 116.262 183.236 cv
115.815 183.617 li
cp
.92549 .47451 .360784 rgb
f
110.142 128.472 mo
110.031 128.472 109.921 128.427 109.84 128.339 cv
108.636 127.045 107.793 125.377 107.463 123.642 cv
107.421 123.417 107.568 123.2 107.792 123.157 cv
108.016 123.115 108.233 123.262 108.276 123.487 cv
108.577 125.071 109.347 126.594 110.446 127.776 cv
110.601 127.943 110.592 128.205 110.425 128.361 cv
110.344 128.435 110.244 128.472 110.142 128.472 cv
cp
f
117.061 127.963 mo
116.97 127.963 116.881 127.933 116.804 127.873 cv
114.978 126.427 113.539 124.527 112.641 122.38 cv
112.552 122.169 112.652 121.926 112.863 121.838 cv
113.074 121.75 113.317 121.85 113.405 122.06 cv
114.249 124.08 115.601 125.865 117.318 127.224 cv
117.498 127.366 117.528 127.626 117.385 127.805 cv
117.304 127.909 117.183 127.963 117.061 127.963 cv
cp
f
113.576 133.619 mo
112.387 133.619 111.2 133.51 110.037 133.293 cv
109.812 133.251 109.664 133.034 109.706 132.809 cv
109.748 132.585 109.963 132.436 110.189 132.479 cv
112.77 132.963 115.483 132.883 118.032 132.249 cv
118.256 132.194 118.478 132.329 118.534 132.551 cv
118.589 132.773 118.454 132.997 118.232 133.053 cv
116.717 133.429 115.145 133.619 113.576 133.619 cv
cp
f
109.661 168.142 mo
109.296 168.925 109.254 169.83 109.521 170.652 cv
130.533 235.208 138.319 255.739 143.285 261.236 cv
154.205 273.325 169.154 265.855 169.294 250.934 cv
169.424 237.084 141.495 180.754 128.814 159.225 cv
128.053 157.933 126.542 157.288 125.079 157.617 cv
117.156 159.398 112.371 162.33 109.661 168.142 cv
cp
.917647 .498039 .486275 rgb
f
109.661 168.142 mo
110.036 168.317 li
109.721 168.99 109.677 169.795 109.916 170.524 cv
130.388 233.425 138.571 255.4 143.592 260.959 cv
148.301 266.172 154.297 268.077 159.631 266.052 cv
165.183 263.946 168.813 258.01 168.88 250.93 cv
169.011 236.925 140.869 180.507 128.458 159.435 cv
127.788 158.298 126.466 157.73 125.17 158.021 cv
116.971 159.864 112.587 162.847 110.036 168.317 cv
109.661 168.142 li
cp
155.311 267.675 mo
150.995 267.675 146.612 265.537 142.978 261.513 cv
137.868 255.855 129.642 233.808 109.128 170.78 cv
108.822 169.84 108.878 168.841 109.286 167.967 cv
111.924 162.31 116.619 159.095 124.988 157.214 cv
126.637 156.844 128.318 157.567 129.171 159.015 cv
141.618 180.147 169.841 236.79 169.708 250.938 cv
169.638 258.361 165.798 264.598 159.924 266.827 cv
158.421 267.396 156.87 267.675 155.311 267.675 cv
cp
.992157 .631373 .615686 rgb
f
75.406 182.921 mo
79.9821 170.895 78.175 162.815 81.3884 154.59 cv
84.1965 147.402 90.1819 142.394 91.4294 129.703 cv
92.1911 121.955 87.3791 125.309 87.3186 122.167 cv
87.2863 120.478 85.0354 119.309 83.6355 120.254 cv
83.7321 118.151 80.7214 116.719 79.1516 118.123 cv
79.9109 116.21 76.3508 113.61 73.7639 117.765 cv
73.0515 118.909 72.612 120.21 71.8547 121.324 cv
69.2487 125.158 65.3161 125.352 67.3689 132.402 cv
68.4621 136.155 69.9011 139.855 70.2297 143.75 cv
71.1462 154.609 63.4406 164.293 61.6906 175.048 cv
66.6955 176.797 71.3723 179.481 75.406 182.921 cv
cp
.984314 .603922 .545098 rgb
f
62.1569 174.774 mo
66.9323 176.485 71.323 178.989 75.2238 182.226 cv
77.5188 175.99 78.1071 170.758 78.6281 166.127 cv
79.0832 162.076 79.5139 158.25 81.0027 154.439 cv
81.927 152.073 83.1779 149.963 84.5022 147.728 cv
87.1657 143.234 90.1838 138.14 91.0173 129.662 cv
91.4543 125.219 90.03 124.732 88.7741 124.302 cv
87.9113 124.007 86.9333 123.672 86.9045 122.175 cv
86.8928 121.545 86.469 120.938 85.799 120.59 cv
85.1296 120.242 84.3889 120.245 83.8669 120.597 cv
83.1838 121.058 li
83.2219 120.235 li
83.258 119.443 82.716 118.663 81.8405 118.247 cv
80.9646 117.831 80.0178 117.904 79.4275 118.431 cv
78.1198 119.601 li
78.7668 117.97 li
79.0144 117.346 78.6164 116.558 77.8601 116.176 cv
76.8962 115.69 75.407 115.91 74.1154 117.984 cv
73.799 118.492 73.529 119.051 73.2683 119.592 cv
72.9509 120.251 72.6223 120.931 72.1965 121.557 cv
71.4387 122.672 70.5617 123.5 69.7883 124.23 cv
67.799 126.106 66.3615 127.462 67.7668 132.286 cv
68.0241 133.171 68.3005 134.051 68.5779 134.933 cv
69.4675 137.766 70.3874 140.695 70.6423 143.715 cv
71.1892 150.193 68.6823 156.338 66.258 162.281 cv
64.6086 166.324 62.9045 170.502 62.1569 174.774 cv
cp
75.5842 183.617 mo
75.1374 183.236 li
71.1154 179.805 66.5451 177.182 61.5544 175.439 cv
61.2263 175.325 li
61.2819 174.982 li
62.0114 170.498 63.7805 166.162 65.4909 161.968 cv
67.9885 155.847 70.3474 150.065 69.8171 143.785 cv
69.57 140.856 68.6638 137.971 67.7878 135.181 cv
67.509 134.294 67.2307 133.407 66.9714 132.518 cv
65.425 127.207 67.1838 125.548 69.2199 123.627 cv
69.9992 122.892 70.8049 122.132 71.5119 121.091 cv
71.9035 120.516 72.2043 119.893 72.5227 119.233 cv
72.7927 118.672 73.0725 118.092 73.4123 117.547 cv
75.0007 114.996 77.0012 114.817 78.2331 115.437 cv
79.0495 115.849 79.5691 116.581 79.657 117.34 cv
80.4196 117.047 81.3415 117.093 82.196 117.5 cv
83.1447 117.95 83.8015 118.745 83.9934 119.626 cv
84.6726 119.407 85.4631 119.483 86.1809 119.855 cv
87.1198 120.343 87.7146 121.226 87.7326 122.159 cv
87.7492 123.04 88.1462 123.212 89.0417 123.518 cv
90.4348 123.995 92.342 124.648 91.8415 129.743 cv
90.99 138.404 87.9216 143.582 85.2146 148.15 cv
83.9079 150.355 82.6736 152.438 81.7741 154.74 cv
80.3244 158.451 79.9001 162.224 79.4509 166.219 cv
78.9089 171.034 78.2951 176.492 75.7932 183.068 cv
75.5842 183.617 li
cp
.92549 .47451 .360784 rgb
f
74.0412 128.503 mo
73.9333 128.503 73.8249 128.46 73.7439 128.376 cv
73.5847 128.212 73.5891 127.95 73.7536 127.791 cv
75.487 126.115 76.7634 123.904 77.3488 121.566 cv
77.4045 121.344 77.6281 121.211 77.8508 121.265 cv
78.0725 121.32 78.2077 121.546 78.1521 121.767 cv
77.5295 124.254 76.1721 126.605 74.3293 128.386 cv
74.2487 128.464 74.1452 128.503 74.0412 128.503 cv
cp
f
78.6487 130.423 mo
78.5593 130.423 78.4699 130.395 78.3938 130.336 cv
78.2141 130.194 78.1819 129.935 78.323 129.755 cv
79.5588 128.174 80.3488 126.287 80.6076 124.297 cv
80.6364 124.07 80.8445 123.909 81.071 123.94 cv
81.2981 123.969 81.4577 124.177 81.4284 124.403 cv
81.1506 126.54 80.3025 128.567 78.9748 130.264 cv
78.8933 130.369 78.7717 130.423 78.6487 130.423 cv
cp
f
82.5632 133.284 mo
82.4577 133.284 82.3523 133.243 82.2717 133.164 cv
82.1091 133.002 82.1081 132.74 82.2693 132.578 cv
84.0862 130.748 85.2439 128.225 85.4455 125.654 cv
85.4631 125.426 85.6638 125.252 85.8904 125.274 cv
86.1184 125.292 86.2888 125.491 86.2707 125.719 cv
86.0539 128.482 84.8098 131.194 82.8571 133.161 cv
82.7761 133.243 82.6696 133.284 82.5632 133.284 cv
cp
f
80.2121 135.566 mo
80.1882 135.566 80.1638 135.564 80.1394 135.559 cv
77.0398 135.009 74.2029 133.392 72.1501 131.005 cv
72.0012 130.831 72.0212 130.57 72.1945 130.421 cv
72.3674 130.273 72.6291 130.292 72.7785 130.465 cv
74.6784 132.675 77.4143 134.235 80.2839 134.744 cv
80.5095 134.784 80.6594 134.999 80.6194 135.224 cv
80.5837 135.424 80.4089 135.566 80.2121 135.566 cv
cp
f
83.3908 166.308 mo
83.7292 167.104 83.74 168.008 83.4445 168.821 cv
60.2536 232.627 51.7746 252.881 46.6252 258.208 cv
35.3015 269.919 20.6145 261.945 20.9812 247.028 cv
21.3215 233.181 51.1462 177.832 64.551 156.746 cv
65.3552 155.481 66.8879 154.888 68.3386 155.266 cv
76.196 157.315 80.8791 160.407 83.3908 166.308 cv
cp
.917647 .498039 .486275 rgb
f
67.4548 155.567 mo
66.4333 155.567 65.4655 156.079 64.9001 156.968 cv
51.7805 177.607 21.739 233.036 21.3952 247.039 cv
21.2209 254.116 24.6482 260.172 30.1257 262.465 cv
35.3874 264.669 41.4445 262.97 46.3278 257.92 cv
51.5339 252.535 60.4587 230.85 83.0554 168.68 cv
83.3171 167.959 83.3005 167.154 83.01 166.47 cv
80.6467 160.917 76.3659 157.787 68.2341 155.667 cv
67.9748 155.599 67.7131 155.567 67.4548 155.567 cv
cp
34.8327 264.243 mo
33.1223 264.243 31.4304 263.91 29.8059 263.229 cv
24.0114 260.802 20.385 254.44 20.5671 247.018 cv
20.9148 232.873 51.0442 177.221 64.2014 156.524 cv
65.1032 155.106 66.8069 154.439 68.4431 154.865 cv
76.7434 157.03 81.3279 160.404 83.7712 166.146 cv
84.1491 167.033 84.1711 168.034 83.8337 168.963 cv
61.1911 231.258 52.2219 253.014 46.9226 258.495 cv
43.2844 262.257 39.0061 264.242 34.8327 264.243 cv
cp
.992157 .631373 .615686 rgb
f
131.397 198.844 mo
131.384 198.844 131.371 198.844 131.357 198.842 cv
131.131 198.821 130.963 198.619 130.985 198.391 cv
132.003 187.703 129.807 176.584 124.803 167.085 cv
124.697 166.882 124.774 166.632 124.976 166.526 cv
125.178 166.42 125.429 166.497 125.536 166.699 cv
130.615 176.339 132.842 187.623 131.809 198.47 cv
131.789 198.684 131.608 198.844 131.397 198.844 cv
cp
f
154.822 257.393 mo
153.775 257.393 152.726 257.259 151.704 256.986 cv
148.137 256.035 145.127 253.448 143.648 250.066 cv
143.557 249.856 143.653 249.612 143.862 249.52 cv
144.072 249.43 144.316 249.525 144.407 249.734 cv
145.764 252.84 148.642 255.313 151.917 256.186 cv
155.191 257.059 158.919 256.35 161.643 254.334 cv
161.827 254.197 162.086 254.236 162.222 254.42 cv
162.358 254.603 162.32 254.863 162.135 254.999 cv
160.02 256.565 157.428 257.393 154.822 257.393 cv
cp
f
35.0217 254.646 mo
34.4431 254.646 33.864 254.596 33.2898 254.491 cv
30.9504 254.065 28.7898 252.873 27.2058 251.133 cv
27.052 250.964 27.0642 250.703 27.2331 250.548 cv
27.4016 250.395 27.6638 250.406 27.8181 250.576 cv
29.28 252.181 31.2761 253.283 33.4382 253.676 cv
38.6242 254.625 44.2761 250.771 45.2922 245.596 cv
45.3366 245.372 45.5549 245.229 45.778 245.27 cv
46.0022 245.314 46.1486 245.532 46.1047 245.756 cv
45.1189 250.778 40.0959 254.646 35.0217 254.646 cv
cp
f
46.489 215.407 mo
46.343 215.407 46.2014 215.33 46.1257 215.193 cv
46.0158 214.993 46.0886 214.741 46.2888 214.631 cv
53.843 210.473 59.906 203.456 62.9226 195.378 cv
63.0027 195.164 63.2414 195.054 63.4548 195.134 cv
63.6692 195.214 63.778 195.454 63.698 195.668 cv
60.613 203.928 54.4133 211.104 46.6882 215.356 cv
46.6252 215.39 46.5564 215.407 46.489 215.407 cv
cp
f
38.2077 195.091 mo
38.1936 195.091 38.1789 195.09 38.1643 195.089 cv
37.9372 195.065 37.7717 194.862 37.7956 194.634 cv
38.6648 186.287 40.0969 177.915 42.0505 169.751 cv
42.1037 169.529 42.3249 169.39 42.55 169.444 cv
42.7722 169.498 42.9089 169.721 42.8562 169.944 cv
40.9099 178.072 39.4846 186.408 38.6189 194.72 cv
38.5969 194.933 38.4172 195.091 38.2077 195.091 cv
cp
f
159.273 198.851 mo
159.056 198.851 158.874 198.682 158.86 198.463 cv
158.256 188.725 155.22 179.194 150.085 170.899 cv
149.965 170.705 150.024 170.45 150.218 170.329 cv
150.414 170.209 150.669 170.269 150.789 170.463 cv
155.997 178.874 159.073 188.539 159.686 198.412 cv
159.701 198.639 159.527 198.836 159.3 198.85 cv
159.291 198.85 159.282 198.851 159.273 198.851 cv
cp
f
187.293 .000132031 mo
150.81 .000132031 121.236 17.924 121.236 40.0343 cv
121.236 54.7047 134.257 67.5324 153.676 74.504 cv
155.247 75.068 155.795 77.0118 154.746 78.3107 cv
140.964 95.3722 li
140.518 95.923 141.131 96.695 141.768 96.3864 cv
165.293 85.0045 li
172.115 81.7037 179.604 80.0612 187.183 80.0685 cv
187.219 80.0685 187.256 80.0685 187.293 80.0685 cv
223.774 80.0685 253.348 62.1447 253.348 40.0343 cv
253.348 17.924 223.774 .000132031 187.293 .000132031 cv
cp
.592157 .819608 .858824 rgb
f
162.927 39.9782 mo
162.927 43.6237 164.902 46.8898 168.37 46.8898 cv
171.864 46.8898 173.839 43.6744 173.839 39.8009 cv
173.839 36.4088 172.067 32.8644 168.395 32.8644 cv
164.751 32.8644 162.927 36.2316 162.927 39.9782 cv
cp
176.169 39.6998 mo
176.169 45.5734 172.598 48.6871 168.244 48.6871 cv
163.737 48.6871 160.573 45.1935 160.573 40.0289 cv
160.573 34.611 163.94 31.067 168.497 31.067 cv
173.155 31.067 176.169 34.6364 176.169 39.6998 cv
cp
1 1 1 rgb
f
193.407 40.9152 mo
193.281 38.5353 193.129 35.6744 193.154 33.548 cv
193.078 33.548 li
192.496 35.548 191.787 37.6744 190.926 40.0289 cv
187.914 48.3073 li
186.243 48.3073 li
183.483 40.1808 li
182.673 37.7755 181.99 35.5734 181.509 33.548 cv
181.458 33.548 li
181.407 35.6744 181.281 38.5353 181.129 41.0924 cv
180.674 48.4088 li
178.572 48.4088 li
179.761 31.3453 li
182.572 31.3453 li
185.483 39.5988 li
186.192 41.6998 186.774 43.5734 187.205 45.3453 cv
187.28 45.3453 li
187.711 43.6237 188.318 41.7501 189.078 39.5988 cv
192.116 31.3453 li
194.926 31.3453 li
195.99 48.4088 li
193.838 48.4088 li
193.407 40.9152 li
cp
f
212.368 47.6491 mo
211.381 48.0036 209.43 48.5861 207.127 48.5861 cv
204.545 48.5861 202.418 47.9279 200.747 46.3327 cv
199.279 44.9152 198.367 42.6364 198.367 39.9782 cv
198.392 34.8898 201.886 31.1681 207.607 31.1681 cv
209.583 31.1681 211.127 31.5983 211.861 31.9528 cv
211.33 33.7506 li
210.418 33.3453 209.278 33.0162 207.557 33.0162 cv
203.405 33.0162 200.696 35.5988 200.696 39.8771 cv
200.696 44.2062 203.304 46.7633 207.279 46.7633 cv
208.721 46.7633 209.71 46.5607 210.216 46.3073 cv
210.216 41.2189 li
206.748 41.2189 li
206.748 39.4464 li
212.368 39.4464 li
212.368 47.6491 li
cp
f
44.9265 99.6813 mo
44.7063 99.6813 44.4865 99.5944 44.3239 99.4215 cv
38.363 93.1017 30.3488 88.9098 21.758 87.6173 cv
21.3059 87.549 20.9944 87.1276 21.0622 86.6754 cv
21.1306 86.2233 21.55 85.9108 22.0046 85.9801 cv
30.9597 87.3268 39.3142 91.6974 45.5285 98.2853 cv
45.842 98.6178 45.8269 99.1422 45.4939 99.4557 cv
45.3342 99.6061 45.1301 99.6813 44.9265 99.6813 cv
cp
.592157 .819608 .858824 rgb
f
26.8972 65.6329 mo
26.6692 65.6329 26.4416 65.5392 26.278 65.3551 cv
19.6364 57.8864 10.55 52.8673 .691617 51.2223 cv
.240933 51.1471 -.0637545 50.7203 .0114408 50.2692 cv
.0866361 49.818 .510952 49.5133 .964566 49.589 cv
11.1941 51.296 20.6233 56.5045 27.5158 64.255 cv
27.8195 64.5963 27.7888 65.1198 27.447 65.4235 cv
27.2893 65.5636 27.093 65.6329 26.8972 65.6329 cv
cp
f
50.7893 71.4108 mo
50.5178 71.4108 50.2522 71.2775 50.0935 71.0324 cv
44.3947 62.2277 40.0066 52.6608 37.051 42.5968 cv
36.9221 42.1583 37.1735 41.6979 37.612 41.569 cv
38.0505 41.4406 38.511 41.6915 38.6403 42.13 cv
41.55 52.0407 45.8713 61.462 51.4836 70.1329 cv
51.7321 70.5167 51.6223 71.0294 51.2385 71.278 cv
51.0993 71.3678 50.9436 71.4108 50.7893 71.4108 cv
cp
f
168.212 115.498 mo
167.835 115.498 167.494 115.238 167.406 114.855 cv
165.593 106.934 168.314 98.2936 174.338 92.8414 cv
174.676 92.5343 175.2 92.5602 175.508 92.9 cv
175.814 93.2389 175.788 93.7623 175.449 94.0695 cv
169.948 99.048 167.365 107.253 169.02 114.485 cv
169.122 114.931 168.843 115.375 168.397 115.477 cv
168.336 115.491 168.273 115.498 168.212 115.498 cv
cp
f
173.74 128.68 mo
173.361 128.68 173.019 128.418 172.933 128.032 cv
172.834 127.587 173.114 127.144 173.56 127.044 cv
180.549 125.482 187.704 125.074 194.824 125.832 cv
195.279 125.881 195.608 126.288 195.56 126.743 cv
195.511 127.198 195.101 127.526 194.649 127.479 cv
187.707 126.74 180.734 127.137 173.922 128.66 cv
173.861 128.673 173.8 128.68 173.74 128.68 cv
cp
f
181.398 113.18 mo
181.236 113.18 181.072 113.132 180.928 113.033 cv
180.552 112.773 180.458 112.257 180.717 111.881 cv
184.927 105.788 192.138 101.763 199.535 101.377 cv
199.988 101.348 200.381 101.703 200.405 102.16 cv
200.428 102.617 200.078 103.006 199.621 103.03 cv
192.726 103.39 186.005 107.142 182.08 112.822 cv
181.92 113.055 181.661 113.18 181.398 113.18 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 25.0.0
%%For: (Tom) ()
%%Title: (Emotional people_01UNG-01.eps)
%%CreationDate: 4/25/2021 12:04 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KB3Q=sZLIbe4O=!3#n.#J`,t`IpPa)9g=RYQ`n=Hb!b@Osi*H5trU"NWmZC&ga@QI!mbL$&oQ71;>h'K$Mq(iS?`Y5#<r]du
%'#(8AZT@SR63ehp.n0*Vs!B(a(3^+F$Onmu@%t0=cM4!n:GQ8;8c3J:RVS/rQ0*8'RO^359@ZqJhRJnUqNe7Z2R:BmQYbq]TiA&k
%Rp%@SF/SNP_HLo_=tCChX7^MARF2t6JEhYKIbB7TTEG+[i9"FL%%uECZO'Q_^9RLPcBH5m+TY489YK10*#BR=HF?tX<^'2edtK[(
%?1/PD=oJMF"q-*6VVmN7jham'<GM)lWHKfeYrSAl/nS!c22!gM.h)ReqT#rBn8BM0!UcR_JcFVFG4?sX=f,0@kAdr>QZ3GU%CDJm
%"8K40+,C:,+Cp?VM*&4K.+_)EAq:IHn@VGVRe>opcMZgn_^TP'.Hum?KH?,0i+HWUZk'\9[934u?Ku5JRkN:Y3A/gN]>a5X?I1e5
%CV`*7;PF)q;Ja4)8V0BY"<5m=T`jD`5@6!RktjIm8,otKp9OAO65+=E>&*"&ge3@k.%@@0HM1PDnP.Y%[VCN=??Mke.YRG&pO,7P
%1YQLW_&iC@+&D_#W([IiGD"=pg9.\&m)AX9n8u)>%CbWAj'q,A&/"PO,&L3L8\LL0A#PNhOT.[rB>T[Y,PSC40s&.C/6(C;KKNAj
%keM<oZa#EuY>k'ceM816"+OSZ/?chm-rl>q?e`?Bhk5m.bq=_N#Fe`gTNK$js7tP!s"-@c0"'Vu:[6J2D67hXrTAZ/$i0'r+gk[u
%261jZg3dZ$n2'ttSXQ:"R+eTRF3k0i*k07%Mm_dj*Psl'KbXP%^852ms!IO_/h,/*FpAF]WI-:^WjRkI\Qt@>\)Ck5Y_;";pN_W7
%`LV3ed.+#%6fAp7/#ee]&U*MudCQd>rAWKTSZEV<)i;QbALlI1\H18q*EbXYp24<V6M#>_5*rRO;Xq8gXdp/IWPs1aEK]%V<_IH,
%Qi&ufVXn`u-iC:ITWfFa8&YgsRac5UfIXDMWKq>@Vc(,Sfc#Is/U)QCUX<m8$bNIo0;%0_f!7;$b@1dE!5tj9`#`sliaG&A\lHT*
%0A@"]T'*N`8038EE$#9=>5Zo^,JbJ*djVggg6p.(3;]Uu*"*h);0]E>KhB&kGL+%4qo)dbYXJ*^<^*UNMN)Y'\fHn"CqWuqPmY.\
%)U1SZR``hs[8nH^L]jec9eEakc"\+,1M.G/>HDZ`I.]hp?sue+#QJN<5RL;5;<n)o&G=Q$P(_^jrt[-=Im9LbY.r]Q]DegtLRm1:
%B$3(+g\I<[)upZ>A<O:*4kZb&plE&a:OnH^;(A#mInngPhd16&Dh?&_5E"%H)N`gTs2q/FJ7e=9c#6.hmR"gFH9M/m#="Vp\&b*S
%9DNn-_C_(33L#r;oa<q+?eTQk1I,^-=4m?R24U\Rb$2Dgp+-,+[gR\d*1n7ZOtH:(;t>e]?aHRE2h>s0qn"q_2'$9JL"1M.9<1n2
%II"Ep&!X"<.m)AKTGH-m(.$;4c(Off<N<[\3m$s<oK0"jeI)g_oQm[@fr?,@=d//h:s7fm'.a@;YtFGaVIu2/ca1g!7tnW_IE'2!
%*qJ`YUNrMne?csKH6*MNm+t7\mVYjG<ifOpS,9rVeCWUodW6G@eQ+h7Gf%$aZ3Bp80;Pp28;m9If4C=hs1dFgE$EE,r\le^q%q#f
%T$%[OZA$rf#.9g$nk#Qe$rA-.,&s'QM*2YR-!OB)*BVBsc3uD*<Lsn^a!\PhPGDmT\f2K_c1bJc_V2gmWHOFf&;eJE^*f>FA,LTZ
%41AHS9$NDr\Xu^[r0s_/,sp.E-9'B6IYT7o<6rF0.;`+DNKGhPdcEs0gdme/XZJYnj[Qi:8=(:[ErG3BM'W+`/iRIlhIu&<$X\f+
%k4WSt\[+F/\QWrSC0cNu6_tPDQ>u-Zr@/-:8[d/_'XO(DX*<g3ed2s5=nV!W;.t.+`1]N*HuE^P&KSq':tj+eQB793@=StgJh*IX
%H6p,f>D/f)]&bl00_E(GZ[q:b6`r6<^-o:M\L(P#!&)dphTM!PQgqc`7G=m[/'[`4ErWPV$Xim=X-B_><@a&@[ZWo'8L-Q-k]K^h
%j(>Uf?`dK\,["Iu,eDXq^_YS&+(]MIh-@D<gZk:WGjT=.6SA>t6#<s3C,]*i=ekdE_%DrolsRnLNcLim4h99-Gtr#L2TXqT_kPGZ
%]mo?k[mmCBaPHAr.eE_S*]K.u-(k<fXQIiUE;ilFOKB=g-fmZNR:ko5:kHCmD1GUDoI;XdLFXdp,-[[_VduW5PB%GB""?>!NF@ZC
%U!l<%el=Nm(U_1XZ]lO@%2d<WW*b3Zl5D@s)obYei*q1rJg:uS7\P99^nm&:S0'eSI[JEQ5EB._L;>[WnWq<##'kJm@[R'4'#Tt+
%6jDjY8/gBLn49]PI*Z9\CSA+^P0I).*G'%l%o/HnQd6JQC=Mq'itL^;M+i2I<Z(/UI'M3`&lN6QeOFMk%5AkpAmikj"4cq.7U0e0
%la7D-hpmoRrf%!Vhb;%m7J>/:8&g^'`samE)\K9I]'"o<l9SeL"9Fgp_]N<Ti-tEqi!eoT:RK#Nqgo>:7Wb"NG98:(M8H3o@nM+m
%Sj#c'+!+1@9F/8X$1UC+G7pIkYk+DrbVK:[)3lQ4lJ,K&a]9mFdVbaHoi-8ZbYB?Pa+[h)KkfNA?/Ism\&$Fm01eE,6@s.c+qbEi
%MI@>O[ZcA6-X+ScU="T*eIj/U,W^iQS<_HdgFO-[[8Jna^df.uZF(:fq=2(ga9F?^]:MR3/8*qfM(2:0^Mqk%D2+`1>fir5!!sH9
%Upk['I_mITiC@nMa!;%9KD)$Zr!6(WS0#ZDolo3EI(kE__"9bYH@`S!P1+7A3@H-WNg[eoRM&$2<=7DIEJs3:#IUN*pJ%**Y?ZV7
%,uW#0g=b<f[`D^V<GlsLK6CG..`p&BUWYqT/)RrQa]*3oeNN5EBFRf$4/1nmHCD5KL$sjnL:\Cl!*/tT<c@>;:hr$A*%-h/]L8,u
%q\g;heZ7e=P:+./%FCcpbgmFqGa89QIS4c:EKAqpUMQc/:-^bAI8k;q`P7SdDR``d^Ch-T6#3Ai'Y6[?)0U]dR8u?u>P=tt8++Ab
%U4bHJ&gc4F%/V%e7AB_J;s5G=-!@XMlPPL7H>)c9`M2E_YpdN5H#>r"8j`53MFI?_UDUtES6Ok[N($</&?\;M9(&RpU*Nsa9qp$&
%*/ftNh&OD.r9:gWMFACP_K?N$;%cdaCD_sRrfUBJ@A[sm\X+Xe;nOs/(,G6PmRDJ9DA]3@Edl,l0M/_IW3k>USO>fBmH>gEqap^s
%!XPRdI`#@F0:5:@B,ho[9j$1Hgm$fI#ts9;SgaQ^X8FJ@(bSghV8^Bh[A3SPK-p(HZg_&%@TgfX'SA$'eQ^2m/T7lnif[6XHj>g3
%[Um#M#Q;/b7W`K8f*4LloSBZ0kZY`C/J6Eikh;]U1bi8de>lYS9<KXF)i8>TZBh#^XW[V(UpUe7)fhr:'%TNOX^A(dP1?]=<U20J
%,a%j$6?pVEN<:$[bt`G33k+1CT)cFL27aj\aGd:LT>!dO[X<1V#(<fM6EQ>d/gi(<;lo$f8&`X$&!WZD%ugB+P^*%k(C4g+YXDTV
%7:!A(@8%>XY)KP*<<jJCl<kf=&Z=S@%ot?JX&kIJ+Y""GK1]o*bbG^u0e^5)#iNI($N?TOTAb:_i=DnO;^Y&2[sh;.]j[Y_+4)]r
%3=k1)iNqb"+;6$b;MI:Mj>X`$3=JJ&_b:.F]-+7=^*3)4,cN`l"%N0':jSd<Y#QF6]l(6\C-5a3/O;j!;R2U=&1kBZ),YsWTE<em
%Z$B5"1m;47lU23Yi&Ut9"fGE>mlT$j,`BHeXq<h/(53u/H_Xc=FdrpS^TO#6^\B+0R^)M..gKc335$f/VdHf/f76HL0YZ6g.fQ`:
%Ehg:p6"]mtD7K%Z^;*AFM(!(.Q\2"tIn/@)1)KG'n\7D)]9N8;cqjJuOoKXds8<BZ\%g\tHZL9b)YnkQrnh)/_aj^`b>rXHr4aL0
%U'FeHo8,oVOjA5^koKSIX$>T@(pkl7jR`<Vlc1^SHuBkT(hlhl/aBo];'db5"b3/h@6*8..Wm=BWLNJ,mRWW>j%DtB8pr4S9%AFS
%O6_KdAKHN'_E>'(ic0,?CU%%m2!=1Yr-YoDX^(+n)!P-I*NT(gHnUdi8SW0uM:D=1]0YCXT`c$$UbM(%$gQrZQRKUR"D"Sjf9;G`
%]_:2L<]YF<4UKS-7*KQH0[*qWIduX#eL2tK.s.#jAn;c>*Rs?mXniVX"j%6+;1\/A4Uu44M1k'`9Jsr_c?DB9`gObQA.e3`fSoZ/
%c&eESIV!3^1@NAs`QXIdBOik:R>aT^UQNZ3A25'kN(,-=@Sg_\@Zuq^+-GYuA25'kN(,.h5Ai4p<qWKB`D"g#=Rb3ZqJ+Le3KQ,`
%afRsfd,nfHK>JZgPEl/_+Fb\??nu6>Kl..(^jZ]##o@e+/R]b0gd!Z__m<3Xq.6@JfC$qW/P*cQiW%n('A"J:r3)q"IBI6_CuS5f
%Jt#kYU)soiW6iI)TkL93F$!U=;C!>6EgEB<7'^;?mMZb\$5s=sNJSa*).H^+9I.NVlVM,$`#OPs3VG%]N>U`KA<<Q99Z+akDaG29
%IKZhtB9&_o9LHruq`r%roqcHl6lK'4qKo4q?,bnqeX)$U9(l8&+OQU;apj=#oRERE1X)15+d,idNZ*TuDIU;@:OGE[7_/Fs]W&TK
%6k:#A56G+WchCQUY2S,3?i=?r.c2F\*@WpslKitY3;e%RkO1L#ht(m\8G*rOBtk1Z'.IY--eWn?hbegWlTqNHda/W?^cp2n7N0uf
%_WLlA%5#3n)HsF(N&7o(L,RK,riVG&BkTFr6gN"@AjnD9jHKnjcMfEXP9c"]?D</+h?LBThQ/a%M%#J+ruI!s8KgY@lBG,e&C5KC
%/aO<!:\.9qc:/P+7MUf`>D8fhCnn4<077IK._2Sskbpbo:_bAseL14"MeQ4=7o*b14`,d6%I?XNeT-7a,V#V*I19p;2ko0U0Zu29
%<d?4Ib^N7tpmS:#8nWp3_O;a/Y4%9fY1#\=XjJ[XF!l=R;M#R_<-P<a1='/p^B;.:M4SoeUfS#Z#K!&*=NXK($b)t>=Y1snlu(-k
%8<r(CB/AT`Joe[XT4>')5AZU8A;gr]QgE%sYY,T[)dkR4P.QnD_Z0/K-c:o;Iu!,ETrGDe9pgb9G8Nr-)/oE!((u<j>XrAA)ef]3
%93Z(]#^0_MKk;u`noASU,bpB1eA#*T9hGIV;JL\i0?IJm_]SO1h2n:rABPgD]_pnl-4P5lLj%ApjJ=Fs**cM8Au*Z\'n,O<RnK!'
%Hl]W*6jjq_F!G8aG:7Msm/.a#F!GgFUs=tL\WJp3;WgO7gdn"5^$8iHLW;rV)`3!3Wu=>L]k:<(@5-:dED#qD7oB5N*8"+kM-k:-
%DJWI4;;o:KTOHAgV')oS'tZL!0l@!ElLp8#:f45^o36gU9TMfrC7_'f]Q[K#k"b)<%'%ma\RP0b]n?T)45(70K>\"]jE]ccgnW7K
%)AtJ`6Bo"jmq#g$+Y<^PBM`u-V*8V1YY#2CC"j`=7us_qg$cn#.uDYU,r0P\h$j]5$RM0:Z@\R&nhiN*)e+Cb:S.TdC+=r!@\]?n
%1tRqYFg&L5LY9L]/t5*ImGjHigYorTBRU>5WEQ!jr&$":d-8?QLK=@%Rk#aGZp]$%Cla3P=33XH5MM0/[TE1k8]%JfkPH9?\ZV!K
%S?IJtf?^eQ__&t.8lO%kn&i5\b`O_@P3,6^>c0D;''=X20X.`#s&utr@]okII-aO-ri9$LKd>tWF=f+g4-Jr"P21&<m.u*`I,NH/
%T9Y7VmHtBd-lQ\)s&YZYY>]i>?V:_%>g]r5G2EQtOKB=g-fm\3.Os&&,4oAE(aLsu]uiRs&]L;O&_PEk;`+7"rH05qVnFf9fs(qu
%[B@s6qUFr;T-7es58kh/Qnu9&[CKYW;Bt<`@ZE[q*;c&?7LX=U+T#c4adC7j1WX+*2;AVG+1)r,hO"_JXoiUT@I/+.f&/DLR3*O_
%J+,RLILCVd1P7Up4%@OT9T9CbOr*U+eaVg+TOt,JjdZ%(6W0u/04jaM\jX<kmQ?%$)dS%#Y2@bYBAq0nMLc37V<O&F%8p9&M'S0#
%;P*jMZCbSsP1@,UHY[f$C42ir:AiXQi\)tUEU@f*#/Y(E2)9UeZ>EmjoZI@p11kGkOc7s]C>V:WAG!V6^VcR".Pc"ohY`YDF[&@7
%Y!\!c3WX2*He5&?Dut@4Q[1TJYksX$Zq0mam'RJ(4)`KRGZ-K9($_,8>ShtfL>BOTp97NK:M,?CWC4IY1L1It6PJ.cBVp3G]Xjj#
%C9*NP)%lY96aDYBH)VCEog#i2,;f9h1_V*Cee?4Bs((3,YR>-JNsbR1@f9JTHj6J-?rl`&4^2V?rJD6J2igB*Q)9Ta81h=m<Y&Nh
%%3c/Xd^a.%qRBrZ,iLKOLRUXMO#Y?/J2Ur3<9j)GpYOsM^VL5(A)aAuJe["%=-/T:aQOY?hn7+-miWoE]^,(td]7+?IpC;H'8ung
%,=iIUCVi/8WT<*[O9cUEk[:`#fnOCCIa5$K0,BS+Q-R/Bo=rNgr@R*FD3nGqh^u]Cgk'qHY`N%i[i-WnNGKnf>c=R/l?QK!Y<SoZ
%Y=mPHWHcWB\8AfYXd8,-^TH;5-%DMU:1`dF?kI%Lo,F!=`VaZY=3Y^<L;leL,s77f`IB/R_u9Gr8,TiMH?0l1rAO`"T3&&m<p2K\
%nu7=8[??](1k8_uJ44iei$*P#`/WnM+9o.#IPbhTkl`\%`D'AbC>pH"Cn&&'J%"+Uk"bgR/BMR`fg[]?AuL%K[*\ar8\^LulF-5.
%1&uZ!D=/*Y<C"ekrKS>UXm$++I/WH)s*:SVnC)$#r<l,bg.8pSi2-#E^`RdiO79o0llY\'$EiYn7pkfJKYd2%VWP=np#`+:=tCC<
%q&Xn1I1=]Dfd4]b9B_ah]8N_&hL-87eOmPUCgON&ZQK2kPeaX)R@Su-Mf?R4;_K)DQ*5na<o0,g`K#EW:;f<OG`3KTRM$W5s(d4)
%<rOW1=u[E!UO-\D*3jnsn15tf+$,8GDR!Fs[>D#Pg1&"YOD4XUFVZ-V0,Z!GW--8+BHn`:_@H\FXq^eA,3]:#^HreUcjs"W3hd\t
%5>&Uq^g7Xl!tC4!8K!+mQ:6`9Qr+)ml-5j/Z_^!p=l?])+6$`R+cHsloh^EIii5B\./Y5D^)n7Tf;WsUcpOR2Vq?e9e$Lj5^Z1'?
%rPLl"gWj*5GuLoFC7tOs:MjR,E"eV+m;6V&!ULg(qZd%JrW"phrPS><HWT47pW'Gg@;0AYk2Os5P96#!5lRNCmX?Z.<_M)qs6GmW
%cU"`Q_+o<eRVS/rQ0*+q$%"LK0]rFleG/>Iko'OBP5E0`e4k+A`j,/brkko$Z"s6q<BA8KqfoNk0QAf>2-V`.PHCa'3H<D=F23q+
%ri&>W*M]ZEpNne.s,pd=VC!gQK3YJ)XHr$rWd4,rDNs*^jh7i(f*TOJk\$15n_N%MHEWH"#)IA2\'Wk<dKcXU-\R,sL"1+i.XRc,
%@?F5K^!ilmd*AeL"7Jk4ghEI[&Hs))En]7c5_HU"'-NgAM7^Ggh/=^Eog@O2^%?`E^ec_^J[=T1WL+Xpke>HSpP'"3;].5B+C=IM
%ZDI!Q4"Sl9Od?8a(9!2___ApTg7F`V=C+e<c,@H"%_MqfqDKlt3ik5*!aIAu27Mkij503A\rpl$lE\'\]ai(tPBh3r%X\G+]GDk[
%cjl+3&lQi6!os[b>NNhQG^/94hd=XFU!(8gI+MMd$dEK/oS=Z\g3DJC6[m;83r:.`B2NVV9o)bbH3">Q<D0H,/'"dYE?V_qXgMp,
%.1gp4>q\#Aorj)!?K&Y2C*d5'Ae0fr@e8?.3F+PYC'bY\W"eOP:G^OpD!3!<5s2\+Q)utUX4_e_7IP8m7-_9gM"e8hj2:R;oP@`m
%omoC)1;(2tm-N:bZS-3_;l:@,0WM6%9Xbr/@F'Baf+rEaCq8)2etB@?Cnk.3(Vc141::%o<(j>Qs6Ih<'VS[<=b'Wk8.SBTS+_T,
%REJ'nERJVLZD6;(7a'AgFf^?%.kKg]NT0]U[a.Se`J=P!="75XW<W12)ODS?8aWs$28GhRMTiK-XfmG)X^6r`4:'t]D\q\@aqh[T
%:LF5/a<XjdCS&'HEQ>Y#)VI`hR*(_Pg%]%!+QI#o"7&`!elH"OP!ebf(^fs;rn;];435Cdbero%2g\2:O;G#M?EVe(iG5-OE9E[/
%1V8a?f_u5-R`"<Gl4dR>d")#GG[>>*=_JPMGZ*t)V/57/[^"RN`X=".LB73S0lqf`j_Wu,_N]55;p4=pk8V:<0-#D8<^"3%J?\])
%WEWIt/[Uts(e$)D[4#%uemP["`H&#DmD)qGjaB+<',F5p66>Z1^Osm>jSS*@;]Z5'>+8'<-La(dW.Us4,GDLm!\L*?B;83'!Ng_]
%q+:gQK"a9LeN5?%$TeaDQG;JK_`q`n'&1flmA9cXjlM1e7p>]UpPpmVQ"lM+V6Tr1=#`<c.t:Hs*bJ&,Kj(P,3(&$R2J0-rlb5#b
%7@`1#l"RR4fX5&1AP:)R)V!\cJLGCF7ocLk/Y?b3q=d%jBH6l8+-.*[!bIM>kN_(6KF(=#c6)&L4.cCVFm8T5@Hfn)Z[Z:,:#Xmb
%SN%`&G2\0qFeidOf426'15rkPQu+$]48MZU\$d/aG/rT($#,soa6ZkMfY@stjg.p)lN/<rr2/W;U8h]mNJl<LbSRffYm(mH:"oUJ
%a$%GQ`=nj/oMD17o*ZW+*t[^2d.tZ'p9#^1F8NW6`NtI43og:qr^f8B0B+D59&</Ek@K4NOs>F_KPOo"CYh(Xk,EPDKm^.*mc`fN
%oJpUu]BCS..^*ob1'J(p*BE+GSYo%7lc!QB(V]a>`GJcW]6gC86@F(2K?dDh[bVGTlsb5I$!,f-T5!A(gFPD]Br0NQq,FUc(i==<
%W3I!mf3p*9QEdSE?ZJ)==LX'4=3*(^i-p%@F)>c/mW8%Tj7kTiTuRslVXpp*(gGY?dRaQXg>PZ1V:%@BEkYZs,dr#o:o.:5mS+Xu
%`S)ITm:jG"h7=Lfq??Bm`W&[6M)71SWFsc![E;?(e\NLa@-ZhZI9'fHR0uIF"Vd6V.Y]p<aBRK!in<YHEV*n!_F?].Z9=a#/1LD]
%gq[C\[+&d+*k!QCF$$m43DEql_kiiH?I[l7A8<!JZ^^nsfP$P=7A'\ikDln#Co?-lPtEV8Ac\XQ&Lhf>Ag7d"W4TAPpqh>sA_YD/
%#>W,((^%0nk]eO\@pQk%8_braaN'<k%?\kS?4aY`crd15K$fBHfQOHiXjuEKYF#?ughd*1KT/^1C6En/X8c5Qa8ESPM8/VaQjeDP
%gH#Js\6?!kG>PkA]N,fdSB`,</jj#).oos44epA/I==H$n7Fb&^NTbB#q?DJKdVRRT!9RFPK"haV#EM+<)S_B=%&Qp-&&6\:#@u/
%3eF&(f`qG<UR>PPfYW_A]kgNcnD=G"GGaD=eQ/[SPV#n;U^E&L1_&mF(]uRP(&fi9JT,g30Q>f5"njGMC)qD\/#8'@A[8:5QG<<O
%[MHZ7;DH3=M$?FK_h?VkbCrFU\C0f(8%.Hon[)]TeYDhkMN(T9Ef-!(R4E0=_^t"3="i,Wd2t#)60+e+M"aYJjhj^!=DDqh7NI,s
%L1S]eh(-dbX6lWCk*O2U!`UQKG$2(XYJ[Z0BIu.?mTXTRFFNK/<B/ZM#o:B7U_n1#DTdRpCh2k0DLZt<5IX-:SIWfhqj)jim"Dbf
%-NHe&@n,j3_i_>AlF;AX[dTk.ab3;Z*s!6nZd!AT&34">f"4Kj0hQt(pSr2B?S),E#Sl!dM,E*JV"Y+Si)8:aqZM('gdRle#2MJq
%Wu&shWNS@29\niRhX9$5QX&]:G-m#fY</YT;`i#L@[3\25i)(g*pQ'.)?G>#eY1I3heiD(N8SHa=pA1&Dmb&J+V=9Np>oA_6a]#Q
%AMRch'o/DXMcX11LQ-&FRQH)>(>>^XF93KW#VBJMk'"Fq*"7&f/A2J':#YHPl>(@NkEW5eoKG(0hfVb#GC.]E15IFgLS-s,+dt%E
%lIEdgF$9E&&6#Oq.m59:?!(hSMKN@*'?p6W6gd@g/j!kS>-$^L/F&!$T"bcdL#=A8]Rh82[SI]7Vn`+U<ljYhn6&`W$S0LWkd/J"
%Do+TL$%HkpQ(J=(/uMbk2P'I3.[_Nc^\,%sPJ1/m=ro:_nYfRRn@_(CVY3Zf_WfVsr3gZ>aL6BB@X)Y^Ei3<ldB`OST`g8G;5%jS
%?S"5AH!to2D(Q0^5tT@#VT_FhSR-#!gWpWGdVg0j<6K>e:S[a9lpUfgipP46ppupO9W.3[]_&$"FQ`2-XiJ\b\@V50HaraGFg=((
%AA.^8qtG2YqU9IGIHU<+3^*.P%(Zn#op)ZJmJhfIddhDV`L;<!DUn:/]`n#d\-,#i]R^$@KhiI+(S:,T-;Uj3n9FuNQYH6Rp20YK
%j\p'a)?)Zm^FlO*rXo.@`JsWKk3h333VmkAI%b<E_pfNHIX`Nrrd4i59g?F#pL'@9[keD9iKlXYC2E(T`9F.NTC-UVk:93E`nh^7
%8lH1b1HVoPpgI4M?WWR$oe6++9DipUjjV+#;tr]qrY#Hno&R#M^[c+`R%"T.m09Ua7ire"f5Gg!AE@dV)dC"jgfhdtoga5UinWno
%_VUX!`9PM)*=;U+ojQtOf"H:N8%5*c/3e'PO0i]0T*i0-':;o>:S5_i274ToDnWdGIG,K!hnMt<DUfhErN(7FpL`<qPq2+P`OV3'
%_\mYFn2^IY*Aehrb9M@eG>@$NYiDprlEEA1A%:,H#6_uk!WELnHMdM.J=dT_j0<rU6sBocQaNCXKFK*LieuV_TmFJA&Pj2"]\Q`C
%aZl5!>aZQ*Bgu$hj"DKeQ62\^=IH8)^@Pn*^&GB`H7sdBnWu2R`=@iAGIrS(L-9`s6%8Csb<iacgfhD+]!eI.oA'=Cn\N\$1FjF1
%ipi@*3A\"I^:L;oX]FlepUSaccdOZ\Rrr4bWUfE4_X?7#Q)3J[*clm+q>J2>BNgJ@b1i]A`Q.^25G-4a5FV+:q42bUDE]$2CQ55r
%.u3!;f#%#;j%"'[T4\pPUDNBbfCE^dTtA:lj-!Rs"VZ[2bVbF169Ve)Ako*3GYuIe4G0ojWscPAoZ>>:MEH3j+R69hO-a`+/qgR!
%Z/qb6pM+tnA)lPDK=**'SWNYoH@/o?VT7k?jn)[Sl0!/7q3;K3>@1"#+$FE!9ZQLN:#Gb#QCcr\r?ZmT??CsaSPL&jf\8L\!Il%q
%SZ7G$GPu9b2"S43I2q7=AeE/6PNf?o&,4N4GF(8;\)bbAHG[HLSp[aWi%;Hec[1hHH;o3WSmL*PVXHX>c_P2[N%LpqmXO"fcb<c^
%SB`,":8d98M\"6BH2C$61e]'p`gaHcWqB8fK?=#:de`D,a0ZE`olTtR6`$PXs(V>dbOijII#\iNdgmd4RInCPcaM8_p)b9P+'6BS
%HL]j_jn.!5nUpJVAGoPTFo0ABo[AZNqt/TCD*7cE[^D3'cV>IU2]p:<Vme&H>5H4s68?0c[c+,kHEU\QpKO91d]]]q=42!t*h;.B
%mpEgdl&RJin'dp&K"L9brLMbdrcRU/qC)A_4ag5Q2UeRfhU?TBhO?1_l;m%=qFg8,QZVi%HodR"bI5F1CPs-APDeIb@oFbY?]NA^
%4n?U))\\j`]T):UQkC?L(hP>oI.,`j\9WF9D#Rc&rRf$Bg&#9?lYjLr/Y27pNidbXmZ4Ju==]B5^ONgP[[#b>a*('..Ut-$qg2gk
%4Qu#-6>:9&?oNKfG$'KmO65'T=Rd\Z:`cfg(oqM/CH,#Zp.IP4[TgL(53Y9m)4rN&^)EX"ePF5>H4u;DPA4\l/8#p^pHQnENBc:q
%r-!I5o@_^idp6m7I/VU[KCS@'0Dt@RcOXX.hi(@g*rcf%`l>@>g%osPGdfg7=[)io_i.Z?Q;5F=P7,F?`jQp/h7A#Yl1iiRa!W7D
%]_U`_D[#Blj]g.0K.j\T5-Lf$/M2n8\"9URfioCOYC]t?G8h'1]uo,WEpN\Zrq<J\^%$<UN]*K$gcGD`B\f[GT4B:so;r6Obf&T.
%c1Qp]f'W2F@P_5Vd*794M>Nd+%jr.+UYUbS-SJ4A2P*.#T%Gog`tNC2R]e)&Q;51gj?FIR`92bKgCpui>^8)qch`j7:\-4d1R$qS
%Ui498-gto1GE\)G$WAb'j:f6,Hue9?Bk;='o'V.P[kF<m:1h265C$K>hG%%:?Y(QgZdZ*q:GuP(hOZ=C]tWn&J&pE:Ikh!&p>Y\D
%IsZ$J2h-2OrPM.7?PTJR[m.;r2JsW$2`%qdlY?a7S#;;h+Z6q2n3M@MEtl<ZdZM7&p#'oDS6B'dIm(1?1id?7Z9()>rd?[`Q%)h=
%T.2F=HE+ONHu/ZQ@NdZn[ktESD:[;\:-\U-a@nhoZJ:i(cCF$p?U%b@2>sMCIQh%b\;.sqIjp)fSVcG]1NtU<n&Fh[&'J>J4F6:b
%hKc,=(%/`%XCgq6W>7\S3@nb!h`39;G^$&g4a8nA4am6:7Y]HGRJEajLGR,G]VCn>]?@%=<u\@/1YK%Q`6@D(0Jh/tgG(D+h5Q%s
%`Og/5D=d2og$62].ui*=h5splr9g$bgZi\EP?PM$5!46N4'(#rSXl<r3&>@<bq@3mCjpXeqn.#MS_Xh5X4^;;?Z"#YAp-p]>K:Zq
%bfo(YNJsGk/7flpe8Uf!oDPXiRJlgU[kcY"0:uiKcRPd%Z"NA$h!E>3iEV`l&*B0]:I!-Ah.s%$[kFA%S-*jAk.YY]4S5MJ(@HP7
%jnPhL.*/Q;c^NVKhZ!'9/+;t]$G6]S/1/rFemTC=2Q,`VKAGc*Z'P&@`650Ci_V1+7HNe-^7=sr>`eNmm2>`(\l+^;QTi-GYO?"n
%aF%FJa=ll>\(1-ADFJ8hqNG(i5.sqMB(;;c&D_Z65-H&`rn+8'%u0W;RS,I9KDT9/J+dJdb^Y'(<mr_7\^g0gl;f-s3PElMU/tqX
%Gd=\5&\OXgRLXAEa'S8smN&(kgf]$#6h0E??<s)UeU'Bi#PtY]<RP6K2j<CLHXE7U3kpOlm`EN4YKd&6H"upCl5e?p,I?(UH55:d
%qQq#%?X!*>[h%X\_rC:.T;1qYa"ig3kM+DDjF/\,Z#XkLqGas.2a=s)pYMJ#RhtheXcB6/Hp)drmnMc:G-AFM?l=]e^\,6=SbJJB
%XNiIPhep[,/UplpcbFdLHbPp@?JY@Q`e4/LQTc5SDkH+AmUsH3e+^Ts^&@S2p<fA+#7p:aV]T_e:N?sUp2<*D:jWtVLNf@QY<RE=
%I/)[Zk4:ZM%hIN7+::64'l0"oAnRH*+$JD\IsA>#>Mjmo?+mlJW*[Y:O6<sCbWT8dlLs8oWJU9-I/1.XOT,%6F?sKq'c0pADiPW?
%*PXX=pj>/MZ?Z9Gl0$%L7B=)r]]R`\5;#,;?`_e!1GI$NB(M$d>*/%\QZekCB1kaM:\L,n]l)quc.6K:q:SdqZi&e4ahi)ce&Lgu
%guQB4b$oU.HKF8coYO5j:AN0"m8oo!X7LB[dHY?&o]>As<jV<AI;etuP@-<Hpge5f'8Ll(@3W2NjNGbhrM^Sr?[B;r>sEc6qIJ^H
%e+0'Xn_2g4k7?/[VPcY^]mQ/N>5K:&WBZkiaj"H/$fa%hG5"`q4?M4L4FB?#ordi__:t%JcU%#VJ9Vj!lVh6jc2*%pM2BdK]=/UE
%XInjoqn+X8deasoMi14IHS::tj7D8XH?7(GT56.DQ$8_$K(7+1o)8=+>FCK$q5rb>T%nWNf"/KdA``RX[QMZlDm)<MhqC8-IVc_h
%IlM2V#Zn':0=IUS#oMgDd>X[RR@;n(FrmX/AnO>uHaH`.I/.T&Xt]ZlpW;49iU4agl.THim/>.7\G,4dhY+X^XhEcWdG`81\c)&b
%Msm7pHhhjZnV`b,^%p.Ui8XpE^N&g`A,g4_jn#P;`EaR?H*qU=o^^PeE+806rTN4_C]3nCkLWoo;tI2R:H*<4Aj5$+DjEW#4FHbZ
%SIFDQZc/]KpJ09]^"p;IYPP]?1;3Z^*&[/sH`iAn^<;!gI/&0e5q`+bBqkCrrVOLd_[kuBR7S7X_u/Z1_[eD-m&ki:mZl!d5HDgh
%DPc53I4UgK0+Tfk?`kBM9aPm&H[R[@C"cp0I9NY,dn_(C207GTCPVAbNumc)b.`;:]pil@D8/'#hq?jMgs>G-+4fm#mc;70jus3;
%gMMaj\a&doCgQ!^rg\J#oBQ/Brk%EHs3(iXgCN-n(.q6k4%JT#Qe^!>X4OJKe"atK=@ooD]X9hHE.$B<VGG^"b5BBT>^?@FFBYja
%rV+e4`>:2r]dm,Af247#XLE7dT6K2=PX!c[f,gGOPGS3ArpkY$D1&Kt9D;LoKV^UZ;(.L=/jCmO^;!l)J!@"[.^u=MgQe&YidE+3
%k<5d#248(Lfi.RDH?/fMISG,mj0e:1K28o?9_oV8o-O>,0_k3R/N[!/X%]5d3:gRnIW3=iBhV;B7K<+dm6SHS#@=98oJ;flo8[@a
%[Bj/]<mFo<coc8"kbeWe>_KtTGe\=mI-.A,XIW>Vhn*!lZ!"JpOYWK4PaAg0eMD38a<B)&k[MHUeS=d$8_$!\e2><u3i#L:d4eAQ
%^hcfI?_^cHE2If\()uPUb@ZTp/>B*n;efO:YO8d;I[eWYMg%DF]t\m6r]RStJMGtn?124i_F[seEI04ISjTr+=DX;0h5s;V(U\Y$
%RP0md2C%i^pZW`BRM1%mQhT4e*kT\mct3N*>obT!I_eG/"#$+JJPBBefu"1cV5c=Y]:/e9ND/@XRkN8!h4;UZI(`t9f-+:,kK.1J
%D.Q:s8F'EH&Q^,[))e;^-=,c@KR&g-`hHho7-)FgftCCg$9,HBmG@hDb>`8f30k_u0+'nEFSD3TNm">g>ePmr'[OKp7r[0p2Z,>[
%K__:=W&MueoK?M@mDFsoR\#=Xd\Sl@PL;;!bT62Igl;WRnsC?OknA&oiu$%Q?uHfjFaK+6DfqO(/O!6M\8EqlJjM\7I@XI0Xg>(C
%MY;4hc<a8e)B!W;<!nUEj;"VCYl\b:n69Y<%a;V8"ZBljSI)ur*thJam`oL56D\Xk76.(I;f?hK$A?.+MThX-f-%ZS^OF;m>^D5X
%l0^:47]oe7FUOBU*'.h7EnuIc!(BD/W(WVT8i)YaotYrke7]j\H=#8o>TBic"mL>=!?#t>FDYJB9K/i&"G^2>cbragee$kqZ=dYs
%YGBgUf;clgj@coW;7.ErGnj2`X!&!W='%"25/+g^YF$ZX5j,<(jh?!'Z[SUo/$:#"$R50_*3r4Ai#L!NZ`@%tm4dn:fT+Rq)E2&r
%9%dBA5^PDJ&a>1W(E+=^*4dgcYNM0,/Q=F)VJGNmRlc0HH:GW]e1jP>b8:tHbtD]d4aOMRMcNo#GP#Jh[\K3BV$(FCghIO.fP2Z,
%3nmS)0^j<##%-ht<gS1TrGCI1EB6DSBA-_4:D*CNoY:;%,l2m(QS)c]E&S^oc1>;dnuUERS0Efm*#t+lJ*Voc^UP\(&(ZNnkXIm#
%3it;9$>0t\j#Hl=f=j$X]Yf^\]rl8>3,BSP`*]&8A_F"k/FENEcR0N,8E*+N+PE:lJA8a\7c>0h^*FHTdeNEf;JEUjqIW7#eO=OF
%7pX/VV>M[E(a,7hrokgZ85VEQ,uWBiP5&AtV1]7U<')fL+E[SOTDqV_lP+"\lP20\^t^QCW:4hE3H[!oXUh'^T8@alc!SK4,rj9S
%XR\pT/78GSci7/hs3Kd_1O^0/$Hk=3;'c'iIu(%bUK3MOU6!G!bmDQh8uVk`2'*tk!b:P5-EiXOkTHY.%T9V_N&";H-Bp)A#U@e!
%Ase[3@Ap^kbfA4ML'@(u*.At()<4<R<G!MX#b(Tu-Ajnh0PrRRkkb>f6jEY0@GhMBKsI>/9VeIP0IV\g1]Woepr6^.!N[(5!KbHK
%Sf[t=qY!7Pik^7Dq$<9(:B``P5f5'.J5hUbU"'"JL?Tii2\bE7`\p<F3)XCR0/QJ\;[*Jin<"g?Er:kLBlGLVSf`X`\Z]C.1l`h9
%$.0-c.84#E;\<TJ&G3M`j_3F/&S=?h?2@`]N!^;K/Z;T]-q!n5Vs2;sUa:2?M;M/5+3Q(RKM(gU3&_F=#fTNioJQOl,(tY($m62"
%E;q3"JkUjJ9BgMb>GR6fE9P,8;H(ojL1,YZK-R[I+iA]RfNlPZ)P<_O88bA7!u[nfB0S:8Z5peO>'tm87_\SARXX2BeGY=M:a?$H
%Yj=?P44J_tlOH<jG7D"%(r89:kD-"0i8cb63SY\opq5]ckjsg-iG3dJ0XUBP#"KG/'u72^#A04]o7g78p0`kuG7@A9Hamr]%1hm)
%79(W>#1uDt!][/GD?ei(HYnni^d1S&n^8Z+#[h/<#T8'LTHrQ4kQN,>3ZN'G5?A^?ni["OJ;^2=%AFm!*@qB;0Vnlrf1[&n8,"7`
%:4"2pmYDlhdj9d-+=!L3Go1fdGrcrg1\A6/E9Rpp&0)O)W\X\lb-4\G(5==a'&cDl#DZ&!_K6tAKH-HM:7impkNLCC5Q<hAkC5,u
%&7bKLD>>=FeNkj7bdFNpC2,g&qUI5F`iuKVd$O5SKF8^7Kd^00$(,a:0YoU%<e<o9Fp&32Q8&ec#*UL/#apb[VhVnZ69%"JO@f5#
%$mlW9'B7%R+</]f+)#O'16M.8!bComCYsc>"`+;YS.]($6q'<BW#F@bKL@`WMJ6MSkC?;kO^]S2*g1/C"1It:+h5WbO%0En((cH-
%;CY%\nikL]^urlU$,A%l'GE_D%ch?Z=G.P7?!9dp#s&/-b+o*T^i;2`9rJ1R23stNfTsm5*r>dp>VaW`im/h_=g//H[fd\u%&1JH
%7kK+C"efR1%_Lp4,C,k(O@J)MfJmT%L"+95L7irb$4o[(]Q$-a)V>TgS-dLCke#f5K,`&Xhhr3;YE[JfY@/Bed%-8k:"$h2'_=@n
%*M2GS6AC)KKn(&oD)^s0&28RsJ-H5[@XMX.J4;`X2BEn.3+.CAHu%aN9\A>JE#6DdGr^PHG3VCB^B9,Ea.CVd?")u4MqF.%bkVWc
%m]Q23g\jFpG%<?hA9NQ+$T=jJ^l!$"!u!6D`?HiYk)(jYV[s&sccQD4E]EF9")P;1!$#le6=tQO[OsumJ>_oYTa25*OcJ*F*/.g-
%$Fc6`LS"X?3,sV'=hrf1rmf5IJL-_O[0&or$l2IiVS3B(V$W"M+MTi^A.VF9a'XTkgT.+P@YZYIOR<ln-$+f4?eE[LBk\=-?.a]P
%gb3N2M)UmSj$eN-R#1;NimIok)(-AV;W1pPi*%84@k!>3%D9ZqW-I2eU^"3p5Yaa!*-b(Y0`nM@?tg,7K4(((6GkM'GkTd?DKL7Y
%CeGH<_@@8>=;qjtiCs8R*t/kL@;dH_]E,hjL]\kb5_U>#c%,m"*(bL?@9O;)pMeZ9M?!b$@\k"HHaZjH1ZFIP0I"S*B#fNp_?C$>
%Rktmn!N^rP$k@\H-%H.#AI4#-6[OkrJRjXG)TaLZm\>e.;Z]^%87@%LVZOF6#!5-e7kcL85:_9tK:HY<QG=aT"'A$qBn2G/?pl7H
%#$dr;`h0$?+WQ`5M)&k>(oBF,Xp"=u2g?$d%%&%*e3.-JO1J92M^5hN@.6Z(.(AI/[_dKHp2iRdd(D_LU=r*b-?R<_ctKe?Tc=ke
%3b_oBi,D?!.4A<`//"ICQi?M\%ofDnRO83k'0*!_0Z#%O7=>:X<-s`PJj^eRoooYK)bD4UkWU*pe)qhW#F7Z2Ya(Xf/jSZO^..`l
%$jo6;5S0YMmlbDh+FPihf8/RbWZ`3$INTKkR"9te^AV;lOW=TRUU5Zk4U?F^ne%%0haE8N[`8rE4+J2JEd3//e4q=m@7]u-"6nAK
%Ne=BDe4(:K'#K$d)8SRM$KBCjXr7KL6mi<'9A:cV<WU)>l+.S&B165g!^IsOoCRa0I7&Ue!f,SW+,:K^O'SJH<HlQfgdAA5Qc$^"
%4D<t_e'3KF/j0su,Ig,eA>9#(<+S-PJ4V@[Yf>M]cP;ur^u1uL@3Mm'"9joLF5SqgbnIpNk6Y6\$kGFaW#60qMX8rgn)X6TlT.Vp
%;C!.bm4Cfu@KaCV_DpWRDD)!LmCM7QI:]l4oP'']JY`i.^4jA$&-e;+W9p_mf]CQC=(&`195FgU[",H;]E4)4-Y'\&.aV]qEF=M-
%`^Vd1Oa.%:^oHb?#*$YA"98i[Z=GX[ZlqA.QI`p$-cqoe+k$cpEMH@NT8-%m_t$V-!>o-[cS?_QJ408:j8oq2!1>ncO!6C_N6m/-
%80lRg_+ddJ6l=-Ga/fiZIVT%KX;N_D%$b[E4Dj>t@%I?PX<qP_''s];\\g55W.Gu*Sm.3dT]Lr:Sep9Yd&66[iIZU"@TOFg=2W[L
%ej$HHH"<>M#k!Xp*h$.SH\V^aij<Je&3<k3rP9kTUD/6aNai-XY:CY3c'rNdjoQ$_7@4"a<nK(BpX=E;U[uQLqWmo!=rO1\[0CS;
%4535TWekA*AY*G7'Zju%Z3AH>4!eUJ_@$K^Y<k2`+/Bc^n,rq2V29&'Pd&8Ei$5dnXE=Wd[:W>R>X]7Z(GrEi:hnr',??]+E^uA_
%8Vf\&$&C9K$tPPhqkS3W3IkH\\7;k<o:Ur'7M!n4Md8dj,ueD0TR*PeV"P)`8&mBH7dCBS)M,8q8CnKi6mAq=5gp:H/8T25d+kXq
%!6'G7KbUh*jR/[D_!48.`^=*rr@L@(RE,UbP"^?R?jP(]Y<h"7E9DaPK:![biA)[-U>QZ8J3g&/N>;`?#/MFJH@:G2*UYXi\1sF(
%oI;!\RmQ]LS%_b51R]oYT!S]03%GhPZcrSqL9qs4iM@g#&=PfHCZn9PF[Em@iaSG>)d6HW=@RjNF"cH"RCRn%#h#?la=WrD(lH*X
%R:n3SQ5f)8Z[<:0,c6F2O:4j<<*<l"6&gp[%_/&af!%hK-UORn.'iLKBQFofbO@Yb1a)$'Q(l;>[@SMn$RE)u&OC)oJt<bd6+P!J
%^3lFleh.(g$EklE6)[f\i@ee\khQLMiB\Y!BR2(20H>W,!#*QmObJ(Z3Y2]0>d>5,$@QQj7TL/],t=c8ag_bh!r(+3eabh>SKh[G
%Ke!G\hR>Bg5\IUqCneiUAMM++Cp&N,;.CiY),>hP3_Vn%#([g3[-e%M_:P.KFuVJ0VNm3/Lh,PZ#g%aOf]bKl#'?j[d2JZBdSn^A
%!5um]ThV1M"m-*b1*i'r7'iXETd]PUYaGu\&#;N`\-G3sm2D,AH72=;#E8tA3-VP;$A=Y[SlUGI'&P#,%7s_/MF(JhJmo5o)GfU0
%+9sZ</(&TPg,ap%4%D-^k%PA=R'm#@&4DReQC^VG%0\sF:YT[,*YTW45O>c(/6]t=N5-6GT%'ji_%$QIp8qI7/d0'Y@sE3[9(9k>
%c(N]#aBCu031cM3eL7da7eXd--<u7s![F7K#$kc%p%\>:Bg*QGr#c3c^_+)t-^u>'S**u`H-j"MU.dhH2<(eG/9up'&M^-b'*oK)
%iR44JM($FZL0tIk@QNjEc8QA*m\3+tF-fBWF?t\Aoo#OX7g7\tpdB5Mgq@d\Zu;X)ods.MV<FNu1N9Kd&g@NN"p/T."E6W[>7;hq
%\YBE7)H1$PUokgK6sPX/8g72#./[@Aq_b&I]72'b9a[.qikWXF6H9HJlI!P+O?/Kf#&Z)!=ct1pQSLt7kKR)P3quoeX-uE`Kk`:J
%IPA-AV3qUKWcZoj_paq)J]J\JQVBJQTL(I_+sB:e<s$]/jJsbqob`@5o](9N,Z+\d,`k0[n%KDC"0j,W(Ys0",\iD.F6sk"<.o(a
%"^rZ!)_j8$bX$f]C#=C-4+*B.`?hsOG$+B$dNUh`r=TDlSUuWW>hTOL7%DX1KbcR8_^DYhMV3ABr`e/L6S&sr=*Shk7&38@[YC6l
%"ItKagD84A6Ok^k,+tPYH]"NgB)1Y5Fls5!^N=Qa>&<`N2&Qs[7>rfb3W&ss<lA>Yl7`R.PlkHd:D6&L97%7p)7!`d;-Nbbb"Y8,
%T+IR%%:S<Z3fEq!mRdHQ]U+$G>OOR#R/sG3B_%ma/Q@n>f)cg6a\dU39o9e'KI0TS0GOg$TQNV+\KNZH>mt>Z)VrFZr;nNHKSF/5
%%9355!2oKmb4k.p&n\K.mpV9GYFf8C4>70aCT>Ic4<iM\)L2&,6!Q+l`f6@AYSaR",R9`(:I@XRKHrbiaqt_G4!;b$PCRCb5sDOm
%Kn^K^h*Q!G#/[1G=ibK."DJ[JiMjUb0nFB%&4I(7Smn?PbQ9)l0]8c5/SQRtS.S/\!fW+Pml4TNfGtt9G'?2:;S7i?6apQofr<:u
%-hjm-c;gh5-8;t<kR:;[Z^?dPC2&esHId@u@$$X)&h*B!&M0.\It3iu^`ed_8I7Y$Ma[KNk++mS@_DsNo"=SHG8<jKf?h4gWM0'L
%rhGLCHO'NbWTEiSb%Ugo^a+"_$&h8<(b?:E:#J9&p5jN]6,:?mMsRhT:*<-D7>iULJ<[/u)Gh]F5pmo9+>PK6;EP4^'"RI4_Gt\H
%j/IS2%IB/j=!)k1RdgZ:9$%EXA;J!P<!V-\Lb7>2Uk(s936W"%,;aD&%Y:,s'Ppg1KN1kQaf#mqiR<4l?>u(Q>"d(moOEr,0jGe6
%O9>g2\adaSF`HC=.;I_)0dBW\*XCZ-1M:EAE?UZaQ$96@Oq-lQhWY,04F-%mZY1dGYeNcMoa#gsoHpq'*?l.<H?1:+oH6]"k6hS5
%^(625?+aZ<Jij.%a1=;5N#f4D(r-Mh>odlo3D9ooC(je:YqLno"X%*ES3ZJK-E^"o'(@?E'uahV$Oe76K$BN'0ba=AdNnIIQ'+NM
%PSZ$FCWSUAQ"QU<kYpC?3jC\-_+0P>=_KE_IAoFV\FR?X&dSRfQl$.`\+rNH1ANoV-it1nA13DpU/Qm;K(8dB/eBH^RKC+1CeSVS
%^%I+)2*A7K#fjs37&n@)JY?-n]tg9hB3Nc^kEFZ__VfiKVCRMg'Ug*$Q7(S1jHh<SXq[8m1'*744%hW;81i?N/+qB>'F#$Q2BuX`
%%\,;:AV%3_>LSrU"NF^JipQT*YH0B:nh%pR-dkh%#]WcC_gEXdTL[-nR=aY%;jRsMf4fueQ22ia$40*h-/MYqNfnF9_O$7J5sc2\
%a9[KU"^82N8fH+uJ,o[60Po](jD.$uq,WpNTXmHJ<9.&J]Q`QHjerXQ=c.9?n3/ej9(u?C)rWMtr=Z;7J.&b.C'O4(Cjd:l"&KRW
%0Ue$7-:(2VS-LmgGi[u5kWgm3PC[diTi%*M]8+ndNu/7a-Bes00a)%:!eM&=ABmHl%>G]\M:Yop0Y@p^Ao6NkS$3S2a&q6E\[hH[
%,$.5;i/,6qrMU7V$o+,Og@ZU0AWhtIP\k]M!ULP^d*V!nKR?a,(gi^$iIsX3=jD:u9jf3",l;4/3nfYMQ3RFPI!lJe!gqCgF:t,\
%MDku>bS.^5CYS>ki,[8TQf[#XqqT7C_hk6eU&]m=-V!KqQ9ZWNXHB0Z0Z$hDp)p)g(QoJj1!p[dM\rRu^kmZDcNl+U$iLU@+6TM`
%jRl$IA7M-bER#P`9n!ic,8lhUE5mpj;@j]<WfW2b3Jf//_88$_K&bWP(CYO*jjZ9^*CZ,O.\'X0>W+p(/R(\13XY9+k>pI&0jY_*
%q#_>RZ^ETDO!QYIWY*hYY!Wf?%Wm^67N2ijTmUs%8^C!?-B*P@<<K&?aUg@X$,JMX=^gO'Z;!V6$uM?NfWPBL7R<.)!d#XoY-9Xd
%K)IqH3gRn:VT>b(,,,-*'KjrK2+RT7KZ*p5n\a<bjKKh%?+05dc_[+S+[CdB&t_h_QeX:%L6EJTN@egb03bY9T'64g$r4Zo0`+%&
%$mU_5N+fslT;XgZ@?#tS_UBYeKo+/I-ug/PDg_O&n3G$$a5O/]4c*hp1hJ^LTR<A-=8Fi,_RCjX"<,i&&1Wp(16bDbO-NMh'l"?i
%OKn$k@(m%d43pe/oR!j\"Pj6oC,>sT`Z`a;jK!N=Z@?;=Wupi,I?.2;1OV7.))ke36PQa9iuHsd'5YGsc@nkb,@P"I;Krhb6\u$K
%bgS&![g_C<=Kk:=g(CV6d^8LbZ8Wq#Z,;WWd6Tm9\>,K?WWQaT2c>d'Ohuq0<4"q:VFo&dM.7S1lk/oJR6-Ojbu>s&U6-GOn(c(W
%m!7hL-H@0274eiQ)eA/@k`l=*G_S0ulZ5QiMl_/T$OUC><.V=_#@\o/U.X8N"#@JU<"O:r]^;.`K>7soK8<=9'DKgYPCDml^g?lF
%00/XMH0S%(aX>*jgUL93k]pT%8TA_8,AlZ[BFZZP,D^.qMpKHGC8+ZWN41S5$!YdmY:/BAWOJOa^dr$2!Ho8LmuIU+="@oJ5QZE=
%'h$"h@WJA3VO!oeB5!W.c<s:QJf0V-%unRK;h:(g,k$k^aOtlJX=1A\B+kRJ0aME\@6TH-@#)Jn)O,NUP6?+pNGg7"$&Rs`*,(,^
%+s`MZ5[Tkb#RaP'?s(?*1qWq53L\;,Cjc,jVV"LmZ/HaP7\T42Kb%nMj1Sug<6G8Tl#7Nl*LN$cE0i\(_d5G@qp4Wa\P;Mh%eVZR
%G&`351lb,6LK]l'4*rGB'r-D8&kI<oT+D5O[lXf38I&2.bMknLC#E6Q+f3C+aCcRT_h8lAcnn@>-rK@h^-*"o*!M^ZJP:"<Jq9`N
%&1l]d(Ve<T1m)2$.E*ReAjPKE/He[[g4G=1pcp<sACfm_3[]C%p'"uN83*%'IMd5si^0JbF-:c86FS>j71os0c>DCj4mjCZqPLR5
%$q!ka69?bC3+gK.Bh]Khl:muT9P0;U11e;39.^tr#1@qf$/LX0As^$'d,^:3P_-FtI>BQZ+Ktn'm6DK*eksS6YjFQ>nk5\;(8X?>
%WsH/5#]4Y[6Ak7uORc[@=qlZCJ/Dd@37%m$[4QABh,A><+_AVPI?_&td7$D7C_TsPm"PY[HEk"Z(A/8DPZ+ET+.V0!$esH$QMa-W
%kV'^aiCTLL/3KUeYXAX8@#H>RSXj3L!_%ZE&/t.\encZn:D\Y49P@XV'[]RaKSHT2...Fh4is2Ec6*Co!%1SJF#[bkg]1nmCU*r-
%$=-!2G-Hcc8,r`+Naa)ln5tVO9f_i_<Wh]CNK^"X*VL4nSfK.C%MM@3LG:67*8XTuULN)UUVQ:r(buIVR*]G"7g6p#LiNNjLlKR0
%Yce&qR)RFn_@-Ts&;EehhC',\%LdKZg`GVS>7:u5flOcE`;O1Zhmn^EFP\O%-Mi9g_d:/M^EEk#;c.q"Y)b"-?,[j7`Qf^P<f06&
%Zrc6g*[QV%A_p7\=G2gBD>On+h?+J>;-Hmr(iUCi_N6lqMta3N!.HLSBnmQS-//bJ8<CZ?r;N/?r"SGAR>`Ph;iDYNF\>l:oDpI6
%!mR[d7ZcPXG]6K_6?^=;'KAVY1mm@d1bnCFS2BNkS<AKO=3>-^YW@DcI'T#F(1i.o#*+DVe7?jb6j8OdAi6l6AJIrXBaU^0naPni
%%++B:(D[5GXdUi_RDhl8LB`rQ5X_0ls2\/u`l^93"q<&E[9RI-$oeIOIOGXJ$9/4cZ:"*,-RF'^.NLI'qZ.AlGc\3YKh%"5W3gNN
%a$b/s\<Roc-MdWK^^&$9d.CE&SA6,Td%qLTZ8mZl$Ha.&#]4,Dm).`o+%C7)X>:qK%'LrFSF9;l4;&a9Q9qQT*ZGqYB%/`R6T_nN
%@(@ct*X/(k8!R.l*Xa9e?aB5d_jmp=43h:`2I>Qq[C`&R\tQ=WVoVeAVi#;h,2$(nTG(#EA0"41lJZ/\$0V"r@rpmnFD:8IS%oiW
%V==h\nn1;HVV(^<YeHu2\?*:bLd1$4@"`ihZbOkH(T1g^BjibR`gs@2*6k3IfM"OT4DW^Ar&@9e\!k$!cTC0=kI37,r&@[bDPp3.
%idq]*%?'Wlc?kBl$Obu]2]-dUOVX_R>`)3GeicXYNO6s+d1dfnffm:'*[.iQ186mFc%miiF13N:n^.+Bl&e2mAbOSDLU1$G,Sjf[
%,\)rHo8KmT;B&:`%ikcUdujh[g`.>:QlgX[9dBg5$cUgZPgAgINZ4J"D^$YuJ_7h-+"R;Wa<aM(Z;K%jLdC7YdTB'q5mYA.1<_]*
%[aW7I=7Q[FD5Tj<gG2aVQMQHJ'EmD@3GbrKLG6"s3."E!+q\MoF@u\I*$$b\^ec*0XrR(?h9IkM/5uqB<,0JoM6MMh>F[,l/I\"a
%'S#LcB'PVhlk3$&#2VP$F/RSRedXAagI#lk;1G\AJ6?i&(EpS^_[]A9Sus0QLu4Ac,@,SK3!04f\"RGm8-ff0M9&N(&(!C72R:OO
%N$t/3?)>E7NX.*G,8_FFCQLgCJMM>GJ;CX'P)*mM!)nk>=5ul6:L>lE>V>ZZ-^_8K,Vt?HMN(sO'/$p8j4L`I]dc`ZnUaZ@,)1[H
%@V959:^f,sJBFKoS..?PZ6iF13(_e&,/nFGN(Xq0k@b\KR\;"YV@Z:?")]U1dGB-c(XB.4]Gk7C0Eltu?9S_;OgBH==O3`U9^5pu
%Ed9;h[6kuM9\A>meHgGa9+MP1A8pTQ+JqQd&]Mm;OpS2U!BNau9G);-'n>Z+8g>g+lDO03.i/o*RtW>T+NS3+b&LP&H(_7p;G2`:
%g(_Ghc`k2S;FpAu4,#d(CihXg"3s/iONdU1AOQB>KJ!ei.RMTucGmps`[0C?0)'u?>9^7IKskKHTu0U^O.AR%2@W_A_BKU<.AAbi
%ndlD1H.NlXD)jNeb#lq'`Z_h2g.JHg932>;o9D0aKo0e+>W5Hd%80)ql$0j33;\4L_&&$<KUt?sLse$jAs>%?kYYU)``Hu06K8<7
%H(Yn@?07OQV<j%cGQ9?[OGiL&,s.dVlP:C2#;r<dZd27r`>d)onL3GT[KCBa\VALu7<0TWZd@7-#aMM\jf?2J]C7"UgBGC5j+p2:
%[NnY6C6,H#"I!L/j-=B*Y#K,/c<chF2lluVJ\FL@Ij&AgE_&Is-q#PO-VQ%U3egfoNb66?@t@e!_=A5Q<C]<nDN!B4j-<`YMJj+K
%6bkQ[kU5V2AOL5haut4.#Xldl<'2JV_M.?0[VAGP;#)uW;VD[R%rPA$KZ%&H`gbtH5XE>B)Zm,&&A$1TqmlEj&4?R_eIt2b4#D-K
%&_.$#j`&E^AOo?u\*$(Z3"h7m(KPtBMA(eFN(4)iifss$!=!&?kCKs"-Sp-<2NSbL0GE0+3b$DgJQt7MFEQaPXR)(3&AT;Ub+0`g
%$jD@qFI]i;(c6BaL>"1nm@OWS_3P!sr?j]q5EG)sH=1OqL'TRob8)(\6RE!NbW'I0lCK_dnd,UL?1BfQ#<paK&SU`r\7m)]-j49c
%+iCZ![RQC$iC`1AAqe`E[hOB%`EOS$Kn=Y.2A-JBN!(p8>%9!EB2<!RO/soUC6#_G%`^sXKp=\nTaIgEM(#H_Xq4sJ#^&Td",0h$
%E)ZqTN3QrTZu7uh(\Uc'</L]BMTi2%?A\!mORO@D8(-e(gL@!],09tM$bfI*:)XTnTGf/#jjKL_L^G/@&Q'2M.klON7=c9-=97No
%K.od&A!*]`"<XK1>c<StS4A0PpsMC@s+J/Qk>bb46IM^s@(p4*JpjbQ%PY`OZA9Wq<@qaTjN>8i6,o$)N(9d\&'!1c[)E6kl)gr3
%(R5s3d3k@AXL^Cf#K\X@=GlC@P(!e+X)1<UH7pRmNLYR:D1"<C&?P6]'_k9$oRt4pDY,nVNPZ]&a\&G'nlhQD*k3,LHp=a>$;cf+
%)PSkCC-47s`S*MGV(T#rKr\d<pe4O4(eI@ll<*/b7ULBSm``!Lb0%h'>kc*3:qNk0CCGp=+d,`f#Ji*u_lcG]8pM,4j?BL2*L&6?
%AaDB!]7j;N?kYSMbng@f^2^;DNKp"_T[#n<'c2Lui$;W&aH`rj[fsnhK^`8q84/6'et6FS]8/Og*$M0==TibJ7XeSGM/",p>of-Z
%ICj;k"ni4MWiM%F#OF1`R_=1.8j?_3$Fp;De:hOT779!&J84QV]GAb#M1B?'X#kmq,n.?6!@^C5_4#s*,U9LU>R_),O4a@fcg;V$
%B+pl]J!4,c'4LTENM2AUeKJQEiZ7Q3Heg#*mc#ZRis8kRkj5E5G<u*R0L+MGr=oHiEura'&D1M">.mg"#FJTX]<F='%^n&dMa3u]
%2t?&+R\TG0H!8^p=?MV+BD"eoY(a-**Q03-do26GQ]cS32W_jaM@\gc0bKjH(o/?'4T\T&ciY3D6]r,a(2.oCPib<:OZQ;(;9)-[
%,brf5dnkHXWg4V"[W8n-9I?\<ZqZS]TrhT%=)l#871Zu,,,/YsDYf[573k+;47#FtaCoX<j!--._Tj-*s&f"/V-JN(L5'9b\TBT]
%2MK#%qHuRaefA.fJB1=Y_GrjpPQt:ZeV"sB^FF7@`Ygs"OO"Y6",tDIQuJadSh8;TT-K`9mUXbD&5.ku0='+o"P(STa>0SD,9iZr
%"i6k:fTnedk\KE41h5cl>M9'u3JB&_::ZZN]-$Nf^seO&'(W"-/>nc,7DQ5Nc+lkOoJDZso'cZ_%hTe8Y,Um;6uakS>[?2_Fsug_
%++Gn"1#)E1'25A5Yd:7Y5M#d$C!!!f3qPmqeu]gD;V6Y.%'X`:O9j(NbW\N*#7e/\"s_c>NHKALJMVj7=aV_;BW@+f0nch!,!Zm%
%bab,"m:2NiIWDGORl&4YJJM+"5rtf,GsQT("P\ktj(]Bom?D_`OK>5"IEf2P%0!+*$Q-,qfFmSFLYA/&2&l5A6kka+?=9<RE`Sh5
%AF!r<i"Z".:_W>(0bAHF;r&!?jTf&<%Wc)!/;bVZUBiFA0p=uOII@"+T`nk[OZ"hB$@`=C*Da9QK#l+73-/Z`[Y%!sW+6GD<I2sI
%,Ie'm#'j*K0cAR@3.q9KB\HWB"%-/e$CJ(o4A^%C./r!;oRmm@>1c46KQ'^L8?NGY7TWqWZ^@fjK9PKhKHWe2>O:p61I?eM.h,&A
%9*L8o^?<Xa!BAGBaeg8JY,O=^S<nDk9?odk`"'G?K%8HLK*!jh4)>`q90;RWL$R1eFmn'JfMBM:0?#KR5XTuS58^N4>_Ls1:%kmc
%[0>"#8Al1o#A0p_[6uI_\$/\cG0lip'[R-$R4jq.6e+H,2BPpb`RISV[2#sl%c19o5T!guCkf4]b#aF`c2*8rqJkKRLQ2Wj/:^Q1
%o5bB)?*QX<q:Pt'7Na3WBGK4a>9-0K(3*akbY%E#0]n9sC0P,)PT$P6+uKVk?l:jT%X):M50rHXN$[P!JLA\1326MonPZJoQYI/m
%j$I;b<hUUXJD'U5,+BC#8AHpqYKc!(&+*98'Gg,kGVA+<llZRM2)_-f]EolC'aIsTp`1o<b!cq6bT[K"c*L[""!=CsaH20C=Bt;%
%g\J,8O5[sLD5mmu&/KT?`fGnh[%A:4UVtPiFd8P9E$_5FZIVs]=(GP3*pGs[Z.)?!ji:r$Z+=sh$Xq.J=D^!SN*W=?lm.8S;[M*Q
%MU`3t.)tZf<oW-e5'Sl2IU7]9h8Ik@KS`DJk\#eE.$S_f&cAjGB(JD)&kARpd%-U2im7FK&O'URWdQ_!S+DGT%VPVJq$[Lqgd#,2
%XYAgHZ3`4@PsRt]?tR&03<UjX.Jp&2A=n3GkY)_rhI2ALF@D=U,`KtV"*13=g(EVk<Z;DJYPkDbcN67<\$<lqkMh_._8%F\&GtTp
%G(FA;;9-RP2Q+ghHW(%T@ut:sK]8SfrS%&t87Jh=*^PZ\_FZ<&'X9))_eFl?-eV?N@U"`[35ZIW7-QUidf>'=)?_Ka7AdF"=,Rro
%krE]J;4P.:aee3S/Q?@5U3_!GSp%<18O)7i=04U&jkS4kaB<Oo_m9\XT]38CE@kcP$gHDn7hfpu1a@,a%F/BUrs8W<DFk:Y%g\^l
%At^<.%VoUgTLtl$b/7U[8Xp^Q(_/7N4rWHuKd7`l`.1K[Zl&c!AIJ423[^2?eRXb0q[Sm`_e4LM<XH5-.8j]TCiE(GWKntgFc<I3
%"!S5rT]rR?NO4]Ji>"iK'?nL%NK,2Q!SMm1Yfj,0$q=.>:EN#-=;)/e#U=fYKp!^\LdIb[dFK7f,p!UB@)jtg`214H-nE2?8uth;
%UsGU^LPg9('4P-A]RdA7'\3P^eQBMOMd3!L6!>7'*Q^HmNCHskeW1MG,&kI\nZr8mIOMIRb6&smVq7h'<C+9B8DU).^(Ue@:k5O]
%k@5'YYUjRG`"A@I#5EH8-Ab2D*hu=96:d@P.Gd.PmPnrH#G*62(q!f=RLOQdf%nlN>]u)q%(.ugD+C^)F2;Yh*0*O'(YYc@-PsjW
%nTDoX2&0Y[D"=6pC'**VF(8aeSLHLKNfaaC0'n`.n.J\5q*C+Z4)>G_U/4874b@*)bEBgfTWGj0F79MPYHqR@_BfYHR!iGam`=UP
%.&rgZFUMHCD1k2YZN6=8'@n6pi^85nP-2G,77r5(WAK?RE"N(,*Y:?]Qsn8@YS^&.@4&MOjF_VW.`+Gs!c&4cV^nT_YjaDe84>V>
%'=>;)(s/t;p^4?Ih5AUS]'1W0)sd6SYWOWP"Z-4uJbAs#&j<iqV0"-j+(L.?nNf+O!BoY!pZMfhEND,PT83Pp!IV!?LHL^.&)UQc
%VOCl]_fGc*@J]3#:p,BkVK>aO3R5b<WB)sSjp[[!8R&VZ5g,C"=;]!f;efpEZfmD^S3`+DMPB2`]4_:NcW8G>W![<F\s[L>blN(5
%RNM/i'0;E%crg=0N2H6O#&5bY-;a58ZIC*EgE@Y:I$6Up*'ZVQ-+5B$3kD3e3<#&sCXO52:-@-]J4K`iHBf0hK`Z,]Qb:!aJrsDW
%d?k!nZ)VCVR=p,*-r-*Hj31o>GbecG/7Ic!qhXj0FULh56sANrdr>X$ksjT?"klW)*dI<pS]:M<80ZV:Qj`BA-MiIsc/[f^lksXu
%K.,0#:W8!iKVhOG35l+>dH`Pe)B*1o=nLqR7bBc6FL-i%qH,M=VPFpX*[%]-0Dc#)7]@6L6;(^6IP[6C;JLCr0FEd*K(PA&ZFYi=
%9aFU$#JTl281M93?ajCK6]OKr#D*&XJ5$R8d9T.BV"oUV>9XD%6nbl-#-IB[)nrb4HluN]QJ<sYj<I9h6Z,:[LNYi+`l-S"I$PPl
%r#'!'d))rbA4>_!lYu5^[1p@Y'2]M"#g\:C]3VK==qR#_2T&j:$qjtpMA7'jDM*i;>(WflTVLiV9o8A,[glP)]b*LX@EV6ho:rVO
%%clUgj*-),%.Eq9fU85J![$!)lU0mb5Or&^b8"DpiU>t)2<GuW;-J8a(k&EE6u\$,%(=,>OEE8$4_*XM/57;3CS(Z>9b:EGd0PtV
%4DK^+SpIPO$(h74WZ)24#$C."TNDBRGPR.?$Y*:NL`amWpPS/P,:pqT\9&4^(_tITP[)"hq'21X+?#7s!^C0/@KJ_j#HD\a[,6?G
%K'%`TYKrK10Smo\2!e=7-:D/_.P:&.("XY2=G6!0?[]`YA'h89!O#!AiO7"kmDUjM*C:&9>n]&8@]84gn_OUGQ3B:p(_f2[6^]4n
%CL9[qNhdSigshT@Oi20O']2&/7i;PbctGqC3q"+Q?\<q;7LFfJ\f.p&8=IGjp5uCq6P$]3r8OI\27/(b4M!H';K.X2^<&i8J<e8?
%=!-<-q-aR2/'iVqd9]SPJEpfWO04m?,/R\s#W5H\Q?6rONCRS.W^%Zr6Ud4I`p5P:D^XIr,-k><EM[9nZW=rLfRN=`oW@-;TCCn?
%e1LFb+_QjiD6+jrX(Ke,"-IS"$89DF@A/>,aAIVa>"LCs>uWaP"VGoc&3@R$K?l#GX>[>%?e[9(OR-)jK0g_C_e`-T6#[B,)]^+J
%hG]RLF_$KsMXk;VSW)9B$RD21f?1PO'QHeK8[dO`/mpSqN7.;Lb)e_XVAqDsGTP!'5"=][Mo,-Tr,A0e!Ht9lq=Ko]-#X't.Lf!+
%Ph>,.=`r=qPP+I_Y4mu357qi)F*p:4[3-NNG7ACgAIAtrE]s[@b`A5kSQ^cqA(Lu2?GXK#E+5j%Vm5AAq`sZSL^RmDGar7(8P0MA
%&f:$\&_#\G<$\t_CmK%$5PiSlN+;XIi.J4Dc/P5I15^/?YQb*T;LIP.CR9L%Z-Xb"KNd($'+heX$YquNKg`s`]e-V;;&ZJXd6$4_
%HjPNaY^2)P9^Y=QXD(4F3]KoFMje*#-VcHAD@r4-7jQ*>[pKi5^,lf:Oq4,X=AcU`ge>th<>=TD)CnAe7pcuo.;M_sk<_+0a'BX.
%_#+0=*kI6_LMgsi"ST_(LE;V%H4G*6BDP-nTC?t#*5_UFclX<uLFTU+OT^ug2&quk#"*M>(.QG1k@1BU(r<TN5'-6,UhH!u_Ct5J
%GFRe1asEK,[U])i+=`/4&,0`HJW43E8#6n3B#lLbF3(TQ1@iO\7m['ec(E#m#=r3qQE9C]Bm;kJ4U.%N+Knm%_85/*%n.6:_=JrN
%#7FV+kF(mg<(QHn_6O,VpHlA4);i$ZB/tm'Y)88da[eh83WrF7Ok]]?SIS?j]c;UFot6]E4QJJ`n!^ZqinTspO)R>BBD=KYXHb*.
%\=4)u8(iJ/4Zs[8q).\=g87?_kWCDPbO1o%.uqe:e"tu9lSG:LbXLS!N$Ie-C94+>QErP1T%5UWiX@3T<fs\m+q6cagJB/-;_SWj
%aB6GI[)[BYLai5+geV<b1K[7qHjk^VP.c^%.l-dP'\I'QH-uj9j0M1:0caYRC!&*&/qn6e$mD@]Q"b_b%.+:3JSPV2a(Ih4jMU(-
%_9\HWX_8>E6B$b\_^GU^qkQBLS7L?s&8Ud+43;Q!hET$ZKVRJ'F[_;ujk'!tNci<k.UBu#[[pFg/&?T\Irj9pJuPCpJAW3)K7VZ(
%VtEGA_`Zh!.1GN$*h--!mbgqF._U5TSg:D09NeN_6PBV]V*FMp.n@bW>q\n%&*]1;J[5^o9*b;/A2qd@T/!+J>CuZjFVG63n1<6N
%_EPGCfLAYtksb;]6YYNWd\Ce+!K+%RSY`#pcra?&.(bqp35]i+f9\D57:[R+*Z:Vf;bj_Vj8qPm''Bb,Di>'Q,+&!N0b2/D7<3^-
%O4h.n,<h_c)pHkjH?u0:9](Fmg#W!]m`[Aie_#qJM/;Pu7@?:E'2mR'b'q-@Iu'OZ3sAe9['`ilZgb%9-dcZhMtKP+>L6)ajPVSE
%Xh1M2&Bokp<)&U#ajt"c`W.2@]jf[tqqVfqbI[3$7QIE2+dEB#fC\PI_\f@mC_a=*-6<JP1sIGSToMu8?8ATSVi7bN/1>e$G/tsW
%OG,CZm3_YK=pQ=PWce"XcCJ,<#ko:qLBYup'9NI@"#<.3X;Y$_VueMNkXTu[^dH+GBojnh!=V+@l/Z?9T8RO)[fAEo#4$u9(s.Y8
%aCLIjU'V7C$KlKhk?3M8/:<>[`!6Dk7?=)B<&ja_^+86+?\0:+17!q+LI`+Ur00o@Pp[.On;Zdbe29VD!]9Li+j!c&kRjME]C_mT
%'O`OVPrnP6go&TdBRT'lig@n`!WSK;Z\PU0$[il$039H:/Oj+*>94s,SDjHg9e;8&Y[g1$N3R^@PYg(9WRf]OlLZJJfp3IKQOpM@
%IQo!)>2?p\.X^+&TY:4Jj("[B-`j6d;V\12P%j!;0&VL%,Ee(]fR:PrQP14bK@XNdV=("k&@u&Srch4;fG3rcO5GO7>6uU4Teh5[
%C)iJqM*h)o@om>?oosk3dUOp:>&j=o3-oJrZ\Jdl\*`hfDsuG,Ce^)XhN?qbeB:Au<hm<7*rH!COGo2'!b5YAenEjG0buo^ol(NC
%hKrNPpU@3'];MZ(K92I_B"Fc2[kF/3R?8(3f%L-g7p8>\_P-KjG?Bk!$#liKHi_Q-;@^]0HWk)'B!.)r&/jjUCmb,M]N%X(hdpBu
%ja4L2ZUcoTO`<5/f8Pkr_cZan<<XumX<Z??*5=E#T.Zrq$uBeI9\Pf`e?VJ+P4+Fp@d(s5Iud:Ogk;N)LjMhP?>=0WHl)V"Wh:!d
%;o6.bhkLm>c5G;R9G^]AGbpm&s.l9AJ#QGC0JdoXp:'Oi_4oN@kV+.f+]k\)Ga\k?D]!V]?pnR^cN=:4>#rHo/luAq9>ASC7'e=]
%qq;iq;.Te_VgEn\)7Rer-%pub=G_fGMTMl/9t0WUk.M7l"t?FD6o9f0D9jQh?.G5>^.A&1^Yj8Gp#Kj*3(a[m.hiG^8W@\fTTBul
%inE[->HIL?pIu6$"SVKPS2H5[C\eN>WpB+2k6O"Cj8)8Y.LSh!,[SCn;Ka%S^d@8Big#I%]"GR>@(\u]%S<D=WZd9GCgF+jhfMN!
%VSV9;b?t't]03h!(2Em#W^H73m9@K":m[KkfV')b*&gO.a3:ie8E[O<2`^2d!b$juj$"AM,%<%"j/^qW^l=]iT$)2<e`C&7d'H\>
%`cq.:h2I`:(<f)J"(VChlEfD_@?HCk9SAjojjaoSY?>$o?aU:_8RA_RDa@XDkcqru"I"ubgTa:Hcs=$/>`CO@L3gL[[ER9Q-#H2I
%FCt?BXJJp%Urg]lf@9br\,Bn\W(12<A%8<N:\Yd#g?<H@@:)`YeRItV@+7tI7M%F%%=!ObT>OoieUr.%'dZ2,2&JqFVS*nq_lGum
%]iZYW.9o?!-rq%BHM5YT&6abY2rXt`K9Nt?Vs>c5!'hhe&4;p<&'A$eJa/V:bEBOd_]4#0_3l]J1cNjU.>*lCj:j0=dF'`M(M.%e
%NAuj+]L">TipsP3n%r34)<rptSY.HWgWo_25dq/=$UD?U"3tpAcjG68SK,RfJJ:_MW^P5OAuW^9n<Bnt_OaVGN:5V-o,*APWZ_sF
%1,j6HM8S<7i-WJgAfPEt*q4)".X;QXdVmSCR.bPVop#'qI8#..Q\m:3/<G^uBI<ANHuM/t.f6X+==uXTJCURL38an\o/"A8gi7AC
%BCknG`nto:ID7PmDgPBUJU2<+9T:eH&kQKr!8,=:@OOZOO@*F?I-\/1o"#Qd1sms#[NXBKA54pr^[u"bcn\SU7VNA!_@-GoJ2O]-
%)B4%fMVK<mqJENjRBfU#&O9bNR?81m]tI>fE@Jptd197n[6>DS"-G?,'sQ<2Fu#shKGVNIGXH&hKnA,i(^HM2J2K:.[SA.9Q;g"/
%C]-mJeB+tQMKi-GL<g7YapoTN1lX1>,)6DP8YPoKSUA(r'D`E::mKTZl2g65KGs;eE(-L(_S\-5.6(t]5qURAK9pdbn8OgT''k_q
%&n84rH=afTI<iJ=R]A+T\m7c;9`c+i6$gN1\`,hLM>R\uY?I8nTS,VZj>G!f"W>`609=>rWRRLa<Anm,7jNg^A2l2=<sI_&/3S*H
%9jhWZ<$>%5T]dX>97Tb9=BC#/)nIYH'8H"VJg4NULh=JcYZ(>\-?+ihkmW@6bnA#*p]\8cnXdD5n"@/S@)?^9l4^Vc:Hg4bZiruc
%F?,#VdQEGXo!;!QKP0,<(Oc.u3o0]dZPOITS5-I.3-*:;T\]41;1*?EM+;(]brP?aoZKNkFYc<"\0@r^"3)=D$'VhbPJ%k>3*7ec
%ORb"]`%ot6Z=R?5EJ6BicA[?`StVhYg@_U-!S&*n-rA%,ls'RSbsetAqNno]),]eV,-#6k]u<ePkY:=iAD+]X&fSP!G_V4]JLLq/
%E8sS0(7L/I.k#bu`N44jYgb/O%(qI>)g!/DZL,n;2?8]EBoJ14RE2SfgnfZ>'0q51Sosq.Su6RdPLI\F`;r8KFLVu'JNd+4<"l9q
%\9rg[cccUqi0Y`RfkZN[O>2_qpr,(';`o50PK_cG>G]XjSie5tJ.B51I<Z6Ya^`)V>X]YY6ek+-Z5:7Op&e?QqZWMa*"$MDja(.L
%&)rVKVn"GEl^1!;HCQBtg`N,@=0m->n.&K7+2!C_Y`lCO"K[InZs4_8HCQnQ?rk()=cf06c)YpZOWq_%`j?-Yn^t'4iN]*"KV8u[
%d"l8sj?i@`<S@)p;6:i;M@H*+RSNhjc[8YQG=+_a[YH^$oahJ`Q0Lpu!-?8j+YnXFVf>m@lja&Yjs"VB]RhAJpb3mU`Clm1AHq8[
%c(G%F,A@u/D8Ca:/7>,3ee%WbTNZ)?_L3kK$#fNnE4'K-)b:gqF-,?5XnO@NB.c/hd;FRUSp)oG3oKE7!8FE->nRqrF%s[PU`"O0
%SE(<1iMQ&Ne(PUgCVKhY,S(sZZN2Kb24RL"D6mQnZrM[78\dVG'?Km#R6kD#5.mO2>NK--fTVhXBU`NtY[s(UWG9[P,X_%ZN]Kj:
%:P6W!pg@e5+:++u+kuCtR5;Wml/RdcMaY"X1m!(^*+hO:BPqV+-FAh.dTme$!d@jJ`jXCLCh@43L(GQo@EX;.RV_n"BRr9'4dap#
%Vs(J`gQRY40hL<$Dr5$Y<phB.INH3,Jc;*2)-5CSZHG5Q\<?>)&O,iK8>USDN_PqCU$Een+X*'"b47257JeGs?4s#"E#j%EEA1GC
%;PoUcFtn.khUeD_[!$-N'YDSGBPthh7L46?)F;G8=enQKHfgi:/c4$.omD3r=lJNZ?#UJTp4T,B5T-'9LG..#%VbKn_j6\(L+ONL
%V">r(.rMMC(X'h3MQCGh#R.lDqhE9%&g-!FR-Qg$RRgo0pWBKW/tL,&Y?=\X%L0FbVmNY-5#`e3Wb]t=1sj+fRk&X2YkSP74a@7q
%#fTVGmpWAm'3Zg0"^>.]n\@&o+&?bHo6::N>@s#!,WFZ)VO!?tbP!>mF4**P(rIF@^bana*;3!^I4HFtGRCm-QS;rW>h.0Ek5RiM
%1I`BjL3&f,Z*D'3*DSIobfCMmoF'__H&sa=,'07YDTO0W8XRY/FPj$^E-dWjh)om>:-)OtUjb7:P?X6QjblYX3Mm^_-aF?)47OeX
%NoIoH%^S^SW<Pr_'1W+ZTH"IZAJT'-M%PqFD&*3m2F62Ifk%nML=*<'8E9h?I`!LKYND)kNB6VmFQi3n%PKh9QsRYKRk0+](#?<M
%V'5;ckuEE(A_`'R'0etX'V04OgeDp_8i@F+@;C;J+()\I_]3_Z\/s&7UT5S4Z[',\4^ACo+0`(Nd>ri38;T20'p!*`e&mZTP2IIT
%PL%;^[)5JhL16<.,EWKUh)4b.3G!m(S]>_bYabl<h]Ce!jo[f]N(bAo+\fYg6,?b&p'8hp_Id?-3'gY-;oHsP2(,T^3nsVNb8I*%
%8tL_%5G?N7d'!_k]K,t/lco+>WEiZK`(i-m-p4ukY^@]Mf<Urs?2:_^@^k4>Pj]2GlR%&3j)4b(0>AAp0L#PBq7qQeS(.L9FD8hu
%RWA']/nSrgm"U.p.dt#SjDeV/OTpQC&p"mKCG?,G3l-1Eg>\sFX*0^9"*MI]B^/@!6Fauj`B8P!I&A5H#hYC<=XZe.&P(=*Z$$kJ
%9P\R`en:(7buq[t8RW^%Dg"9b:%@Y+:H)g=;V'XdD`4RFBtKmZDO3\<4abX[QA)]RG^.tWqVccM^ISsBHq%r\J;_6[c,2GP.aKL%
%fpob/gX_i#e)'ZX5DE?ePsO[%"Z$jc):g9P>kuZ#aTr_KQ(9l>Psq+8VQANA3`QAdm,T<;I>N]81/BS-5TXR3+WHkt8EecYbAL=j
%F,1H.8[U%V;l&%bb:q!K94Sf3TH\6%R@R@b$J!Gi4"D%j,^^_8)<@rsWVn#@HGG@gN&U8*.3/\1CM#LLRM3W[qI7rRs)a"f$^?bS
%5[d/\60($NcN487,14<0M?J-4fi53Y5KL,Ze3'*I.;W[jHD&n.^h4*5(rQ0N.;`VZQ,5lKBE0)MVNZG^A3e3+(?,<sfYjuBZGK=*
%2Rs&%6_fgc'C/^eb(o=N?mlFD($9ql<DKZJMN]FoV)rBQN/LlXCa,'B<q[91P+mWSZeQX&3#e3YP4!`4qbaK&+:#PjbDB@-'M=MV
%;U-CTaO.iMbj6TQ\"[X+8GfI)`u\RAHE[%_O]DIhELkS=k]S`&\Og`Q8nq:+/F(D=%3)YX9[:pulOY;EP_SP8.FB4\$/e^sm6'T0
%NFUQi&Rj=@;a@.JfK?T5bEPr)C'mF20%`.NC*>m[c!6S),SUP/W`ReA1P@U-F$.%q1CnrU,=3-?A1*=6Le_GgOj<B4k)/$^k/<-`
%ADh!d3cAM)C2EkiNBGCpgs/MJAkH/#WVBR/.MY^C>t:K!f1@d(B7lPLf56?>[`c!/YC*u6VoUKtWbi+N!J4(NeZ!mGX4taZ[,Njg
%d+210(cGMhd@jSU?03"6DN-&-Xfgq&PBWY$Nq=SC*>WK.(H^6L;EBU?R<qk>J_(-Qj4/lVL/US1^_`(o)9C=mYCh,9SWKP`^>rWO
%PBY72P;/2q%[8Wa:;[(e.60BkZ;'T/6Tl5iLXF['A.5,S$qo)OcaUhIXbKhJ<,PWUaP8F\g3PV6`<N*cJ,bqj%E;o_A<T<tD;Di]
%C4V1O+"P_bPpW)u=GhCU3&$SYL.u:iQJH:!mF($&a[)lI,Np]4AL4!!<U.2s^K_NBb?M\NK^6fkTtidnppWiV8l-qkjJrl08HXgd
%NRA8d%BL1)b,bRdk"?pS-0-0.1bLKO-.AiQ]Udd&U1)&sB@R!E17LR[J@m(9_+!qa*0nM2H>aRi8d"-W2<f2hb!E)2HTMSKlkR<>
%Br!+#^fKA#geJ0N_3[Ac-FJ_9NM)-Y=Y41Bc.`hl&E8>@9KsHR8'5Uq30OBS+;)_Gg/$*%o/QBaVXtnKDZs3)Ju-S2&62GZHW(,d
%LpW9dm?K-t&R6-$BhCTQXp[B4;["naf:*1sOF_IXbUT3aG0KUEG3ue6!CY&sgs2MIaU!o`?OD9Zkgf>HjeTi.#L9!b5LELtBAV:H
%DBJ*U)//^n_+o>tVf='P/g'Q@%?7IV4[+^2!!u0%^JU+Y%dmP<g6X2p*S^9>]]D1@djpt1Qo5rq-r3G9Q[m7oUs;L38n0bo)An`>
%8O7A^Qrtu]_E&*g!u1b]MDs1IGn-g'&\cnmTt3#fKI*2kVO0mI43eg4NhdhT-3c>fiN-Pt+ZmK)S,r%TErk(PMCeh78R2>`&_Y!)
%,Bf#*Y==<h,NI`-0Lq0NS7]`<BF88T$"K;4950mSLGbepAeXS&-Pt_T,oapc=LQ%%Kl%DiM-1%G$<L0T1IK3KP,$..qDrm59Zh['
%]2?^_U<HesMd1YW6soQtICff-aD9'ZJqa05>/n520JXVf!Phi2V$r`tP$Mam;\&*,KO1giLY*(1Ln20b,$4_[6nh*+b*n"ta1jLP
%p.a9NY'i=iVG(!*n)ksY-S`p"OJAW+i1!joP&g$n@#g#d2>$N;0daSq^dC6f3(=kmjfTn\)J!hV4e:8r!d@#n%CZHLr)-D$LpB1@
%1UU?<D/DoQ9J,Q:'cg@(qqb(Te?\Nb4pfQu$C3IJq8/UIeNpbCi2c`d7%61,)'n'[#:%WuFR?']*m$s.j0#\o\,!^ieJ,K`;=*k.
%C8+,!B#dJh8r%H3<Hj<%eh_/cp/kO^?1!k%oXZ;2OFVd;g7nGWBTN/7l5kg+!`Xo_g\]#&V&6EWIC[\cY&mTFRuDPsCpddSTV")H
%N*RJl6\hYblg0$g0a)WQZX;G.F\7eM>lBt"`4WJmr6Q1FO(jqt;QRiL:/,3MZ3Y>>QncM;9AIC8^!C!iPTM5YWTgIUV=T(o]djZ\
%mq]-,Z;Da3+%Z8sWnbt:j!%KIRE`+p6?KuL`oV,LniO\;%pCd$Qp_^8.GCLp@Ib0`;2;;gB`t<+%b&k=cQG7@W9lS?oPOS!%&2*]
%n6V$cHE#:g+8i"WOR+EROqr/V8;S(hHo?VPGho+:,Af"f!pK7ggkCnsgg:U1W]Z24L[+WLldQ[lF%Tb0aU4Onq6#T?8+VJCFTOB4
%bW#Li;fr.W!B222;(fG\&X.j0Ca$nZ:nU`7-*XZe1'!CaVCiF6(#j=CUQQmV1?NWW\L4:ON1urbZgnEi8og`tDVnN@mKLoVk09mY
%nGsBa0AuEB(of7'&ZT(GmPYe4o.W8b6+<U@\`\?UF$tPnj.o(5#Q(Z<Y)3mCrlV\*`i@^h_nQ5p)b$9NUmB/,3Jqp:B*dt@<QgO!
%d`$SK2<7e#%4f$r2Xui.:Ql6Z[V9;Oi,X`MVh#"ZSjN'2c)Qdk76C<ZB!cC?gE/W*LEeAs9EJ>.r@LrJi>3l(#_BG")Z8R'44PA1
%eJ-utb^IH'Mh7)7<4nU+\,5!N$W(c@DS8\BiU%YL=IgYC6#5rEh7Tn@p9TgkP%gAEG=d+9?\(=M%CUkn@@jl;'YmHof[QpH,*QWU
%I6!Ko.l6`b_*B9t\/GWEfYj-pE47;$GK//9`=OLhgs>>%P#G^=@!Ko(N[*P9rE_W@Uu#Yn3.t[m@RGXgFrrSG6()UbBQ#kt-aiUI
%82\WFXiNc(o4cscEVmSqo/k@O?_AV]L$V0P=/,;KJkGoX,pha:>o!a]`bQ$-H.$E2;@V!p-eI^.cQ3VJJHYa:7q6RbBWl$R[9Ai:
%"5E1H/l'eh_IRT"pYOL_%3loe8i"2j$5a0WD=tPYdRdNKZ39DF5$]1gTT&4?Z(Rm`hO^`?Wh!bQAu@(.g+e.%(3D=,20VM?W"R<R
%*3sDhmLO?2TWW$?W-*]</jfFA$BDjB=p)I]p&jr,V%f`)C?V?/R$qc6(W1?K##5uLBbG5NX!J!?K/k%YO$FP<CUp3lb"*pZd.`Cl
%do?Yr-r#M:5)m5%,5e<lF?#^[B12'=QCu2rkQ.D:U4X2bDNa<O7u*<]m'%<mVcX7h6,.G=.?VoAJs[8X;`R$$gtJ9cd(9,9$O=E&
%:<c.A=.I(tC&:3uG0?5;ir]f)HV?KtqaaiA&9j:^&e0.'f_41u$-5fH=WF#6ag2#-)8Ttj.D3k5gmV4[d+>m`#fc@"c:]CYk%MQN
%`SQDSKjmUFAl\$^3mo$+H01JR(D=C0L1Mb^!:5JXfbnCX=>>I?64o;(Xr#(]?/Cj#3^c=Tqon#S4'VesDJk]=UDo0ig]APrfU><P
%K#(^!VC:rI[E\i)?`]Ou>91oSkYr#<L5dCuNa@@(h<7enU6GhPPD3'0_ETX3R4[j8DOjCfl;lcpLR9n0^=\)kfn44ciX<mr7:$;L
%k\dWX\\5B)1[.Q`&KJ'J??a-0n%-!A#9!?VYAU-<&ao7Z_+,c4bBC=#)17UINp3XZ1AJ)MVM<5d"s:lXAT,[RK9(.Tc&ibZI'Se)
%C`r\ui0-0r',bsKpi*Z!h='CCNHf]e-2f+YYr+FP*[?5s(B(\=P<2CpGIBs3:3B.dGKSDb`t\o.O:Q0pU*kMQSrW5li$Es#Q+YX'
%X:2f["1n@PQ,2pPDV\*L.=CK.Gt#_A.=<ttQaN@%<=8bk8c-=X"?E0F9><%eGun6RZ^BksF84tk+a(aes2a=E[I5hG8N7p,+h^E\
%P4Y);UQbW:*_jN+H]jV@MJ>8ak#9s@:h>[:.r:Isk^/1&D`Ol\pn#\E4n*\eqr7M>S:!D"H5L#&jQ<QAaX#pABlsZTJk9V'OK6k1
%,c;6[N;OlZNMGc^DUbRW`k.GF[5qa!bW+CWQ8Kjf(98"k+t<Dcb.!:SGM8=MQH(aaJid<QpfL!71U&sOIRG#?49P4n3[df)C&2tM
%H@Rl:eO=Ea%9RV`FoNKt,S5j/\QpmN[0r@K0qj/u*1\S4KRBA+#i;iJmL%r&S;<Co\c^,R_\H?fqPj<"[t2i<m2W$?6i&B4DVcm+
%=N7\48Dt4)M37,$Lq=@\fJ0C\k#5XH'WIlGALPj"J?IL]'fLWCXYX]rPUNJY4t`KE9C4H%6<84js2g4?m-AdN2ek8X(86LOYDa/Q
%_`0#D0A10C&_5-%hA]+%k86L]`t^lLs0.\Ya.&BlP!^MN4&KP1#=(=cWQQBeH$j]`Q0dO@=,d5uFW-Sb6#`k;Cj7KTFCbqfF]5u)
%%9@IrW%>b0-*NNZc1bUo$F1%'7+)*uU.qQ+[KJSFBt6!G8I*0)l;$K@a\jM'%CpW5)k1`Wj00P2F4'W"ZWKWL\l1kk\R;X?X=gZ5
%a%SJLFnJmI%q6AJnWFK#(JLuA*B/!!?1[Pjo"=7[N.!&`AfH&rbW`3dAOIOlM?$`cEu(6F0-CYIRLaNE*f(LLIjdUEh+7L'VcnXG
%EMVZ^WiEo6F(QMWVZ;<k;d9<^=paFtgMjhk23h5YbGWtDd/,$#pU$<9i@keEIu.i.-u%5a%Y4Hs6K-QjgL;@fh0kif')3rf1<9H^
%+"gbC.GL/6Y^_?[je3o]=A9=1Pb`3CA<FR_>:(S<2FM,2H-k,=;3>$Xa"q@L@?7O&Z,s0e4J\KG`HbZ#944".^2ja8bK.5'Y=AD3
%F\]ADmK^0l'gLgr8]_=o->PJU-1K*K=?EE(b@W0Xa]e)@ClS4<f[O3F/3pF?,?H&RK7Vdj:9lFaF8[#>9S-A=KfK9-Fj.1a%#SC_
%NeesrN&$g2c]!p?<^daU5@uYb"$=^)flO<@$L[HB*Nsb4gJasK]!Qj=Mj>8Hk\fb],_6\;A>Q9+FTR!i;At8/gl?i>H,R9[e_PMX
%!UID`N78PO7$'Q&jW'@C@Jt4D]9XLnb0lSuG26?,$e=Iplbuhc@l):;>7$&iK4Lk._OQM4C2sJs4cU7(eYI4_"++:@QQ!;ok06en
%`XYM:_tC&$<eWnI'k2FV3kE9NW'm,qY!2'-ckdNYV7WDZ=p5c"GBm!(#tt'4NI]faI0Aq$bf&P+^"MT2RqYs\o&`/[BA_&(lL3?S
%77SuZXlpBnfanS_b8VkCK:O'Ql7*!,mh?8!`X]_tHS6k:_pDM6gEr\(E3^I9N6;R2>]lcMKAK+^!uGUeQ]\Hr]ocFmR2H/Kb>qh#
%=AZG4<plo5FLVu?M4dSEHg%qMYA\"+a'Gp-2]fVjKQ3X^`FiW$!"FE0q%ldmB59XJ)rum>Ce/%2(.Rt?2D5^YYh^dm'7UGm!ngBV
%<C\c?;E]-Q-3(">gnImSVZNppr0h)/JC(0\(eL"Amd$_]L#0m!UM(m1Nh[bO-kYJG:*!#D#>7j''0nsk3SVXBSt2iRMc@;gOj2%>
%,ia\k/(-+&Mi%'\\E4He%EJrYE?1e4N0cl,'lQ0$`'6%+51h1n\mC4%UgiU]<lTIJWh4_W;@!`A;VkLjq4Ie*G$b9bjM]PtC\&ZS
%4j7RE4#A9eh'eq*B9NV%8W@eE/i_*%&r]DW$.h8%P3`Q\DH!ca*S!R%kp]I;m+JEXVS6e!^YV_)9D)&;"Y;56+UO8_ASZkh-e*h[
%cG4+Y+6HiRdN\IegL+YTd.:I.Dua0_00i?56T5I,O9oQ<'M<OMD^)k@Crq8Gh=p?kfEj:XLK=Nn@'5?dQ\f6E7CHIN5>O;EfHaW3
%0uH[WJO[4!mj>G;Y;Ai!Jqf'!@b<WL!;%rVleU\u4YhuC>\kO_lsGQ<Hh#r8<6aRPK6_RPFJ=8Po7P0VDNYo>H,_J(]gq]0EZ>t+
%:-D>"4\p<s"=S+!.]c$T@5,?gMB3_d>'_L+jH<Hn/Whslh9]VC`C@&f)<fY:H0OGVg5R4NUN.;/X(8(rK/Ma<WOp86-U)sKE)N.,
%><apIiXKd]5,;X$."7[?Hu@O^\/!X?>[oZmZ(>k%,QYd$9OA'G`VOOc3U[m-K6\M!67ELm8PL.o[nAWD[\b'\k4n&Z?-MTiF]=)[
%"n;c,JjA:p3<tTd8JF2l[HIMQ_K18W@ig(iEf128HB5*gaZTh9MOd2[qp%BnM8QVk6biOqT2K`M3(5TEJ?XXQmto/VeLpnh%djp_
%]Y?)5m)kOq]!BCl<@NtEotuYnLLL%;d^/[f;neDiQR#3(l=dq%F']0QZ:^!tRF,43g$)*XM8It>OA.Ff.:@t$j)q`-gqId=lh7lh
%Q;k(''K6oCZL_B;/P5cS*bVWp'GS<iR73g]fh7ju)1i,PUVV,c_%-@rMX2W'H_d=k^`KqcihI7FR'rqOob&4kkkAbebCtffm^95R
%WobqD9r^B&[s^'_F(hlhHo@CZ.,PS70nI8.a`;(Y!_X,<ol=d'(BkSqK@j9n8L'MC0X,.RfkrBm"P5[^8"&*SLdW"Wlr^s$(FfM!
%m+A<1k(^?o-,O;g;,iE)77]k8"O^O(a-N]t'>BeX`l!MF-i;d6HQMuVQXbiY['`ai$25;+H=GY,jLlZL$jW+kF#cJ;(&2X3AZ*2R
%C(h'9Khnj7FS6g)q_nmAk`B8c3kf:N.Ut'7FTpIH]LQ.h?rmska^:^X9!MTZAt^W\1e`2;&Ar[#7!?:FXaBT%n]!q\<C\l+>m";A
%UVKVk::nT+,/(*Q-X1g9#6`X&V/iokZJLB+c-OpTU$fJ!i<]R:(MZeITXqQ.K6i"$/aEEMi!6M?#JT&so1G;ZYDR$GG'o4T]R!>!
%OR-F>Q<EoAd=lCE%%f*HSCdH`0ihgSJLM3(I9d2;'nq!#",*JF#<D>6_jO1p?f1<C^&fDcHu]n4cb1bV#`-]'7Y^I5#ZA3,-*Zf9
%=*GaV\rD%t%qlGXmR$.%_ai4"i9fTei(q44rNkCHh/N5e=T+lPhSpTZ]WlSt=NRfOKO>,m'qA@F4ma:%2F9rR)L(&O1J-bW*-Y8k
%ABKX#O*p1(?=6j5EV-^7U<n<]1H*N]NgU/@D6_j#Vf8uoXn]l<rTQJUdIJ?EeE?)DO5::qH0'uVQI82pgn<c7@HRJYJX\PiJp/PE
%3+l3"g\7gpC^%/$r`J=+,aG;h"kje*fM`KJB2-YFX*PFr'QkOq?9(W%$rhD-qf5fm!Cr5'/^+iGJ.Ll-,R.V%-D5#E.E<d7o>TBj
%KJ+c(@-XJBNjj/Qpi1\!^SU6$Y&Vd,YnNCtO_V:AMPO`j,Nk/YT=sA,[=3?H!9#Ob^nj+[<`p3P:;i&NHY]KlVt[%L^PL&JE/!gm
%_'ntTSR\U=204i5g1FGfXM/YWTtpgXUY`h+8R`0kZk-4hpV,TlIn4O/)d7(HD<s?]B&jZ2G[EZ!<M*dL-P,[.]4>9t-nugAIua0A
%OpX9$!6o/r5.3A*ghG,]O7ZnQOh!aYDt"UdjLfW^[!f5W[bQYom:KYM6.1+(d,4]hU!^h]M*diKqp!\q[>j?U4C302_glVo0'"EX
%k2o@WbB\HHgV'"QjNG(SX#(/8&W,uCSIUE]^K?3@A9/Z*6OFme&9m_gWNN`2@fIC+VdO[cme0-BcYfta9_:\/,OBJi7M%EsdL=6a
%i,b,<6c3:<4f'>S*B"M492<)MJ'B6qisZK?p02F.iGeDE.3bZ.nSX3\4fKc]6-2Zipj9H^*PC1e8UmG]@^!Wh\IG%[L_&c2HSElG
%d"e`)+'p5:'#Da*&t'C+iUK>s`62,mR'a@"gm\[+Dg:mO>:7DIntp?g`q^5n,<2Y^\3ZH!6;ACG-=`SM5/;%HY?@f1E-1QYC!H#a
%#jtAnql8K&S;6II?ER^<&RhB=9O\"]hZGW8K4]lAZ:!W4KXsu"VEjq'mEa&XIugrM+@]=GTGYVKAkj^e"\L>(j?&%g:Ot\G12hBI
%d-UZbc^q9iPo:[Zdo1\F!J0mI-H&U@D?0$qW39&i>#(eM@Uhg.YoQh-Nr"g0fl-tm5J>K9BB*]6e0Ya'dZnS$qX8$^?_tAo.Ci`O
%4JBlq*>Wqg+MTKdo@_V,W!'auoRN%iAT,`X@,l*MVL*Qr`)Qo[Ws[m1m=tZ/lGR^[@Oe':njtW0W<Ye_,'?+P6cTmPU%_.@&egde
%>5C/GA&eau$];d7S0"1pI9MW='S5A4#eK]0d<@=Hs2.eWS^VoDSbHTO+\aIY0GnQFO7-AC8p4&PUq7pJoWQ%3bM*%3aQ&;2Blgg4
%\h.OEOIdu'4A=bXq0mina\@,lC#8T2!_'1uDRfIjN`R_GK2#jP3!4:f"3]),k=Qn0h#2R))H!QNj`CccL'dWa+ug:7PLXhH:PN5Q
%(3t/i6@'W/<=gKVK)+G=jDigmZ&HE.j.gN;>FJ(nC=Hu!h`4jN=]]Ht<6_c4"HhZ=L/??j,J$?f:mC5/-W)kp2-Kc2lQX.F$+_H>
%8Gng*TtRC"Jn3L,Sl<cg-%!r5^?;;tmEf(5W!I2Si%0?;o(:Y;I<p=%hZ`hT*s[#)X(k>2SC*oCNB)u_qn3f*$&m@D&N+'-C&.Ct
%Ah8gRD?m(QN.05"Jtj_4MgeYtcV)ZQUjc2(;9]q_O\LVMW>WTSB@N5Cd?nN<c.n5s+CS(?1;jrh2=b5,Y<,`oY2ZipfML+c5XAu>
%:=Y_nn?effNFCXX><#Vmp)0kjkZ!NBb%$V/Z"ct6*lVj^ARf2*720pf`]OC"'mM;L'*bB2FOZ:!-8p8k;V;oQ:0eF_W\G*1N$4s.
%9N7O(F&'uIO>qiM*br^i4sbn,NbZRn1EYEuWYnb'bgk'5c+($:W&e@fRPD:P9(tD)j-Pf&K-b#A;U,+m=u%GGQ/J$F`L(\nU3DVI
%a(LI&W*8Wn&OIh.Cf*035IkRsXKcHoa=_%F'P,iZ:1<or]ofiuV<q1EBiK-&*3gP!"A-kC<pFH?pQ-;IMbHdhcr,'DNf$\e=3c8j
%4SkVAA<]`D/"9>0kh<p4&Gr=Z'!.N*+V1qVKf*7hN<BrgkYSO=Kt(jBP=59"LRK6O17#7].dlh@j`+'.OM):&2gqV@P0B[_pRoYQ
%Z*L.Cel-)]1\$YZPsHIH_&@l4;,Iu7\dV?r.=RH5CaJ8O:RtI*ip!/2auuIGVmTNMKrq>;E%TMTlVcp<Wh.CN%m2^3lW!U!hU]0:
%`hu-s*-U=F5K.0c(oUbuc30kS=0YPH)LH'@Z]kjN94p]LgPPL&Nb^\IbKG;S%=#\;Mgm^CqIj)=:Ih\'0iH7;b>X`T=hVj(9)'+[
%Lf%6MT?8RI/gO7Y5:9!f*sb&,FkFnU40DrqZu(97'p([XAb,QOYm]K00<*[5KQ4f`N#d&%E!R(SCh5C)3?cKZDMAC)J\uPG,u$%#
%%'#RL(BOcp^_b^G]C/J`%ZEk#7ILBaJe?j,\?<W*YkA"Z;[HOBVZ2a=4U@:LD8&1OX-.j&mOP02ak!Rh5kp7m%3Yn_=cAU0Em1OU
%Wt7.#7KCR$"aoq+eU@0q0?3-Ue/]Oj^YkX:b-IO0+k\ZIJp&W$U_7;:k<nd%9c`S'E1O<!.l2#Roh>CEYsO;Aj:`g_Z]jiXdMSLB
%,Ecp)i<6'p8>3%dc@@d+AX=;ef8ZqUVj<7[TW[0feJCtX'HTbiQk<M[%9Z,1\e?gl&+sNmpZb")V.i&`Pido32V`c3CtgC^dijE$
%N3YF"^NY.*T$ql?AY[OGZSod$P)$0+LVc3^h"n!L"iK!0NHMi':MCLlRMb>1[_&8bgd]PuckXr:;,Q^Y'r,oC&?YS7X[5[O@[i3Y
%*F5ZnB4;;TIA_P7=YI`;U.Timad'r-JfssAQ8VR+%R54rAT,>M66dG+9(Q]#/G[tjR'[g&$7;<E2>gD;KZ!7paO-uDZ>ZT*7n*7'
%Tpj0&Wj;1.W*ASq+NmkhfL48-Wt)KX)m`/LjHhGQS7@7#:?VnaQopoR,\9\%gjqk4jS7gi^QtU:.j!Qb<OF0>SkO_0l8I[k(9!4k
%K/6c[=$J!PlmYXCZr'uhb=XQeo@2\9;ir:peTr:6BY%+cRoTE'gJA*)!.`d!9\%7\/$+99\J^'W.#<sj3`lpN",?/76m%qNfY*mY
%c-Z)m,f+0L_jrK!(g]Ud"QS'neQSRH8hlrEgNMISn?)0<n,KZs?a_HQ;qV?9c*ql2^%92mIpU)OTPi>qJTaW:JD)t(!);$RF4DIc
%.4W5G!7fOf8E.<9`':qTF;s_dnc8<IWQp6q-F*@l,V*?Alp9/+ZO;Ap?0f:[*71plMKT8`hA\Q@1?pm'1[,-d#LuJRV-pqn7rXm)
%+2@3am<j637Z8)46F<sf2%UM_XlGfFXASSKIMA6!eKsO8?7?emlWh)i[C=^Qepa5<lPFQP7EID^4BOd^Uh2l*:,$INZQr+"SnM>P
%f[78;P^ls@EB,@6g`d1X^W"+tBu6H(ATe(De2[oRPVu=e1@hYr(BlBjfeC]USPGT3&XZu"SO\VuG&q4T&(*i)*`>V?X9am7Ts>^.
%VSe?@DIgd$M..p`L/ghWe.O!H;YFS:A`e9lZ<2'!.469P<H&)pq+dBb7E,Xp>O@PY6%I[CL&atlS$IJ,_YGl!cR/&H55,WmXH32t
%["#D4O*-1V3iKUmh@;>Y/Otr/Sd;5dJ?T^J)e0D]gZ]nng;T$D=YdIbKo0rCO&)*Dfp`Z^`CsSjN9RA'='j(OjkMs5+$kcNGQMEE
%Nm#Gm:BHnXYFHp,s0WS3N/$l>L=7X3c)`Atjb$2sGUXYb\"l,$D8N,,+L_%+EOM-R$W9.n$>Tjt,E'r3R%)eH)Rs1q"+NURB8@'c
%>1D6o;t4\ThHo\gs,'PV:#fcCj1l:g*->oTC6hSn;qe6QES_+0?u,Xg_Bipf+`Q/i60KoMZ@B<JSUHX;4/V$j"qMI_,oi_pl-PT;
%6JBH+Oc@_nS4t,X,XtYeq`l0ak8A'hO%C^m,YoH[(]mUpKX6[F8:?4gk@TMQ=p:BSg?M<MGp2M,BY2k83)Gts6Q01L#+<_1/3i:h
%!7scN_5_+B:0&qWHdhZcE@N#BmHm[CAk'eL]_RW-NUK1Or)c)NPFr=dKkr,P!^si5Vd.%E>S_[JD,8c,'7i`ZogBlj]f0<.2f!#Z
%%SeALQ-S`Vqu$34VS+'%\/i^UI(S=l&Wsu^2(U\.B1Vq,$02F/WCB&d1AHH[+>R5Vd[4&-b!Lgc_AuTIJ7`KRArGDuQ.*9Cik'hd
%Tt9]dPP9n?*NT*;TItYf&t!N6kr3LNgNc<M:/d3=UoLRl;:"t.g9CT"c2^Cd;H*JWRI?7?h3'_"87ZtcA7G5J/G=9hC_:(B&8753
%hZ>2P%P+n#%[Dr2Lcq(OZq5I7kpP6<l,F$(_'9G!^e*;f:fM7ca+Od-\D?;dq4oF<e5HF/L\].=1pljdMA7Ztj3i"q25+;R^R4'<
%f9su3`$[>$-&%Y>P!GPb=<4FF]YDtS]gg,l9mLtGZqQB]-kLlY#[WS\CsaEk6@U#PQq"o.&61Um-n(p[Z6tRI(?^KfhN@)ZWt\Dn
%`B5AF3\:dEETmpO,0BW[@a;/Z"'.uA[tk&q?Wn^8Ro$b+<ftGAE<K\o[YK+_deKZ67_mhfGll#u]`@Hh6n_Kp7WdX+^acV/b@Q["
%\a2FI@KpKX9u2'PL41&:_oS[2Mp*W+,(2-8*unUX_hs7#'f3fS*Pjj4]<ND+7=M*mKCG6q.?_!8L]R$D'&uDp+Ua'_b!EgTR))_l
%',tZ?h@Q]%.a/'N9-o:5Lm#T%&g`X-GhF6sis[PD.b52s0Y-.;Q=#q)B_K>0T-_1KH':'<=B9%Z%s.Peg>A*)RJVVq,Oa[lK%G,1
%J*gHnCl/f?X38I5)uWF,@T/SQ'l;9>IPVXU95Dg"6k_Zs2Ie!],$XuVG1[^pYG?66Z#iL:o,?"Q1rSuf&AmV_04qujNm6GI$<mt9
%GcBcj(qH[^%^>9]%,*s08WPN@8UdX#.EXCT*Go>A-gC'%rg6nPHA;spm)9cX75QQWS.Y!5&C'Q7KD*>&*fc`-jtgsL"a2@T2NQXT
%^>n6Q4O2ZMDn*-fqm,`U=<<jDJe&1,@%m-fs/m.g\R_Su>`j!fRKn'joQc0*<<Fq?bo(c\6qoj=7%B*gH4@kBjoZOFjPs"B2NG$6
%DSn"q1T-=18b<^IbDRo>g?W0><E\pko<<kL;A;kZAMZ*JNU\0m"M>ETSPlPQYf4G2q_h[6QkL:*-mY(iIc'P0),)eY`D09'BnS`p
%3'@nK5m=B*2U;kW4JB^?lImdM,97`-UI*<n[TYX%,EC'L<M5,0DA^4GZe<#KQuMU8DLo>'-+V5%Q[f[pj!^LPKZ<63S5sKdn_aDn
%4lu(FrVh`Iqa/+F*G1>J6q$XK,K-2E`QIE6p/W6e_$4gm*k*#>I9?<M4/QS(Tr^9Z&AKf=V&\Amd">:RJ<a''!*,f8N[Tk($3=sT
%0\V,*l#?nT`4]-r(!KB'>(bMPXI%4q_mZD""?Ip"`e[_,c(9'GYHXt`?(:\VUm4mWbM0IWaW*ge#fYL1j$k:<$'/j0>/S1W#.U4W
%U'*Mi`MlRhq.=ILnk5+b.>qQu-r7*[5=-/q7!TEuf9%Tn@GZHDC")S36g@=o:Jq2<4hI9rc\07$Hh./g6u.kF'n5YhA)?Y7n*bpU
%Q]k>pLb+^sl#QL"bq2Lu^;ZWP"/]9O",-%LXQ)roUP<:e``l'37*%nk&QC8#6n3'7LbJ_k'u\UG%8anHTW6YHRfij:56uoHEWD?D
%<lh5K&^lbN\?=`A3Q#=q+A6:4%?;g*!^+1L$D.EB(i0EW*I@:oFt0fL`#D=%%Pf)RhXCCeoMjEpD_"cIa^9%YWq\p[aq5lO`na8m
%.pTYh-GOY5l.KDkin9j8h9Fg6q=Hj0@g1%sP*]=gBr64:1!<V<%U66A9G.(MCa&B+!8lZc?E/#\WaT@0c9/XRZ5P@.XPF'=DG_X5
%1#]JYB2u"<M@7a9=(iI7^7s^[13;+Ko"j`>8r0WZ>?f4TU4gb<en_lg10LX,MFnG%;^r?NPB2PmM89LdTGk[XJ8hhK"DuC,/RL%:
%8o&tgAhT&EoDV,uO.uma.nfRQ[8\F6"'C#u0.,[ucJIu$mq82<=#^Q2%9_[.6+>dU!-u3oJ]"S9Wg8I_)8=!6ad,UMML3N5c-hK?
%k]b]p:XK%ZBI6<5Fs7<Ok@u)")Mm+5&tMR_D&oj_&tmX`D(BZEiC'V34PiKW"^%=?UH71T(dhUu$]07QMoSE'TZ;Ub,2D8A.XO9u
%l/N#._R:WP6i#$Z;?-IG,<'sSqTQ,Ok2=eM(0QCf:=W[g!=mC*8k,n.bhK<H?Muo$0;e.(T(Z)0]_dcGWa<eA\&Ljm)GYk]HGTji
%bpdfLKH$\;+sB[oDLX1a)[`Z0A"Wm("mD+tCKFVGikCo$2T?\OWFV+7&%:6Z'Ctn^B>8LF,<FMja8d-t[]fhgIUQ`'#L>J=[n6Ca
%ci'Z6L$3-gAfGQZaL9nuaB(iLb<g^/br-;(k\AV#)#C9'XM/OSIn+RF!,A?&L,:rYB'?Np2QAWlS.qAp-n1oMVKOjhK,+hU!.7St
%)Hi(l!0ZoULuLIe02NeZoXUOJ=<h$llbL`eNQkBTX]Ybs@+,gD%?HR%:n^!65!X;95dROgK"BTDMYQu&HtN!@QM4O3ko`3T5(CPF
%^\95Ng[!queUPI9VPcZAs5>l@=^L=m*-V:uG4BUJBbnc+K"5us.JQim6MRV=a.).f5C(Ddf:W',B0ZDbc+jLe4oBJG76`(Ce(YrO
%?jKFFS3KuGD0ZQF49Tm,gFdcZ&_i`l-JdP:rWgB)'dPlK@[,F(7D5MOAaX0!C7(\/)#,>I5<lKh^h8)%m)E\hD&2E)r^1/>T#*T]
%R]j6)8?_k?^cD'Dm_ASM^?-B1Br&lL%lX_\k+=j?E=f/'(Yec1I"U`,c2c\XoKJA?N&okS2k9F<M#Vo"&-)$dYQ+URhu1OGhu2sB
%qW8=gifF-+_'/f+ir6&Rg`QIk`;SG\\3Ku95C4I+HnaVP:DkfPM"K$g[m.G%e,R,7rokl0VuQ>[5Q5;AqWjd0rqPZ&kpr,t='YRY
%bl9/W+ncJR>fba6h5GZZ,Pa+Ic-Gr):MC.`P:R8FAqH/*9d`/?#ai`W96'^')H:/FQI;/@L1<,356#(]/Lan4CU57t5Z_%cdjU'Y
%C$XFH34'QBUVFP6r\GF]c_oBDqUa=7AnE\54<[1LGCTL'7dR7-%OFN;kmIHjDq<PrD2Z,0PISZpAZ2VhmPc*Pd>$k%LM#G_N;MYd
%KTKC1AcbG_G6`LLHO>g.,DrF\hrk!eb7=aP/<?^\Ie;6iW:mi#ppu/$+K"E$Gpr3*AYie;<:20mN%aP97c_ZjF(%([2_fFLOnkbK
%dX7I0CQn\\C1_ZLH;lpMf%srOfoZ3n@#Pr3%H0=%b2H!c*&-du*a6rEa#@;Y`-BVPK64GI&+j8QLgD47,M8K1_1Vpr<Ts7TZp4W5
%*;ZYdT-^;qMk@s_>=3fC#)2s;!shT!#&khF^?Jpc_9?%HT^?;GhSmM/rk]'jLcr-m)UKr'bP^Wq1ML9t>]>4129)^O[>o/\($T13
%=7f.R%?:O"FRjBYV7.A-$4)Ng;0pHYD'h4)ANan>$h/ca]7E!Q#<R^UdjI4ISoTkW0A,kU_h/h#l#Ss/SP=R.p58[6Q[aHd%!dr.
%6P&0SAo5m\!kY;<98$X\Y_'"=Nu1gu)B&/"k/G>5"toig#/7`,;=e;p/P/Yo'#e4e[Zaa^gE#LbXh:D;e1s',a*+7cP.gg"CmUtN
%1Z^-k;f6cd%#X>XVU6sQS)otYU\B\+O+W^YEi7NU_LpU)D;`4)D6mE*%4Qitn<6AFY$&/5(/P@1Bh"8^0:=hkr1lsYTgFa(&RR$^
%HEl]n@3TK8G\I5`U3ZR^T,qekP-qmp`=.%TXU1\-]Z,DOe!D-t")jYu,b*TKqU-JuLM`]dO2%s(9aEZF8>#h/_i+uWet+_H[Y!-*
%RA%/l9sAX-e*f#Hq`Z\n]E9MUUBF(?dQBbo`BW:1IeOq+>Q%M!ht'+pG56MK<-eDZ4+\3[_2#lB^;3;@(B/stKIf@f`W+NVr"&a;
%?41!Zs7"%TL#;Cu_2Eg$]>GG6pQ#G2*hhKibH%OdZsF2Qr.k"O1OatCi=,bUJUiL$^D>8U&$H0pr56^^L?=O"2LL//66#s`rP8s#
%i3i'/Is<Q\i?)A6EVq=o#!)V!CLN7Dnbn$!BBWp*j$11<fWjbT%!VK%f)d#miO+cfmeJX%H$r,/IWYsF:\_glHlrF+o,e<jp]_fH
%K(oNl$%k2?*smT_L+bn;ro#*<&:`G)_BHY0#6H+KJrbRQ*eK_E&\m"7@F=*W/eQI*%tF$i0#>rQ13cHGlGr2cq=_:)rVBSk[jd_`
%YCHLQEU?c.V14n\'N%9PROT#fAe#*i1s'H6C$H=B!1iLl[agX[lT*k]8ki:3i;Q[0Ffj'\Rn+d3L!O@&pgtc,ihZm4n1C"t-,d?U
%X0B]H\A>tH.FV+3gCJ#dipj[Ic'<E+fS2db&mG=gI1Ll^22B(m!7h/+A<tcM'L?2'HpB"3(&CWt3"eIeLl)Armu.aURsE18fmVYA
%_1``",02ms<^#NWomNF-_CgUf'1GXR-@<]QVW$3]]sZY-`s4Xc5>[aO+DH$85o90J%:cqO-g>up8lHrB9d'fh_.f!g-B<lgobPIb
%&?@"^Xiqs9h@.1(qY4Gc36LL&Y"76>!gW(V$r0IJ,1i'i<).UGP<(Y7%HL%2j6Ap]XnI0m4L=NaJ<s!RT@=,'&s-2;%6#^H<SIud
%LCbt*Vta/A5,*sH1%#)BdO'NF"fD_1Dg'^fiJ_P-(aO#F4bfbb%,'98]T%[43enRb>.YC/g3A9ZOLpX5R5NrYWHar>[sM?TfC:b.
%3r&Sq;KL-m2KqS>@A^/9XD"Yd-j#JsFB'LW:[e@Ij;m0B6Ll8,`P=LpK,O6S>Hk*.$Yi^dV8f%=2NDfM'64D>QQ9Y`'t,hA`Z9Kb
%_++Q*_;)(TLc!OA*m[<'Oe%Q*JfR`b`u^&?8IUNc.lJF`E$%o`OUWe9+Y*i+9k-ifgbOa&KX")=!,%HtMA^Zg(s-nAc!@gZ?t_Q6
%B_P1T^@unt2J$h$[eF;,5D2'@W:rl"AS[]p*#pL+_+\)%g&,Kj&.&F36QLF05AQt&LV8;X.:n&0?oUe7ZVQr\V%9e*82Z,!\Rp-Q
%Ct3)Q7qS5&1DC55DRHS[@Lp<cOWr`R*O8&2a6CME',,Y^@1j(laNgWpJ>^Al!9(.'\1>qTV;Xckqg5'RPUC\nP$AX;lEoF"D,n/4
%L#02Ic.t`J<`-4N.44TY)X.O4$oLoPII3H$k1*u]]Mgo"`mZXScXuP2Y4dG'oFJJN&n9%S,',*_GL.48XW*aD9/DArH=AW3XN*E`
%!7&Rgo<PO=^oblgUF\<?O;(a1j2fF?"?BYtOV&Fcjg39LPg:&i+S@\G*OX;9?nR+<Hj]V]Hl&KEJJ2i8l0Q73%9&jqoO*_R4Pe$f
%.Ras:hJ?=WTknFOIVuL2caFn3hY`[KFsX(dfo>BM-q+9bLb6'c4D%C`ZJWA,\J2$a*&V(s_m:5-]<coNjPqK1[b?l)6U,\`cF+"6
%)],j/77HK&T["l(%dhG4"Bjs2XB0Vn$E)lKf1S1Ek?tn2eFlj8ae^bpk.M5kimR85%:\n)8A8aV/GKO*GN=@J2e?dP9n=7(;F<@d
%,jp2bM0?-8pss;G_?Z;9HE-/u[Wje^A6!WP,?K:<:l4Da%:V\N7k)$JI-mZ\Ujt/CD/&3qh]S`&@%jjG$;;^F@S_O*`]=:@SqtZH
%U+I"#k+.!hNFrq!G+\X\eJ?/#_1V6PU<2Rm5QAREnGE6rs5K)gp",gcq9RrGpXN>(_pAALQ[eVOJ,Sf%J,=HII.su)q4$:>nfPVl
%qW4o0"mk))s6oZZVn`&qS)=/BYJ9tskr8Y*fDbs]*]ai0r9&S%VgnWNhtd<F-YSS~>
%AI9_PrivateDataEnd
